{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\PolicyNotificationModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\PolicyNotificationModal.vue","mtime":1630397532752},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport _defineProperty from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nimport vToasted from '@/shared/notification';\nimport * as TYPE from '@/actionTypes.js';\nexport default {\n  name: 'PolicyNotificationModal',\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      internalSellerData: {},\n      allChecked: true\n    };\n  },\n  mixins: [vToasted],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    listSellers: \"mw/sellerEnforcements/\".concat(TYPE.GET_LIST_SELLER_ENFORCEMENT)\n  })), {}, {\n    sellerItemsList: function sellerItemsList() {\n      return this.listSellers.items || [];\n    }\n  }),\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    fetchSellerEnforcementsList: \"mw/sellerEnforcements/\".concat(TYPE.FETCH_LIST_SELLER_ENFORCEMENTS),\n    sendPolicyNotification: \"mw/settings/\".concat(TYPE.SEND_POLICY_NOTIFICATION)\n  })), {}, {\n    toggleAllList: function toggleAllList(checked) {\n      for (var sellerName in this.internalSellerData) {\n        this.toggleAllContacts(sellerName, checked);\n        this.internalSellerData[sellerName].allSelected = checked;\n        this.internalSellerData[sellerName].indeterminate = false;\n      }\n    },\n    toggleAllContacts: function toggleAllContacts(sellerName, checked) {\n      this.internalSellerData[sellerName].selected = checked ? this.internalSellerData[sellerName].options.map(function (option) {\n        return {\n          email: option.email,\n          contact_name: option.contact_name\n        };\n      }).slice() : [];\n    },\n    onChangeSellerContact: function onChangeSellerContact(sellerName, selected) {\n      // Handle changes in individual checkboxes\n      if (selected.length === 0) {\n        this.internalSellerData[sellerName].indeterminate = false;\n        this.internalSellerData[sellerName].allSelected = false;\n        this.allChecked = false;\n      } else if (selected.length === this.internalSellerData[sellerName].options.length) {\n        this.internalSellerData[sellerName].indeterminate = false;\n        this.internalSellerData[sellerName].allSelected = true;\n        this.allChecked = Object.values(this.internalSellerData).every(function (seller) {\n          return seller.allSelected === true;\n        });\n      } else {\n        this.internalSellerData[sellerName].indeterminate = true;\n        this.internalSellerData[sellerName].allSelected = false;\n        this.allChecked = false;\n      }\n    },\n    handleFetchSellerList: function handleFetchSellerList() {\n      var _this = this;\n\n      this.fetchSellerEnforcementsList().then(function () {\n        var defaultOptions = {\n          allSelected: true,\n          indeterminate: false\n        };\n        _this.internalSellerData = _this.sellerItemsList.reduce(function (acc, sellerItem) {\n          if (sellerItem.name && sellerItem.contacts && sellerItem.contacts.length) {\n            acc[sellerItem.name] = _objectSpread({\n              options: sellerItem.contacts,\n              selected: sellerItem.contacts.map(function (item) {\n                return {\n                  email: item.email,\n                  contact_name: item.contact_name\n                };\n              })\n            }, defaultOptions);\n          }\n\n          return acc;\n        }, {});\n      });\n    },\n    handleSendUpdatedPolicyMail: function handleSendUpdatedPolicyMail() {\n      var _this2 = this;\n\n      var payload = {\n        email_list: []\n      };\n\n      for (var _i = 0, _Object$entries = Object.entries(this.internalSellerData); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (value.selected.length) {\n          payload.email_list.push({\n            seller_name: key,\n            contact_list: value.selected\n          });\n        }\n      }\n\n      this.sendPolicyNotification(payload).then(function () {\n        _this2.vToasted('success', \"Policy notification email has been sent successfully.\");\n      }).catch(function (error) {\n        _this2.vToasted('error', error.data.message);\n      });\n    }\n  }),\n  created: function created() {\n    this.handleFetchSellerList();\n  }\n};",{"version":3,"sources":["PolicyNotificationModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <b-modal\r\n    :id=\"id\"\r\n    title=\"Please confirm\"\r\n    centered\r\n    @ok=\"handleSendUpdatedPolicyMail()\"\r\n    ok-variant=\"danger\"\r\n    scrollable\r\n  >\r\n    Are you sure you want to let all the contacts know about the policy change?\r\n    <div\r\n      v-if=\"internalSellerData && Object.keys(internalSellerData).length\"\r\n      class=\"seller-list mt-3 mb-0\"\r\n    >\r\n      <b-card no-body class=\"mb-2\">\r\n        <b-card-header>\r\n          <b-row>\r\n            <b-col cols=\"12\" md=\"6\">\r\n              <strong>Contact List</strong>\r\n            </b-col>\r\n            <b-col cols=\"12\" md=\"6\" class=\"d-flex justify-content-end\">\r\n              <b-form-group class=\"action-part mb-0\">\r\n                <b-form-checkbox\r\n                  v-model=\"allChecked\"\r\n                  @change=\"toggleAllList($event)\"\r\n                  name=\"toggle-all-button\"\r\n                >\r\n                  {{ allChecked ? 'Unselect All' : 'Select All' }}\r\n                </b-form-checkbox>\r\n              </b-form-group>\r\n            </b-col>\r\n          </b-row>\r\n        </b-card-header>\r\n\r\n        <b-card-body>\r\n          <b-form-group\r\n            v-for=\"(sellerItem, sellerName) in internalSellerData\"\r\n            :key=\"`seller-item-${sellerName}`\"\r\n            class=\"mb-3\"\r\n          >\r\n            <template #label>\r\n              <b-form-checkbox\r\n                :id=\"`contact-${sellerName}`\"\r\n                v-model=\"sellerItem.allSelected\"\r\n                :indeterminate=\"sellerItem.indeterminate\"\r\n                @change=\"toggleAllContacts(sellerName, $event)\"\r\n              >\r\n                Seller <strong>{{ sellerName }}</strong>\r\n              </b-form-checkbox>\r\n            </template>\r\n            <b-form-checkbox-group\r\n              :id=\"`seller-contacts-${sellerName}`\"\r\n              v-model=\"sellerItem.selected\"\r\n              class=\"ml-4\"\r\n              stacked\r\n              @change=\"onChangeSellerContact(sellerName, $event)\"\r\n            >\r\n              <b-form-checkbox\r\n                :id=\"`contact-${option.email}-${index}`\"\r\n                v-for=\"(option, index) in sellerItem.options\"\r\n                :key=\"`contact-${index}`\"\r\n                :value=\"{\r\n                  email: option.email,\r\n                  contact_name: option.contact_name\r\n                }\"\r\n                class=\"contact-checkbox\"\r\n              >\r\n                {{ option.contact_name }} &lt;{{ option.email }}&gt;\r\n              </b-form-checkbox>\r\n            </b-form-checkbox-group>\r\n          </b-form-group>\r\n        </b-card-body>\r\n      </b-card>\r\n    </div>\r\n    <template v-slot:modal-footer=\"{ ok, cancel }\">\r\n      <b-button variant=\"warning\" @click=\"ok()\">\r\n        <i class=\"icon-check\"></i> Yes, I understand &amp; confirm!\r\n      </b-button>\r\n      <b-button variant @click=\"cancel()\">\r\n        <i class=\"icon-close\"></i> No\r\n      </b-button>\r\n    </template>\r\n  </b-modal>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport vToasted from '@/shared/notification'\r\nimport * as TYPE from '@/actionTypes.js'\r\n\r\nexport default {\r\n  name: 'PolicyNotificationModal',\r\n  props: {\r\n    id: { type: String, required: true }\r\n  },\r\n  data() {\r\n    return {\r\n      internalSellerData: {},\r\n      allChecked: true\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      listSellers: `mw/sellerEnforcements/${TYPE.GET_LIST_SELLER_ENFORCEMENT}`\r\n    }),\r\n    sellerItemsList: function() {\r\n      return this.listSellers.items || []\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchSellerEnforcementsList: `mw/sellerEnforcements/${\r\n        TYPE.FETCH_LIST_SELLER_ENFORCEMENTS\r\n      }`,\r\n      sendPolicyNotification: `mw/settings/${TYPE.SEND_POLICY_NOTIFICATION}`\r\n    }),\r\n    toggleAllList(checked) {\r\n      for (const sellerName in this.internalSellerData) {\r\n        this.toggleAllContacts(sellerName, checked)\r\n        this.internalSellerData[sellerName].allSelected = checked\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n      }\r\n    },\r\n    toggleAllContacts(sellerName, checked) {\r\n      this.internalSellerData[sellerName].selected = checked\r\n        ? this.internalSellerData[sellerName].options\r\n          .map((option) => ({\r\n            email: option.email,\r\n            contact_name: option.contact_name\r\n          }))\r\n          .slice()\r\n        : []\r\n    },\r\n    onChangeSellerContact(sellerName, selected) {\r\n      // Handle changes in individual checkboxes\r\n      if (selected.length === 0) {\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n        this.internalSellerData[sellerName].allSelected = false\r\n        this.allChecked = false\r\n      } else if (\r\n        selected.length === this.internalSellerData[sellerName].options.length\r\n      ) {\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n        this.internalSellerData[sellerName].allSelected = true\r\n        this.allChecked = Object.values(this.internalSellerData).every(\r\n          (seller) => seller.allSelected === true\r\n        )\r\n      } else {\r\n        this.internalSellerData[sellerName].indeterminate = true\r\n        this.internalSellerData[sellerName].allSelected = false\r\n        this.allChecked = false\r\n      }\r\n    },\r\n    handleFetchSellerList() {\r\n      this.fetchSellerEnforcementsList().then(() => {\r\n        const defaultOptions = { allSelected: true, indeterminate: false }\r\n        this.internalSellerData = this.sellerItemsList.reduce(\r\n          (acc, sellerItem) => {\r\n            if (\r\n              sellerItem.name &&\r\n              sellerItem.contacts &&\r\n              sellerItem.contacts.length\r\n            ) {\r\n              acc[sellerItem.name] = {\r\n                options: sellerItem.contacts,\r\n                selected: sellerItem.contacts.map((item) => ({\r\n                  email: item.email,\r\n                  contact_name: item.contact_name\r\n                })),\r\n                ...defaultOptions\r\n              }\r\n            }\r\n            return acc\r\n          },\r\n          {}\r\n        )\r\n      })\r\n    },\r\n    handleSendUpdatedPolicyMail() {\r\n      let payload = { email_list: [] }\r\n      for (const [key, value] of Object.entries(this.internalSellerData)) {\r\n        if (value.selected.length) {\r\n          payload.email_list.push({\r\n            seller_name: key,\r\n            contact_list: value.selected\r\n          })\r\n        }\r\n      }\r\n      this.sendPolicyNotification(payload)\r\n        .then(() => {\r\n          this.vToasted(\r\n            'success',\r\n            `Policy notification email has been sent successfully.`\r\n          )\r\n        })\r\n        .catch((error) => {\r\n          this.vToasted('error', error.data.message)\r\n        })\r\n    }\r\n  },\r\n  created() {\r\n    this.handleFetchSellerList()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.seller-list {\r\n  &::v-deep {\r\n    .custom-control-label {\r\n      padding-top: 1px;\r\n    }\r\n  }\r\n}\r\n.action-part {\r\n  label {\r\n    padding-top: 1px;\r\n  }\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/page/settings"}]}