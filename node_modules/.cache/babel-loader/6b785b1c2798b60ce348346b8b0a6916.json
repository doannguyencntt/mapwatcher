{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\import-sdk\\import.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\import-sdk\\import.vue","mtime":1639556629166},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PermissionsMixin from '@/components/common/PermissionsMixin';\nimport { mapGetters, mapActions } from 'vuex';\nimport * as TYPE from '@/actionTypes.js';\nimport isEmpty from 'lodash/isEmpty';\nimport LoadingSpinner from '@/components/common/LoadingSpinner';\nexport default {\n  name: 'MWImportGSMaps',\n  mixins: [PermissionsMixin],\n  components: {\n    LoadingSpinner: LoadingSpinner\n  },\n  data: function data() {\n    return {\n      options: {\n        title: 'Upload (Google Shopping MAP Pricing)',\n        nextStepRouter: 'MWValidateGSMaps',\n        module: 'GoogleShoppingImport',\n        meta: {\n          report_id: null\n        }\n      },\n      isGetFullData: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    reports: \"mw/reports/\".concat(TYPE.GET_LIST_IMPORT_REPORTS),\n    planConfig: \"mw/\".concat(TYPE.GET_PLAN_CONFIG),\n    organizationStats: \"mw/\".concat(TYPE.GET_ORGANIZATION_STATS),\n    reportLoading: \"mw/reports/\".concat(TYPE.GET_LIST_REPORT_LOADING),\n    listGSReports: \"mw/reports/\".concat(TYPE.GET_GS_LIST_REPORTS)\n  })), {}, {\n    remainingSlotsASIN: function remainingSlotsASIN() {\n      var remainingSlotsASIN = parseInt(this.planConfig['plan_max_of_asin_for_google_shopping'] - this.organizationStats['asin_for_google_shopping_used']);\n\n      if (remainingSlotsASIN >= 0) {\n        return remainingSlotsASIN;\n      }\n\n      return false;\n    },\n\n    /* eslint-disable */\n    reportOptions: function reportOptions() {\n      if (!isEmpty(this.listGSReports)) {\n        return this.listGSReports.map(function (item) {\n          return {\n            value: item._id,\n            text: item.name_in_dashboard\n          };\n        });\n      } else return [];\n    }\n  }),\n  methods: _objectSpread({}, mapActions({\n    fetchImportReports: \"mw/reports/\".concat(TYPE.FETCH_IMPORT_REPORTS)\n  })),\n  watch: {\n    reportOptions: {\n      immediate: true,\n      handler: function handler() {\n        if (this.reportOptions.length > 0) {\n          this.options.meta.report_id = this.reportOptions[0].value;\n        }\n      }\n    }\n  },\n  created: function created() {\n    this.fetchImportReports();\n    this.isGetFullData = true;\n  }\n};",{"version":3,"sources":["import.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAA,gBAAA,MAAA,sCAAA;AACA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,OAAA,KAAA,IAAA,MAAA,kBAAA;AACA,OAAA,OAAA,MAAA,gBAAA;AACA,OAAA,cAAA,MAAA,oCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,MAAA,EAAA,CAAA,gBAAA,CAFA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,cAAA,EAAA;AADA,GAHA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,OAAA,EAAA;AACA,QAAA,KAAA,EAAA,sCADA;AAEA,QAAA,cAAA,EAAA,kBAFA;AAGA,QAAA,MAAA,EAAA,sBAHA;AAIA,QAAA,IAAA,EAAA;AACA,UAAA,SAAA,EAAA;AADA;AAJA,OADA;AASA,MAAA,aAAA,EAAA;AATA,KAAA;AAWA,GAlBA;AAmBA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,OAAA,uBAAA,IAAA,CAAA,uBAAA,CADA;AAEA,IAAA,UAAA,eAAA,IAAA,CAAA,eAAA,CAFA;AAGA,IAAA,iBAAA,eAAA,IAAA,CAAA,sBAAA,CAHA;AAIA,IAAA,aAAA,uBAAA,IAAA,CAAA,uBAAA,CAJA;AAKA,IAAA,aAAA,uBAAA,IAAA,CAAA,mBAAA;AALA,GAAA,CADA;AAQA,IAAA,kBARA,gCAQA;AACA,UAAA,kBAAA,GAAA,QAAA,CAAA,KAAA,UAAA,CAAA,sCAAA,IAAA,KAAA,iBAAA,CAAA,+BAAA,CAAA,CAAA;;AACA,UAAA,kBAAA,IAAA,CAAA,EAAA;AACA,eAAA,kBAAA;AACA;;AACA,aAAA,KAAA;AACA,KAdA;;AAeA;AACA,IAAA,aAhBA,2BAgBA;AACA,UAAA,CAAA,OAAA,CAAA,KAAA,aAAA,CAAA,EAAA;AACA,eAAA,KAAA,aAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,iBAAA;AACA,YAAA,KAAA,EAAA,IAAA,CAAA,GADA;AAEA,YAAA,IAAA,EAAA,IAAA,CAAA;AAFA,WAAA;AAIA,SALA,CAAA;AAMA,OAPA,MAQA,OAAA,EAAA;AACA;AA1BA,IAnBA;AA+CA,EAAA,OAAA,oBACA,UAAA,CAAA;AACA,IAAA,kBAAA,uBAAA,IAAA,CAAA,oBAAA;AADA,GAAA,CADA,CA/CA;AAoDA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,SAAA,EAAA,IADA;AAEA,MAAA,OAFA,qBAEA;AACA,YAAA,KAAA,aAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,OAAA,CAAA,IAAA,CAAA,SAAA,GAAA,KAAA,aAAA,CAAA,CAAA,EAAA,KAAA;AACA;AACA;AANA;AADA,GApDA;AA8DA,EAAA,OA9DA,qBA8DA;AACA,SAAA,kBAAA;AACA,SAAA,aAAA,GAAA,IAAA;AACA;AAjEA,CAAA","sourcesContent":["<template>\r\n    <div class=\"animated fadeIn\" v-if=\"isGetFullData\">\r\n        <div class=\"warning-plan px-2 container-fluid\">\r\n          <b-alert v-if=\"remainingSlotsASIN !== false\" show dismissible variant=\"warning\">With the current plan, your organization has <strong>{{remainingSlotsASIN | formatNumber}}</strong> remaining {{'slot' | pluralize(remainingSlotsASIN)}} for new ASINs. Your import processing will be failed if you try to add more than <strong>{{planConfig['plan_max_of_asin_for_google_shopping'] | formatNumber}}</strong> {{ 'item' | pluralize(planConfig['plan_max_of_asin_for_google_shopping'])}}.</b-alert>\r\n        </div>\r\n        <LoadingSpinner :isLoading=\"reportLoading\" v-if=\"reportLoading\"/>\r\n        <div v-else>\r\n          <div class=\"px-2 container-fluid\">\r\n            <b-alert v-if=\"reportOptions.length < 1\" show dismissible variant=\"danger\">Please create at least one <router-link class=\"text-danger font-weight-bold\" :to=\"{name: 'MWListReports'}\">report</router-link> to import MAP.</b-alert>\r\n          </div>\r\n          <Step1Import v-if=\"reportOptions.length > 0\" :inputOptions=\"options\">\r\n          <template v-slot:extend>\r\n            <b-row>\r\n              <b-col md=\"12\" lg=\"12\" sm=\"12\">\r\n                <b-form-group>\r\n                  <label>Select the report <span class=\"text-danger\">*</span></label>\r\n                  <b-form-select\r\n                    v-model=\"options.meta.report_id\"\r\n                    :options=\"reportOptions\"\r\n                    >\r\n                  </b-form-select>\r\n                </b-form-group>\r\n              </b-col>\r\n            </b-row>\r\n          </template>\r\n          </Step1Import>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport LoadingSpinner from '@/components/common/LoadingSpinner'\r\n\r\nexport default {\r\n  name: 'MWImportGSMaps',\r\n  mixins: [PermissionsMixin],\r\n  components: {\r\n    LoadingSpinner\r\n  },\r\n  data() {\r\n    return {\r\n      options: {\r\n        title: 'Upload (Google Shopping MAP Pricing)',\r\n        nextStepRouter: 'MWValidateGSMaps',\r\n        module: 'GoogleShoppingImport',\r\n        meta: {\r\n          report_id: null\r\n        }\r\n      },\r\n      isGetFullData: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      reports: `mw/reports/${TYPE.GET_LIST_IMPORT_REPORTS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      organizationStats: `mw/${TYPE.GET_ORGANIZATION_STATS}`,\r\n      reportLoading: `mw/reports/${TYPE.GET_LIST_REPORT_LOADING}`,\r\n      listGSReports: `mw/reports/${TYPE.GET_GS_LIST_REPORTS}`\r\n    }),\r\n    remainingSlotsASIN() {\r\n      const remainingSlotsASIN = parseInt(this.planConfig['plan_max_of_asin_for_google_shopping'] - this.organizationStats['asin_for_google_shopping_used'])\r\n      if (remainingSlotsASIN >= 0) {\r\n        return remainingSlotsASIN\r\n      }\r\n      return false\r\n    },\r\n    /* eslint-disable */\r\n    reportOptions() {\r\n      if (!isEmpty(this.listGSReports)) {\r\n        return this.listGSReports.map(item => {\r\n          return {\r\n            value: item._id,\r\n            text: item.name_in_dashboard\r\n          }\r\n        })\r\n      }\r\n      else return []\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchImportReports: `mw/reports/${TYPE.FETCH_IMPORT_REPORTS}`\r\n    })\r\n  },\r\n  watch: {\r\n    reportOptions: {\r\n      immediate: true,\r\n      handler() {\r\n        if (this.reportOptions.length > 0) {\r\n          this.options.meta.report_id = this.reportOptions[0].value\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchImportReports()\r\n    this.isGetFullData = true\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/page/gs-maps/import-sdk"}]}