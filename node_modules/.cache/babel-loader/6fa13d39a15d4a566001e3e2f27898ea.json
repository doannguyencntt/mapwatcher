{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\containers\\DefaultContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\containers\\DefaultContainer.vue","mtime":1629447787699},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport nav from '@/_nav';\nimport { Header as AppHeader, SidebarToggler, Sidebar as AppSidebar, SidebarFooter, SidebarForm, SidebarHeader, SidebarMinimizer, Aside as AppAside, AsideToggler, Footer as TheFooter, Breadcrumb } from '@coreui/vue';\nimport DefaultAside from \"./DefaultAside.vue\";\nimport DefaultHeaderDropdownAccnt from \"./DefaultHeaderDropdownAccnt.vue\";\nimport MWSidebarNav from \"./MWSidebarNav.vue\"; // import * as TYPE from '@/actionTypes.js'\n// import { mapGetters, mapActions } from 'vuex'\n// import { isEmpty } from 'lodash'\n\nexport default {\n  name: 'DefaultContainer',\n  components: {\n    AsideToggler: AsideToggler,\n    AppHeader: AppHeader,\n    AppSidebar: AppSidebar,\n    AppAside: AppAside,\n    TheFooter: TheFooter,\n    Breadcrumb: Breadcrumb,\n    DefaultAside: DefaultAside,\n    DefaultHeaderDropdownAccnt: DefaultHeaderDropdownAccnt,\n    SidebarForm: SidebarForm,\n    SidebarFooter: SidebarFooter,\n    SidebarToggler: SidebarToggler,\n    SidebarHeader: SidebarHeader,\n    MWSidebarNav: MWSidebarNav,\n    SidebarMinimizer: SidebarMinimizer\n  },\n  data: function data() {\n    return {\n      nav: nav.items\n    };\n  },\n  computed: {\n    name: function name() {\n      return this.$route.name;\n    },\n    list: function list() {\n      return this.$route.matched.filter(function (route) {\n        return route.meta.label || route.name;\n      });\n    } // ...mapGetters({\n    //   planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`\n    // })\n    // isSIPage () {\n    //   const siPageUrlList = ['si-listings', 'sellers', 'listings']\n    //   for (let item of siPageUrlList) {\n    //     if (this.$route.path.includes(item)) return true\n    //   }\n    //   return false\n    // }\n\n  },\n  methods: {// ...mapActions({\n    //   fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`\n    // }),\n    // async fetchPermissionsWithCache() {\n    //   await this.fetchPermissions()\n    //   this.gotoGlobalHomePageIfFailPlanConfig()\n    // },\n    // gotoGlobalHomePageIfFailPlanConfig() {\n    //   if (this.planConfig.seller_enforcement_enabled === false && this.$route.path.includes('seller-enforcements')) {\n    //     this.$router.push({'name': 'ps-dashboard'})\n    //   } else if (this.planConfig.seller_investigation_dashboard === false && this.isSIPage) {\n    //     this.$router.push({'name': 'ps-dashboard'})\n    //   }\n    // }\n  } // watch: {\n  //   '$route.path': {\n  //     immediate: true,\n  //     async handler() {\n  //       if (isEmpty(this.planConfig)) {\n  //         await this.fetchPermissionsWithCache()\n  //       } else {\n  //         this.gotoGlobalHomePageIfFailPlanConfig()\n  //       }\n  //     }\n  //   }\n  // }\n\n};",null]}