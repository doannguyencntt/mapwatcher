{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\PolicyNotificationModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\PolicyNotificationModal.vue","mtime":1626264502309},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es7.object.values\";\nimport _defineProperty from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nimport vToasted from '@/shared/notification';\nimport * as TYPE from '@/actionTypes.js';\nexport default {\n  name: 'PolicyNotificationModal',\n  props: {\n    id: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      internalSellerData: {},\n      allChecked: true\n    };\n  },\n  mixins: [vToasted],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    listSellers: \"mw/sellerEnforcements/\".concat(TYPE.GET_LIST_SELLER_ENFORCEMENT)\n  })), {}, {\n    sellerItemsList: function sellerItemsList() {\n      return this.listSellers.items || [];\n    }\n  }),\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    fetchSellerEnforcementsList: \"mw/sellerEnforcements/\".concat(TYPE.FETCH_LIST_SELLER_ENFORCEMENTS),\n    sendPolicyNotification: \"mw/settings/\".concat(TYPE.SEND_POLICY_NOTIFICATION)\n  })), {}, {\n    toggleAllList: function toggleAllList(checked) {\n      for (var sellerName in this.internalSellerData) {\n        this.toggleAllContacts(sellerName, checked);\n        this.internalSellerData[sellerName].allSelected = checked;\n        this.internalSellerData[sellerName].indeterminate = false;\n      }\n    },\n    toggleAllContacts: function toggleAllContacts(sellerName, checked) {\n      this.internalSellerData[sellerName].selected = checked ? this.internalSellerData[sellerName].options.map(function (option) {\n        return {\n          email: option.email,\n          contact_name: option.contact_name\n        };\n      }).slice() : [];\n    },\n    onChangeSellerContact: function onChangeSellerContact(sellerName, selected) {\n      // Handle changes in individual checkboxes\n      if (selected.length === 0) {\n        this.internalSellerData[sellerName].indeterminate = false;\n        this.internalSellerData[sellerName].allSelected = false;\n        this.allChecked = false;\n      } else if (selected.length === this.internalSellerData[sellerName].options.length) {\n        this.internalSellerData[sellerName].indeterminate = false;\n        this.internalSellerData[sellerName].allSelected = true;\n        this.allChecked = Object.values(this.internalSellerData).every(function (seller) {\n          return seller.allSelected === true;\n        });\n      } else {\n        this.internalSellerData[sellerName].indeterminate = true;\n        this.internalSellerData[sellerName].allSelected = false;\n        this.allChecked = false;\n      }\n    },\n    handleFetchSellerList: function handleFetchSellerList() {\n      var _this = this;\n\n      this.fetchSellerEnforcementsList().then(function () {\n        var defaultOptions = {\n          allSelected: true,\n          indeterminate: false\n        };\n        _this.internalSellerData = _this.sellerItemsList.reduce(function (acc, sellerItem) {\n          if (sellerItem.name && sellerItem.contacts && sellerItem.contacts.length) {\n            acc[sellerItem.name] = _objectSpread({\n              options: sellerItem.contacts,\n              selected: sellerItem.contacts.map(function (item) {\n                return {\n                  email: item.email,\n                  contact_name: item.contact_name\n                };\n              })\n            }, defaultOptions);\n          }\n\n          return acc;\n        }, {});\n      });\n    },\n    handleSendUpdatedPolicyMail: function handleSendUpdatedPolicyMail() {\n      var _this2 = this;\n\n      var payload = {\n        email_list: []\n      };\n\n      for (var _i = 0, _Object$entries = Object.entries(this.internalSellerData); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (value.selected.length) {\n          payload.email_list.push({\n            seller_name: key,\n            contact_list: value.selected\n          });\n        }\n      }\n\n      this.sendPolicyNotification(payload).then(function () {\n        _this2.vToasted('success', \"Policy notification email has been sent successfully.\");\n      }).catch(function (error) {\n        _this2.vToasted('error', error.data.message);\n      });\n    }\n  }),\n  created: function created() {\n    this.handleFetchSellerList();\n  }\n};",null]}