{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Contacts.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Contacts.vue","mtime":1639556629327},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nimport { mapActions, mapGetters } from 'vuex';\nimport * as TYPE from '@/actionTypes.js';\nimport { required, email } from 'vuelidate/lib/validators';\nimport vToasted from '@/shared/notification';\nimport _nav from '@/_nav';\nexport default {\n  name: 'MWSellerEnforcementContacts',\n  data: function data() {\n    return {\n      contacts: [],\n      canShowErr: false,\n      fields: [{\n        key: 'email',\n        label: 'Email Address',\n        class: 'text-left'\n      }, {\n        key: 'contact_name',\n        label: 'Contact Name',\n        class: 'text-left'\n      }, {\n        key: 'job_title',\n        label: 'Job Title',\n        class: 'text-left'\n      }, {\n        key: 'actions',\n        label: '',\n        class: 'text-right'\n      }],\n      nav: _nav,\n      deleteContactData: null,\n      originalContacts: []\n    };\n  },\n  mixins: [vToasted],\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    getOneSeller: \"mw/sellerEnforcements/\".concat(TYPE.GET_ONE_SELLER_ENFORCEMENT),\n    remoteEditSeller: \"mw/sellerEnforcements/\".concat(TYPE.REMOTE_EDIT_SELLER_ENFORCEMENT)\n  })), {}, {\n    removeRowAt: function removeRowAt(contact) {\n      this.contacts = _.filter(this.contacts, function (o) {\n        return o.index !== contact.index;\n      });\n      this.$bvModal.hide('delete-confirm');\n    },\n    editRowAt: function editRowAt(contact) {\n      var updatedContact = this.contacts[contact.index];\n      updatedContact.action = 'edit';\n      this.$set(this.contacts, contact.index, updatedContact);\n    },\n    addNewRow: function addNewRow() {\n      this.contacts.push({\n        email: '',\n        contact_name: '',\n        job_title: '',\n        action: 'edit',\n        index: this.contacts.length\n      });\n      this.canShowErr = false;\n    },\n    saveContacts: function () {\n      var _saveContacts = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var dataSet;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.canShowErr = true;\n                this.$v.$touch();\n\n                if (!this.$v.$error) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _context.prev = 4;\n                dataSet = _.map(this.contacts, function (contact) {\n                  return {\n                    email: contact.email,\n                    contact_name: contact.contact_name,\n                    job_title: contact.job_title\n                  };\n                });\n                _context.next = 8;\n                return this.remoteEditSeller({\n                  params: {\n                    contacts: dataSet\n                  },\n                  id: this.seller.id\n                });\n\n              case 8:\n                this.vToasted('success', \"Seller \".concat(this.seller.name, \" has been updated successfully.\"));\n                this.contacts = _.map(this.contacts, function (contact) {\n                  contact.action = 'done';\n                  return contact;\n                });\n                this.originalContacts = _.cloneDeep(this.contacts);\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](4);\n                this.vToasted('error', _context.t0.data.message);\n\n              case 16:\n                this.canShowErr = false;\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 13]]);\n      }));\n\n      function saveContacts() {\n        return _saveContacts.apply(this, arguments);\n      }\n\n      return saveContacts;\n    }(),\n    backToListSeller: function backToListSeller() {\n      this.$router.push({\n        name: 'MWListSellerEnforcements',\n        params: {\n          client_id: this.nav.clientId\n        }\n      });\n    }\n  }),\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    getPermissions: \"mw/\".concat(TYPE.GET_PERMISSIONS)\n  })), {}, {\n    isContactChanged: function isContactChanged() {\n      var checkContacts = _.differenceWith(this.contacts, this.originalContacts, _.isEqual);\n\n      var checkOriginContacts = _.differenceWith(this.originalContacts, this.contacts, _.isEqual);\n\n      return _.isEmpty(checkContacts) && _.isEmpty(checkOriginContacts);\n    }\n  }),\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var seller, _this;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this.$route.params.id) {\n                _context2.next = 3;\n                break;\n              }\n\n              this.backToListSeller();\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _context2.prev = 3;\n              _context2.next = 6;\n              return this.getOneSeller(this.$route.params.id);\n\n            case 6:\n              seller = _context2.sent;\n              this.contacts = seller.contacts;\n              this.originalContacts = _.cloneDeep(seller.contacts);\n              this.seller = seller;\n              _this = this;\n\n              _.each(this.contacts, function (contact, i) {\n                _this.contacts[i].index = i;\n                _this.contacts[i].action = 'done';\n              });\n\n              _context2.next = 18;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](3);\n              this.vToasted('error', \"Seller \".concat(this.$route.params.id, \" not exist\"));\n              this.backToListSeller();\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[3, 14]]);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  validations: {\n    contacts: {\n      $each: {\n        email: {\n          required: required,\n          email: email\n        },\n        contact_name: {\n          required: required\n        },\n        job_title: {\n          required: required\n        },\n        action: {\n          required: required\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["Contacts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFA,OAAA,CAAA,MAAA,QAAA;AACA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,OAAA,KAAA,IAAA,MAAA,kBAAA;AACA,SAAA,QAAA,EAAA,KAAA,QAAA,0BAAA;AACA,OAAA,QAAA,MAAA,uBAAA;AACA,OAAA,IAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,6BADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA,KAFA;AAGA,MAAA,MAAA,EAAA,CACA;AACA,QAAA,GAAA,EAAA,OADA;AAEA,QAAA,KAAA,EAAA,eAFA;AAGA,QAAA,KAAA,EAAA;AAHA,OADA,EAMA;AACA,QAAA,GAAA,EAAA,cADA;AAEA,QAAA,KAAA,EAAA,cAFA;AAGA,QAAA,KAAA,EAAA;AAHA,OANA,EAWA;AACA,QAAA,GAAA,EAAA,WADA;AAEA,QAAA,KAAA,EAAA,WAFA;AAGA,QAAA,KAAA,EAAA;AAHA,OAXA,EAgBA;AACA,QAAA,GAAA,EAAA,SADA;AAEA,QAAA,KAAA,EAAA,EAFA;AAGA,QAAA,KAAA,EAAA;AAHA,OAhBA,CAHA;AAyBA,MAAA,GAAA,EAAA,IAzBA;AA0BA,MAAA,iBAAA,EAAA,IA1BA;AA2BA,MAAA,gBAAA,EAAA;AA3BA,KAAA;AA6BA,GAhCA;AAiCA,EAAA,MAAA,EAAA,CAAA,QAAA,CAjCA;AAkCA,EAAA,OAAA,kCACA,UAAA,CAAA;AACA,IAAA,YAAA,kCAAA,IAAA,CAAA,0BAAA,CADA;AAEA,IAAA,gBAAA,kCAAA,IAAA,CAAA,8BAAA;AAFA,GAAA,CADA;AAKA,IAAA,WALA,uBAKA,OALA,EAKA;AACA,WAAA,QAAA,GAAA,CAAA,CAAA,MAAA,CAAA,KAAA,QAAA,EAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,CAAA,KAAA,KAAA,OAAA,CAAA,KAAA;AAAA,OAAA,CAAA;AACA,WAAA,QAAA,CAAA,IAAA,CAAA,gBAAA;AACA,KARA;AASA,IAAA,SATA,qBASA,OATA,EASA;AACA,UAAA,cAAA,GAAA,KAAA,QAAA,CAAA,OAAA,CAAA,KAAA,CAAA;AACA,MAAA,cAAA,CAAA,MAAA,GAAA,MAAA;AACA,WAAA,IAAA,CAAA,KAAA,QAAA,EAAA,OAAA,CAAA,KAAA,EAAA,cAAA;AACA,KAbA;AAcA,IAAA,SAdA,uBAcA;AACA,WAAA,QAAA,CAAA,IAAA,CAAA;AACA,QAAA,KAAA,EAAA,EADA;AAEA,QAAA,YAAA,EAAA,EAFA;AAGA,QAAA,SAAA,EAAA,EAHA;AAIA,QAAA,MAAA,EAAA,MAJA;AAKA,QAAA,KAAA,EAAA,KAAA,QAAA,CAAA;AALA,OAAA;AAOA,WAAA,UAAA,GAAA,KAAA;AACA,KAvBA;AAwBA,IAAA,YAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA,qBAAA,UAAA,GAAA,IAAA;AACA,qBAAA,EAAA,CAAA,MAAA;;AA1BA,qBA2BA,KAAA,EAAA,CAAA,MA3BA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AA+BA,gBAAA,OA/BA,GA+BA,CAAA,CAAA,GAAA,CAAA,KAAA,QAAA,EAAA,UAAA,OAAA,EAAA;AACA,yBAAA;AACA,oBAAA,KAAA,EAAA,OAAA,CAAA,KADA;AAEA,oBAAA,YAAA,EAAA,OAAA,CAAA,YAFA;AAGA,oBAAA,SAAA,EAAA,OAAA,CAAA;AAHA,mBAAA;AAKA,iBANA,CA/BA;AAAA;AAAA,uBAsCA,KAAA,gBAAA,CAAA;AAAA,kBAAA,MAAA,EAAA;AAAA,oBAAA,QAAA,EAAA;AAAA,mBAAA;AAAA,kBAAA,EAAA,EAAA,KAAA,MAAA,CAAA;AAAA,iBAAA,CAtCA;;AAAA;AAuCA,qBAAA,QAAA,CAAA,SAAA,mBAAA,KAAA,MAAA,CAAA,IAAA;AACA,qBAAA,QAAA,GAAA,CAAA,CAAA,GAAA,CAAA,KAAA,QAAA,EAAA,UAAA,OAAA,EAAA;AACA,kBAAA,OAAA,CAAA,MAAA,GAAA,MAAA;AACA,yBAAA,OAAA;AACA,iBAHA,CAAA;AAIA,qBAAA,gBAAA,GAAA,CAAA,CAAA,SAAA,CAAA,KAAA,QAAA,CAAA;AA5CA;AAAA;;AAAA;AAAA;AAAA;AA8CA,qBAAA,QAAA,CAAA,OAAA,EAAA,YAAA,IAAA,CAAA,OAAA;;AA9CA;AAgDA,qBAAA,UAAA,GAAA,KAAA;;AAhDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkDA,IAAA,gBAlDA,8BAkDA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,QAAA,IAAA,EAAA,0BAAA;AAAA,QAAA,MAAA,EAAA;AAAA,UAAA,SAAA,EAAA,KAAA,GAAA,CAAA;AAAA;AAAA,OAAA;AACA;AApDA,IAlCA;AAwFA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,cAAA,eAAA,IAAA,CAAA,eAAA;AADA,GAAA,CADA;AAIA,IAAA,gBAJA,8BAIA;AACA,UAAA,aAAA,GAAA,CAAA,CAAA,cAAA,CAAA,KAAA,QAAA,EAAA,KAAA,gBAAA,EAAA,CAAA,CAAA,OAAA,CAAA;;AACA,UAAA,mBAAA,GAAA,CAAA,CAAA,cAAA,CAAA,KAAA,gBAAA,EAAA,KAAA,QAAA,EAAA,CAAA,CAAA,OAAA,CAAA;;AACA,aAAA,CAAA,CAAA,OAAA,CAAA,aAAA,KAAA,CAAA,CAAA,OAAA,CAAA,mBAAA,CAAA;AACA;AARA,IAxFA;AAkGA,EAAA,OAlGA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAmGA,KAAA,MAAA,CAAA,MAAA,CAAA,EAnGA;AAAA;AAAA;AAAA;;AAoGA,mBAAA,gBAAA;AApGA;;AAAA;AAAA;AAAA;AAAA,qBAwGA,KAAA,YAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA,CAxGA;;AAAA;AAwGA,cAAA,MAxGA;AAyGA,mBAAA,QAAA,GAAA,MAAA,CAAA,QAAA;AACA,mBAAA,gBAAA,GAAA,CAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AACA,mBAAA,MAAA,GAAA,MAAA;AACA,cAAA,KA5GA,GA4GA,IA5GA;;AA6GA,cAAA,CAAA,CAAA,IAAA,CAAA,KAAA,QAAA,EAAA,UAAA,OAAA,EAAA,CAAA,EAAA;AACA,gBAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA;AACA,gBAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,GAAA,MAAA;AACA,eAHA;;AA7GA;AAAA;;AAAA;AAAA;AAAA;AAkHA,mBAAA,QAAA,CAAA,OAAA,mBAAA,KAAA,MAAA,CAAA,MAAA,CAAA,EAAA;AACA,mBAAA,gBAAA;;AAnHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsHA,EAAA,WAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,KAAA,EAAA;AACA,QAAA,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA,QAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SADA;AAEA,QAAA,YAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,SAFA;AAGA,QAAA,SAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,SAHA;AAIA,QAAA,MAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA;AAJA;AADA;AADA;AAtHA,CAAA","sourcesContent":["<template>\r\n  <div class=\"animated fadeIn\">\r\n    <b-card>\r\n      <!-- header -->\r\n      <template v-slot:header>\r\n        <div class=\"d-flex justify-content-between align-items-center\">\r\n          <span><strong>{{$route.meta.tableName}}</strong></span>\r\n          <div class=\"card-header-actions\">\r\n            <div class=\"btn-close\">\r\n              <b-button variant=\"secondary\" class=\"btn btn-block\" size=\"sm\" @click=\"backToListSeller()\"> <i class=\"icon-arrow-left-circle icons\"></i> Back </b-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      <table class=\"table b-table table-striped table-hover border\">\r\n        <thead class=\"thead-light\">\r\n        <tr>\r\n          <th v-for=\"field in fields\" :class=\"field.class\" :key=\"field.key\">{{ field.label }}</th>\r\n        </tr>\r\n        </thead>\r\n        <tfoot>\r\n          <tr>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td class=\"text-right\">\r\n              <button class=\"btn btn-success btn-sm save-button\" @click=\"saveContacts()\" :disabled=\"!getPermissions.module_enabled || !getPermissions.permissions.seedit || isContactChanged\">\r\n                <i class=\"fa fa-check\" aria-hidden=\"true\" ></i> Save\r\n              </button>\r\n              <button class=\"btn btn-primary btn-sm ml-2\" @click=\"addNewRow()\" :disabled=\"!getPermissions.module_enabled || !getPermissions.permissions.seedit\">\r\n                <i class=\"icons icon-plus\"></i> Add more\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n        <tbody class=\"text-center\" v-if=\"contacts.length > 0\">\r\n          <tr v-for=\"(data, index) in contacts\" :key=\"data.index\" >\r\n            <td class=\"text-left\">\r\n              <span v-if=\"data.action === 'done'\">{{ data.email }}</span>\r\n              <b-form-input v-if=\"data.action === 'edit'\"  type=\"text\" v-model=\"data.email\"\r\n                :class=\"{'is-invalid': canShowErr && ($v.contacts.$each[index].email.$invalid || $v.contacts.$each[index].email.$anyError)}\">\r\n              ></b-form-input>\r\n              <div class=\"mw-error\" v-if=\"canShowErr && ($v.contacts.$each[index].email.$invalid || $v.contacts.$each[index].email.$anyError)\">Email is invalid!</div>\r\n            </td>\r\n            <td class=\"text-left\">\r\n              <span v-if=\"data.action === 'done'\">{{ data.contact_name }}</span>\r\n              <b-form-input v-if=\"data.action === 'edit'\" type=\"text\" v-model=\"data.contact_name\"\r\n                :class=\"{'is-invalid': canShowErr && ($v.contacts.$each[index].contact_name.$invalid || $v.contacts.$each[index].contact_name.$anyError)}\">\r\n              ></b-form-input>\r\n              <div class=\"mw-error\" v-if=\"canShowErr && ($v.contacts.$each[index].contact_name.$invalid || $v.contacts.$each[index].contact_name.$anyError)\">Contact Name is required!</div>\r\n            </td>\r\n            <td class=\"text-left\">\r\n              <span v-if=\"data.action === 'done'\">{{ data.job_title }}</span>\r\n              <b-form-input v-if=\"data.action === 'edit'\" type=\"text\" v-model=\"data.job_title\"\r\n                :class=\"{'is-invalid': canShowErr && ($v.contacts.$each[index].job_title.$invalid || $v.contacts.$each[index].job_title.$anyError)}\">\r\n              ></b-form-input>\r\n              <div class=\"mw-error\" v-if=\"canShowErr && ($v.contacts.$each[index].job_title.$invalid || $v.contacts.$each[index].job_title.$anyError)\">Job Title is required!</div>\r\n            </td>\r\n            <td class=\"text-right\">\r\n              <button v-if=\"getPermissions.module_enabled && getPermissions.permissions.seedit\" class=\"btn btn-success ml-2 btn-sm\" @click=\"editRowAt(data)\" :disabled=\"data.action === 'edit'\"><i class=\"icon-note \"></i><span class=\"ml-1\">Edit</span></button>\r\n              <button v-if=\"getPermissions.module_enabled && getPermissions.permissions.sedelete\" class=\"btn btn-danger ml-2 btn-sm\" @click=\"deleteContactData = data\" v-b-modal.delete-confirm><i class=\"icon-close \"></i><span class=\"ml-1\">Delete</span></button>\r\n             </td>\r\n          </tr>\r\n        </tbody>\r\n        <tbody v-else>\r\n          <tr>\r\n            <td colspan=\"4\" class=\"text-center\">\r\n              No contacts\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <b-modal id=\"delete-confirm\" variant=\"danger\" centered title=\"Please confirm\">\r\n        <p>Are you sure you want to delete this contact?</p>\r\n        <template v-slot:modal-footer>\r\n          <b-button variant=\"warning\" @click=\"removeRowAt(deleteContactData)\">\r\n            <i class=\"icon-check\"></i> Yes, I understand &amp; confirm!\r\n          </b-button>\r\n          <b-button variant @click=\"$bvModal.hide('delete-confirm')\">\r\n            <i class=\"icon-close\"></i> No\r\n          </b-button>\r\n        </template>\r\n      </b-modal>\r\n    </b-card>\r\n  </div>\r\n</template>\r\n<script>\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required, email } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport _nav from '@/_nav'\r\n\r\nexport default {\r\n  name: 'MWSellerEnforcementContacts',\r\n  data() {\r\n    return {\r\n      contacts: [],\r\n      canShowErr: false,\r\n      fields: [\r\n        {\r\n          key: 'email',\r\n          label: 'Email Address',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'contact_name',\r\n          label: 'Contact Name',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'job_title',\r\n          label: 'Job Title',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'actions',\r\n          label: '',\r\n          class: 'text-right'\r\n        }\r\n      ],\r\n      nav: _nav,\r\n      deleteContactData: null,\r\n      originalContacts: []\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  methods: {\r\n    ...mapActions({\r\n      getOneSeller: `mw/sellerEnforcements/${TYPE.GET_ONE_SELLER_ENFORCEMENT}`,\r\n      remoteEditSeller: `mw/sellerEnforcements/${TYPE.REMOTE_EDIT_SELLER_ENFORCEMENT}`\r\n    }),\r\n    removeRowAt(contact) {\r\n      this.contacts = _.filter(this.contacts, function(o) { return o.index !== contact.index })\r\n      this.$bvModal.hide('delete-confirm')\r\n    },\r\n    editRowAt(contact) {\r\n      const updatedContact = this.contacts[contact.index]\r\n      updatedContact.action = 'edit'\r\n      this.$set(this.contacts, contact.index, updatedContact)\r\n    },\r\n    addNewRow() {\r\n      this.contacts.push({\r\n        email: '',\r\n        contact_name: '',\r\n        job_title: '',\r\n        action: 'edit',\r\n        index: this.contacts.length\r\n      })\r\n      this.canShowErr = false\r\n    },\r\n    async saveContacts() {\r\n      this.canShowErr = true\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        return\r\n      }\r\n      try {\r\n        const dataSet = _.map(this.contacts, (contact) => {\r\n          return {\r\n            email: contact.email,\r\n            contact_name: contact.contact_name,\r\n            job_title: contact.job_title\r\n          }\r\n        })\r\n        await this.remoteEditSeller({ params: { contacts: dataSet }, id: this.seller.id })\r\n        this.vToasted('success', `Seller ${this.seller.name} has been updated successfully.`)\r\n        this.contacts = _.map(this.contacts, (contact) => {\r\n          contact.action = 'done'\r\n          return contact\r\n        })\r\n        this.originalContacts = _.cloneDeep(this.contacts)\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n      this.canShowErr = false\r\n    },\r\n    backToListSeller() {\r\n      this.$router.push({ name: 'MWListSellerEnforcements', params: { client_id: this.nav.clientId } })\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`\r\n    }),\r\n    isContactChanged() {\r\n      let checkContacts = _.differenceWith(this.contacts, this.originalContacts, _.isEqual)\r\n      let checkOriginContacts = _.differenceWith(this.originalContacts, this.contacts, _.isEqual)\r\n      return _.isEmpty(checkContacts) && _.isEmpty(checkOriginContacts)\r\n    }\r\n  },\r\n  async created() {\r\n    if (!this.$route.params.id) {\r\n      this.backToListSeller()\r\n      return\r\n    }\r\n    try {\r\n      const seller = await this.getOneSeller(this.$route.params.id)\r\n      this.contacts = seller.contacts\r\n      this.originalContacts = _.cloneDeep(seller.contacts)\r\n      this.seller = seller\r\n      const _this = this\r\n      _.each(this.contacts, function(contact, i) {\r\n        _this.contacts[i].index = i\r\n        _this.contacts[i].action = 'done'\r\n      })\r\n    } catch (error) {\r\n      this.vToasted('error', `Seller ${this.$route.params.id} not exist`)\r\n      this.backToListSeller()\r\n    }\r\n  },\r\n  validations: {\r\n    contacts: {\r\n      $each: {\r\n        email: { required, email },\r\n        contact_name: { required },\r\n        job_title: { required },\r\n        action: { required }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n::v-deep .card-header-actions {\r\n  margin-right: 0;\r\n}\r\n::v-deep .form-control:focus {\r\n  box-shadow: none;\r\n  border-color: #e4e7ea;\r\n}\r\n::v-deep .tag-input {\r\n  border-top: 0px;\r\n  border-top-left-radius: 0px;\r\n  border-top-right-radius: 0px;\r\n}\r\n.textarea {\r\n  overflow-y: auto !important;\r\n}\r\n::v-deep .mw-vue-tags-custom .ti-input {\r\n  border-bottom-right-radius: 0px;\r\n  border-bottom-left-radius: 0px;\r\n  height: auto !important;\r\n}\r\n.component-label {\r\n  min-width: 55px;\r\n}\r\n.custom-datepicker-control {\r\n  &::v-deep {\r\n    button.btn {\r\n      width: 83px;\r\n    }\r\n    .vdp-datepicker {\r\n      width: calc(100% - 83px);\r\n      margin-right: 0 !important;\r\n    }\r\n  }\r\n}\r\n.custom-width {\r\n  width: 100%;\r\n  max-width: 70%;\r\n}\r\n.save-button {\r\n  margin-left: 22.5px;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/page/sellerEnforcements"}]}