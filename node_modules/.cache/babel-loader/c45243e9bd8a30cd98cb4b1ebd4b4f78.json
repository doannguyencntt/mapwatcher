{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\Edit.vue","mtime":1626264502287},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ClipboardUtil } from 'plat-sdk/dist/clipboard';\nimport { mapActions, mapGetters, mapMutations } from 'vuex';\nimport * as TYPE from '@/actionTypes.js';\nimport { required } from 'vuelidate/lib/validators';\nimport vToasted from '@/shared/notification';\nimport { isAsin, isUpcOrEan } from '@/shared/utils';\nimport { MapType } from '@/constants/Map';\nimport _nav from '@/_nav';\nimport _ from 'lodash';\nimport { FormType } from '@/constants/Form.js';\nexport default {\n  name: 'MWEditMaps',\n  data: function data() {\n    return {\n      MapType: MapType,\n      nav: _nav,\n      mapTypeList: [{\n        value: MapType.MAP,\n        text: 'MAP'\n      }, {\n        value: MapType.NON_MAP,\n        text: 'NON MAP'\n      }],\n      check: true\n    };\n  },\n  mixins: [vToasted],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    mapData: \"mw/maps/\".concat(TYPE.GET_ONE_MAP)\n  })), {}, {\n    sharableRoute: function sharableRoute() {\n      var routeRegrex = /\\/share\\//;\n      return routeRegrex.test(this.$route.path) ? 'Share' : '';\n    },\n    isCopySupport: function isCopySupport() {\n      return ClipboardUtil.isCopySupported();\n    }\n  }),\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapMutations({\n    setMapData: \"mw/maps/\".concat(TYPE.SET_ONE_MAP)\n  })), mapActions({\n    fetchMap: \"mw/maps/\".concat(TYPE.FETCH_ONE_MAP),\n    updateMap: \"mw/maps/\".concat(TYPE.UPDATE_MAP)\n  })), {}, {\n    backToListMaps: function backToListMaps() {\n      this.$router.push({\n        name: \"MW\".concat(this.sharableRoute, \"ListMaps\"),\n        params: {\n          client_id: this.nav.clientId\n        },\n        query: _objectSpread({}, this.$router.history.current.query)\n      });\n    },\n    getMapById: function () {\n      var _getMapById = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var id;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = this.$route.params.id;\n                _context.prev = 1;\n                _context.next = 4;\n                return this.fetchMap(id);\n\n              case 4:\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](1);\n                this.vToasted('error', _context.t0.message);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 6]]);\n      }));\n\n      function getMapById() {\n        return _getMapById.apply(this, arguments);\n      }\n\n      return getMapById;\n    }(),\n    handleEditMap: function () {\n      var _handleEditMap = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var id;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.$v.$touch();\n\n                if (!this.$v.$error) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                console.log('error');\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.prev = 4;\n                id = this.$route.params.id;\n                _context2.next = 8;\n                return this.updateMap({\n                  id: id,\n                  data: this.mapData\n                });\n\n              case 8:\n                this.vToasted('success', 'This MAP has been updated successfully.');\n                _context2.next = 15;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](4);\n                console.log(_context2.t0);\n                this.vToasted('error', _context2.t0.data.message);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 11]]);\n      }));\n\n      function handleEditMap() {\n        return _handleEditMap.apply(this, arguments);\n      }\n\n      return handleEditMap;\n    }(),\n    handleCopyRecord: function handleCopyRecord() {\n      ClipboardUtil.copy(_.cloneDeep(this.mapData), FormType.MAP);\n      this.vToasted('success', 'Copied to clipboard');\n      this.checkKey();\n    },\n    handlePasteRecord: function () {\n      var _handlePasteRecord = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var pasteData;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return ClipboardUtil.paste(_.cloneDeep(this.mapData), FormType.MAP);\n\n              case 3:\n                pasteData = _context3.sent;\n\n                if (pasteData) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                this.vToasted('error', 'You need to enable copy to clipboard');\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                this.setMapData(pasteData);\n                this.vToasted('success', 'Paste successfully');\n                _context3.next = 14;\n                break;\n\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](0);\n                this.vToasted('error', 'Your copy is not valid');\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 11]]);\n      }));\n\n      function handlePasteRecord() {\n        return _handlePasteRecord.apply(this, arguments);\n      }\n\n      return handlePasteRecord;\n    }(),\n    checkKey: function () {\n      var _checkKey = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var result;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return ClipboardUtil.check(FormType.MAP);\n\n              case 2:\n                result = _context4.sent;\n                this.check = !result;\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function checkKey() {\n        return _checkKey.apply(this, arguments);\n      }\n\n      return checkKey;\n    }()\n  }),\n  created: function created() {\n    this.getMapById();\n    this.checkKey();\n    window.addEventListener('focus', this.checkKey);\n  },\n  destroyed: function destroyed() {\n    window.removeEventListener('focus', this.checkKey);\n  },\n  validations: {\n    mapData: {\n      upc: {\n        isUpcOrEan: isUpcOrEan\n      },\n      isValidAsin: function isValidAsin(value) {\n        return this.mapData.type === MapType.MAP && isAsin(this.mapData.asin) || this.mapData.type === MapType.NON_MAP && !_.isEmpty(this.mapData.asin) && isAsin(this.mapData.asin) || _.isEmpty(this.mapData.asin);\n      },\n      sku: {\n        required: required\n      },\n      isValidPrice: function isValidPrice(value) {\n        var _this$mapData = this.mapData,\n            type = _this$mapData.type,\n            price = _this$mapData.price;\n\n        if (type === MapType.NON_MAP) {\n          return true;\n        }\n\n        return type === MapType.MAP && price;\n      }\n    }\n  }\n};",null]}