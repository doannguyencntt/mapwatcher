{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardIndex.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardIndex.vue","mtime":1628500746245},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _nav from '@/_nav';\nimport * as TYPE from '@/actionTypes.js';\nimport _ from 'lodash';\nimport { mapActions, mapGetters } from 'vuex';\nimport { allSellers, sellersTypeFields } from \"./configOptions\";\nimport HeaderComponent from \"./Header\";\nimport { ReportMarketplaces, MarketPlacesResult, AllSellerMode, DashboardFilterSourceType } from '@/constants/Report';\nimport { getMarketplaceLabelByType } from '@/shared/utils';\nexport default {\n  name: 'MWDashboardIndex',\n  components: {\n    HeaderComponent: HeaderComponent\n  },\n  data: function data() {\n    return {\n      MarketPlacesResult: MarketPlacesResult,\n      ReportMarketplaces: ReportMarketplaces,\n      AllSellerMode: AllSellerMode,\n      DashboardFilterSourceType: DashboardFilterSourceType,\n      sourceAllSellerOptions: [{\n        value: DashboardFilterSourceType.VIOLATIONS,\n        text: 'Violations'\n      }, {\n        value: DashboardFilterSourceType.ALL_SELLERS,\n        text: 'All Items'\n      }],\n      sourceAuthorizedOnlyOptions: [{\n        value: DashboardFilterSourceType.VIOLATIONS,\n        text: 'Violations'\n      }, {\n        value: DashboardFilterSourceType.ALL_SELLERS,\n        text: 'All Authorized Items'\n      }],\n      sourceRogueOnlyOptions: [{\n        value: DashboardFilterSourceType.VIOLATIONS,\n        text: 'Violations'\n      }, {\n        value: DashboardFilterSourceType.ALL_SELLERS,\n        text: 'All Rogue Items'\n      }],\n      queryOptions: {\n        active: true\n      },\n      settings: {\n        show_dashboard: true\n      },\n      routeDashboardMain: 'MWDashboardMain',\n      routeDashboardHistorical: 'MWDashboardHistorical',\n      selected: {\n        brand: null,\n        marketplace: null,\n        marketplace_string_prefix: 'marketplace_',\n        seller_type: null,\n        fulfillment: '',\n        share_token: null,\n        source: DashboardFilterSourceType.VIOLATIONS,\n        options: {\n          marketplaces: [],\n          seller_type: [],\n          fulfillment: [{\n            label: 'All',\n            value: ''\n          }, {\n            label: 'FBA',\n            value: 'FBA'\n          }, {\n            label: 'MFN',\n            value: 'MFN'\n          }]\n        }\n      },\n      nav: _nav,\n      isLoading: true\n    };\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    fetchBrands: \"mw/dashboard/\".concat(TYPE.FETCH_LIST_BRANDS),\n    mainConfig: \"mw/dashboard/\".concat(TYPE.GET_DATA_CONFIG_VIOLATOR),\n    remoteFetchSetting: \"mw/settings/\".concat(TYPE.FETCH_SETTING)\n  })), {}, {\n    keepShareTokenForQuery: function keepShareTokenForQuery() {\n      var query = {\n        brand: this.selected.brand.name_in_dashboard,\n        marketplace: this.selected.marketplace,\n        seller_type: this.selected.seller_type,\n        fulfillment: this.selected.fulfillment,\n        source: this.selected.source\n      };\n\n      if (this.selected.share_token) {\n        _.assign(query, {\n          share_token: this.selected.share_token\n        });\n      }\n\n      return query;\n    },\n    hanldeChangeBrandName: function hanldeChangeBrandName() {\n      var val = this.selected.marketplace;\n      this.selected.options.seller_type = [];\n\n      if (val === ReportMarketplaces.google_shopping) {\n        this.selected.seller_type = allSellers.value;\n        this.selected.options.seller_type.push(allSellers);\n      } else if (_.includes(_.values(MarketPlacesResult), val.replace(/[_]/g, '.'))) {\n        if (!this.selected.brand.separate_mfn_fba_authorized_seller && this.selected.brand.list_authorized_seller_names.length === 0 || this.selected.brand.separate_mfn_fba_authorized_seller && this.selected.brand.mfn_authorized_seller_names.length === 0 && this.selected.brand.fba_authorized_seller_names.length === 0) {\n          this.selected.seller_type = allSellers.value;\n          this.selected.options.seller_type.push(allSellers);\n        } else {\n          this.selected.options.seller_type = _.cloneDeep(sellersTypeFields);\n\n          if (this.selected.options.seller_type.length) {\n            this.selected.seller_type = this.selected.options.seller_type[0].value;\n          }\n        }\n      }\n\n      var query = this.keepShareTokenForQuery();\n      this.$router.push({\n        params: {\n          client_id: this.nav.clientId\n        },\n        query: query\n      });\n    },\n    handleChangeSource: function handleChangeSource() {\n      var query = this.keepShareTokenForQuery();\n      this.$router.push({\n        params: {\n          client_id: this.nav.clientId\n        },\n        query: query\n      });\n    },\n    handleChangeSellerType: function handleChangeSellerType() {\n      var query = this.keepShareTokenForQuery();\n      this.$router.push({\n        params: {\n          client_id: this.nav.clientId\n        },\n        query: query\n      });\n    },\n    needToHideSourceTypeFilter: function needToHideSourceTypeFilter() {\n      var allSellerMode = this.getMarketplaceInfoDoc(this.selected.brand, this.selected.marketplace).all_seller_mode || AllSellerMode.NONE;\n\n      if (allSellerMode === AllSellerMode.NONE) {\n        this.selected.source = DashboardFilterSourceType.VIOLATIONS;\n        return true;\n      }\n\n      return false;\n    },\n    getMarketplaceInfoDoc: function getMarketplaceInfoDoc(report, marketplace) {\n      return report[\"\".concat(this.getMarketplaceInfoKey(marketplace))];\n    },\n    getMarketplaceInfoKey: function getMarketplaceInfoKey(marketplace) {\n      marketplace = this.convertMarketplaceEnumToMarketplaceStringInfo(marketplace);\n      return \"\".concat(this.selected.marketplace_string_prefix).concat(marketplace);\n    },\n    convertMarketplaceEnumToMarketplaceStringInfo: function convertMarketplaceEnumToMarketplaceStringInfo(marketplace) {\n      if (_.includes(marketplace, 'amazon')) {\n        return marketplace.replace(/[.]/g, '_');\n      }\n\n      return marketplace;\n    },\n    getCurrentSourceOption: function getCurrentSourceOption() {\n      var allSellerMode = this.getMarketplaceInfoDoc(this.selected.brand, this.selected.marketplace).all_seller_mode || AllSellerMode.NONE;\n\n      switch (allSellerMode) {\n        case AllSellerMode.AUTHORIZED_ONLY:\n          return this.sourceAuthorizedOnlyOptions;\n\n        case AllSellerMode.ROGUE_ONLY:\n          return this.sourceRogueOnlyOptions;\n\n        case AllSellerMode.NONE:\n        case AllSellerMode.BOTH:\n          return this.sourceAllSellerOptions;\n      }\n    },\n    fetchSettings: function () {\n      var _fetchSettings = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var existShareToken, id, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                existShareToken = _.has(this.$route.query, 'token');\n\n                if (existShareToken) {\n                  _context.next = 14;\n                  break;\n                }\n\n                id = this.$route.params.id;\n                _context.prev = 3;\n                _context.next = 6;\n                return this.remoteFetchSetting({\n                  id: id\n                });\n\n              case 6:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result.show_dashboard);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                console.log(_context.t0.data.message);\n                return _context.abrupt(\"return\", false);\n\n              case 14:\n                return _context.abrupt(\"return\", true);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n\n      function fetchSettings() {\n        return _fetchSettings.apply(this, arguments);\n      }\n\n      return fetchSettings;\n    }()\n  }),\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    brands: \"mw/dashboard/\".concat(TYPE.GET_LIST_BRANDS)\n  })), {}, {\n    filterBrands: function filterBrands() {\n      return this.brands;\n    },\n    queryParams: function queryParams() {\n      return this.$route.query || {};\n    },\n    sharableRoute: function sharableRoute() {\n      var routeRegrex = /\\/share\\//;\n      return routeRegrex.test(this.$route.path) ? 'Share' : '';\n    }\n  }),\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var _this = this;\n\n      var existShareToken, params, shareToken;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              existShareToken = _.has(this.$route.query, 'share_token');\n              params = {\n                active_only: this.queryOptions.active,\n                limit: 99,\n                // must keep this order\n                sort_by: 'order',\n                sort_dir: 'asc'\n              };\n              this.selected.source = DashboardFilterSourceType.VIOLATIONS;\n              this.settings.show_dashboard = true;\n\n              if (!existShareToken) {\n                _context2.next = 12;\n                break;\n              }\n\n              this.routeDashboardHistorical = 'MWShareDashboardHistorical';\n              this.routeDashboardMain = 'MWShareDashboardMain';\n              shareToken = this.$route.query.share_token;\n\n              _.assign(params, {\n                share_token: shareToken\n              });\n\n              this.selected.share_token = shareToken;\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.next = 14;\n              return this.fetchSettings();\n\n            case 14:\n              this.settings.show_dashboard = _context2.sent;\n\n            case 15:\n              if (this.settings.show_dashboard) {\n                this.fetchBrands(params).then(function (res) {\n                  _this.isLoading = false;\n                }).catch(function (res) {\n                  _this.isLoading = false;\n                });\n              }\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  syncedReportName: function () {\n    var _syncedReportName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this.hanldeChangeBrandName();\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function syncedReportName() {\n      return _syncedReportName.apply(this, arguments);\n    }\n\n    return syncedReportName;\n  }(),\n  watch: {\n    filterBrands: function filterBrands(val) {\n      if (val.items.length) {\n        this.selected.brand = val.items[0];\n\n        var existBrandName = _.has(this.$route.query, 'brand');\n\n        if (existBrandName) {\n          var brandName = this.$route.query.brand;\n\n          var index = _.findIndex(val.items, function (value) {\n            return brandName.toLowerCase() === value.name_in_dashboard.toLowerCase();\n          });\n\n          if (index > 0) {\n            this.selected.brand = val.items[index];\n          }\n        }\n      }\n    },\n    'selected.brand': function selectedBrand(val) {\n      var _this2 = this;\n\n      this.selected.marketplace = null;\n      this.selected.options.marketplace = [];\n      this.selected.seller_type = null;\n      this.selected.options.seller_type = [];\n\n      _.forEach(val.marketplaces, function (v, k) {\n        if (v) {\n          _this2.selected.options.marketplace.push({\n            label: getMarketplaceLabelByType(k),\n            value: k\n          });\n        }\n      });\n\n      if (!_.isEmpty(this.selected.options.marketplace)) {\n        var existMarketplace = _.has(this.$route.query, 'marketplace');\n\n        if (existMarketplace && _.find(this.selected.options.marketplace, {\n          value: this.$route.query.marketplace\n        })) {\n          this.selected.marketplace = this.$route.query.marketplace;\n        } else {\n          this.selected.marketplace = this.selected.options.marketplace[0].value;\n        }\n\n        this.hanldeChangeBrandName();\n      }\n\n      var query = this.keepShareTokenForQuery();\n      this.$router.push({\n        params: {\n          client_id: this.nav.clientId\n        },\n        query: query\n      });\n    },\n    'selected.marketplace': function selectedMarketplace(val) {\n      this.hanldeChangeBrandName();\n    },\n    'selected.seller_type': function selectedSeller_type(val) {\n      this.handleChangeSellerType();\n    },\n    'selected.fulfillment': function selectedFulfillment(val) {\n      this.handleChangeSellerType();\n    },\n    'selected.source': function selectedSource(val) {\n      this.handleChangeSource();\n    }\n  }\n};",null]}