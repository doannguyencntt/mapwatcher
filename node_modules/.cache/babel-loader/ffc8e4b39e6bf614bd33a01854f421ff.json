{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\index.js","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\index.js","mtime":1626264502240},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1626076679949}],"contextDependencies":[],"result":["import _toConsumableArray from \"C:/Project/CBPO/plat-mw-web/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.promise\";\nimport modulesStore from '@/store/modules';\nimport { routerRender } from '@/router/routes.js';\nimport routes from '@/router/_routerConfig';\nimport nav from '@/_nav';\nimport '@/assets/scss/style.scss';\nimport { MW_API } from '@/service'; // import isFunction from 'lodash/isFunction'\n\nimport mwFirebaseSvc from '@/service/firebaseSvc';\nimport get from 'lodash/get';\nimport MWSidebarNav from \"../containers/MWSidebarNav\";\nimport isObject from 'lodash/isObject';\nimport { GET_GLOBAL_TOAST_INFO, SAVE_GLOBAL_TOAST_INFO, SAVE_ERROR_NETWORK_TOAST_INFO } from '@/service/_constant';\nvar DUMMY_TOKEN = process.env.VUE_APP_MW_DEV_ACCESS_TOKEN;\nvar Components = {};\nvar plugins = {\n  install: function install(Vue) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!options.store || !options.layout || !options.router || !options.nav || !options.MW_API_CONFIG || !options.PS_API_CONFIG) {\n      console.log('Please check params again!');\n    } // request override base URL\n\n\n    if (options.MW_API_CONFIG.baseUrl) {\n      MW_API.defaults.baseURL = options.MW_API_CONFIG.baseUrl;\n    }\n\n    if (options.PS_API_CONFIG.baseUrl) {\n      window.baseUrlTrackDownload = options.PS_API_CONFIG.baseUrl;\n    } // axios\n\n\n    var setCount = function setCount(type, loadingType) {\n      var loading = loadingType || 'progress';\n      options.store.dispatch(\"ps/loadingModule/SET_COUNT\", {\n        type: type,\n        loading: loading\n      });\n    };\n\n    MW_API.interceptors.request.use(function (config) {\n      var token = localStorage.getItem('ps_access_token') || DUMMY_TOKEN;\n\n      if (token) {\n        config.headers.Authorization = 'Bearer ' + token;\n      } // loading\n\n\n      if (options.store && !get(config, 'ignoreLoading')) {\n        setCount('increment', get(config, 'loading'));\n      }\n\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    }); // response\n\n    MW_API.interceptors.response.use(function (response) {\n      // loading\n      if (options.store && !get(response, 'config.ignoreLoading')) {\n        setCount('decrease', get(response, 'config.loading'));\n      }\n\n      return response;\n    }, function (error) {\n      // const originalRequest = error.config\n      // check loading\n      if (options.store && !get(error, 'config.ignoreLoading')) {\n        setCount('decrease', get(error, 'config.loading'));\n      } // 401 status\n\n\n      if (get(error, 'response.status') === 401) {\n        Vue.prototype.$bus.$emit('relogin', get(options, 'router.currentRoute.path', ''));\n        return Promise.reject(error);\n      } // if (get(error, 'response.status') === 401) {\n      //   if (options.retryOn401 && isFunction(options.retryOn401)) {\n      //     return options.retryOn401().then((token) => {\n      //       originalRequest.headers['Authorization'] = `Bearer ${token}`\n      //       originalRequest._retry = true\n      //       return MW_API(originalRequest)\n      //     })\n      //   } else {\n      //     console.log('retryOn401 is not a function')\n      //   }\n      // }\n      // 500 status\n\n\n      if (get(error, 'response.status') >= 500 && options.router && !get(error, 'config.params.ignore500Error')) {\n        var globalToastFor500Error = 'error500';\n        var globalToastInfo = options.store.getters[\"ps/globalToast/\".concat(GET_GLOBAL_TOAST_INFO)] || [];\n\n        if (!globalToastInfo.includes(globalToastFor500Error)) {\n          Vue.toasted.global.error500();\n          options.store.dispatch(\"ps/globalToast/\".concat(SAVE_GLOBAL_TOAST_INFO), globalToastFor500Error);\n        }\n\n        return;\n      } // Network error\n\n\n      if (get(error, 'message') === 'Network Error') {\n        var globalToastForNetworkError = 'errorNetwork';\n\n        var _globalToastInfo = options.store.getters[\"ps/globalToast/\".concat(GET_GLOBAL_TOAST_INFO)] || [];\n\n        if (!_globalToastInfo.includes(globalToastForNetworkError)) {\n          options.store.dispatch(\"ps/globalToast/\".concat(SAVE_GLOBAL_TOAST_INFO), globalToastForNetworkError);\n          options.store.dispatch(\"ps/globalToast/\".concat(SAVE_ERROR_NETWORK_TOAST_INFO), Vue.toasted.global.errorNetwork());\n        }\n\n        return;\n      } // return Error object with Promise\n\n\n      return Promise.reject(error);\n    });\n    routerRender.forEach(function (route) {\n      Components[route.name] = route.component;\n    });\n    Object.keys(Components).forEach(function (name) {\n      Vue.component(name, Components[name]);\n    });\n    Object.keys(modulesStore).map(function (name) {\n      options.store.registerModule(name, modulesStore[name]);\n    }); // use DefaultContainer in Portal\n\n    routes[0].component = options.layout;\n\n    if (routes && routes.length) {\n      var updateRoutes = _toConsumableArray(routes);\n\n      updateRoutes = updateRoutes.map(function (rs) {\n        return updateTitleInRoutes(rs);\n      });\n\n      if (options.router) {\n        options.router.addRoutes(updateRoutes);\n      }\n    }\n\n    if (options.nav) {\n      options.nav.items = nav.items;\n    } // set up firebase\n\n\n    if (options.mwFirebaseConfig) {\n      mwFirebaseSvc.setFirebase = options.mwFirebaseConfig;\n    } // update _nav\n\n\n    if (options.nav) {\n      var currentClient = options.store.getters['ps/userModule/GET_CURRENT_CLIENT'] || '';\n\n      if (currentClient && currentClient.id) {\n        nav.setItem = currentClient.id;\n      } // options.nav.mw = nav\n      // nav.addItems = options.nav.ps.items || []\n\n\n      if (isObject(options.customSidebar)) {\n        options.customSidebar.mw = MWSidebarNav;\n      } // update client_id to store\n\n\n      Vue.prototype.$bus.$on('ps_set_current_client_id', function (clientID) {\n        nav.setItem = clientID;\n      });\n    } // listen relogin events\n\n\n    Vue.prototype.$bus.$on('relogin', function () {\n      console.log('reset data in MW_____________________'); // off firebase\n\n      options.store.dispatch('mw/brands/resetFirebase'); // reset state\n\n      options.store.dispatch('mw/resetState'); // Vue.prototype.$bus.$off('relogin')\n    });\n  }\n};\n\nfunction updateTitleInRoutes(routes) {\n  if (!routes.children || routes.children && !routes.children.length) return routes;\n  routes.children.forEach(function (r) {\n    if (r.meta && r.meta.title) {\n      r.meta.title = r.meta.title + ' - MW - Channel Precision';\n    }\n\n    r = updateTitleInRoutes(r);\n  });\n  return routes;\n}\n\nexport default plugins;",null]}