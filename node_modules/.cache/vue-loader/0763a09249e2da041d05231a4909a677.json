{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\Edit.vue","mtime":1639628727982},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapActions, mapGetters, mapMutations } from 'vuex'\r\nimport { ClipboardUtil } from 'plat-sdk/dist/clipboard'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport { isUpcOrEan, isAsinAndNotEmpty } from '@/shared/utils'\r\nimport _nav from '@/_nav'\r\nimport _ from 'lodash'\r\nimport { FormType } from '@/constants/Form.js'\r\n\r\nexport default {\r\n  name: 'MWEditGSMaps',\r\n  data() {\r\n    return {\r\n      nav: _nav,\r\n      check: true,\r\n      isLoading: false\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      mapData: `mw/maps/${TYPE.GET_ONE_GS_MAP}`,\r\n      defaultParams: `mw/maps/${TYPE.GET_DEFAULT_PARAMS}`,\r\n      listGSReports: `mw/reports/${TYPE.GET_GS_LIST_REPORTS}`\r\n    }),\r\n    isCopySupport() {\r\n      return ClipboardUtil.isCopySupported()\r\n    },\r\n    reportOptions() {\r\n      return this.listGSReports.map((item) => ({\r\n        value: item._id,\r\n        text: item.name_in_dashboard\r\n      }))\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations({\r\n      setMapData: `mw/maps/${TYPE.SET_ONE_GS_MAP}`\r\n    }),\r\n    ...mapActions({\r\n      fetchMap: `mw/maps/${TYPE.FETCH_ONE_GS_MAP}`,\r\n      updateMap: `mw/maps/${TYPE.UPDATE_GS_MAP}`,\r\n      fetchListReports: `mw/reports/${TYPE.FETCH_IMPORT_REPORTS}`\r\n    }),\r\n    backToListMaps() {\r\n      this.$router.push({\r\n        name: 'MWGSListMaps',\r\n        params: { client_id: this.nav.clientId },\r\n        query: { ...this.$router.history.current.query }\r\n      })\r\n    },\r\n    async getMapById() {\r\n      this.isLoading = true\r\n      const {\r\n        params: { id }\r\n      } = this.$route\r\n      try {\r\n        await this.fetchMap(id)\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n      this.isLoading = false\r\n    },\r\n    asinNotEmpty() {\r\n      if (!this.mapData || !this.mapData.asin) {\r\n        return false\r\n      }\r\n      return this.mapData.asin.length > 0\r\n    },\r\n    async handleEditMap() {\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log('error')\r\n        return\r\n      }\r\n      this.isLoading = true\r\n      try {\r\n        const { id } = this.$route.params\r\n        await this.updateMap({ id, data: this.mapData })\r\n        this.vToasted('success', 'This MAP has been updated successfully.')\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n      this.isLoading = false\r\n    },\r\n\r\n    handleCopyRecord() {\r\n      ClipboardUtil.copy(_.cloneDeep(this.mapData), FormType.MAP_GS)\r\n      this.vToasted('success', 'Copied to clipboard.')\r\n      this.checkKey()\r\n    },\r\n\r\n    async handlePasteRecord() {\r\n      try {\r\n        const pasteData = await ClipboardUtil.paste(\r\n          _.cloneDeep(this.mapData),\r\n          FormType.MAP_GS\r\n        )\r\n        if (!pasteData) {\r\n          this.vToasted('error', 'You need to enable copy to clipboard')\r\n          return\r\n        }\r\n        this.setMapData(pasteData)\r\n        this.vToasted('success', 'Paste successfully')\r\n      } catch (e) {\r\n        this.vToasted('error', 'You copy is not valid')\r\n      }\r\n    },\r\n\r\n    async checkKey() {\r\n      const result = await ClipboardUtil.check(FormType.MAP_GS)\r\n\r\n      this.check = !result\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.getMapById()\r\n    this.checkKey()\r\n    window.addEventListener('focus', this.checkKey)\r\n    this.fetchListReports()\r\n  },\r\n\r\n  destroyed() {\r\n    window.removeEventListener('focus', this.checkKey)\r\n  },\r\n\r\n  validations: {\r\n    mapData: {\r\n      upc: {\r\n        isUpcOrEan: isUpcOrEan\r\n      },\r\n      asin: {\r\n        isAsinAndNotEmpty\r\n      },\r\n      sku: {\r\n        required\r\n      },\r\n      price: {\r\n        required\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Edit.vue","sourceRoot":"src/components/page/gs-maps","sourcesContent":["<template>\r\n  <div class=\"animated fadeIn\">\r\n    <b-row>\r\n      <b-col md=\"6\" lg=\"6\" sm=\"12\">\r\n        <b-card footer-tag=\"footer\">\r\n          <template v-slot:header>\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n              <div class=\"d-flex align-items-center\">\r\n                <p class=\"mx-0 my-0\"><strong>EDIT MAP</strong></p>\r\n                <div class=\"card-header-actions ml-2\">\r\n                  <b-button\r\n                    size=\"sm\"\r\n                    class=\"mr-1\"\r\n                    :disabled=\"check\"\r\n                    variant=\"success\"\r\n                    @click=\"handlePasteRecord\"\r\n                  >\r\n                    Paste\r\n                  </b-button>\r\n                  <b-button\r\n                    size=\"sm\"\r\n                    class=\"ml-2\"\r\n                    :disabled=\"!isCopySupport\"\r\n                    variant=\"secondary\"\r\n                    @click=\"handleCopyRecord\"\r\n                  >\r\n                    Copy\r\n                  </b-button>\r\n                </div>\r\n              </div>\r\n              <div class=\"card-header-actions\">\r\n                <div class=\"btn-close\">\r\n                  <b-button\r\n                    variant=\"secondary\"\r\n                    class=\"btn btn-block\"\r\n                    size=\"sm\"\r\n                    @click=\"backToListMaps()\"\r\n                  >\r\n                    <i class=\"icon-arrow-left-circle icons\"></i> Back\r\n                  </b-button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </template>\r\n          <b-form>\r\n            <b-form-group>\r\n              <label>\r\n                <b>Report</b>\r\n              </label>\r\n              <b-form-select\r\n                v-model=\"mapData.report_id\"\r\n                :options=\"reportOptions\"\r\n              >\r\n                <template v-slot:first>\r\n                  <option :value=\"null\" disabled>All Reports</option>\r\n                </template>\r\n              </b-form-select>\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>Brand Name</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                v-model.trim=\"mapData.brand_name\"\r\n              />\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>SKU</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                @input=\"$v.mapData.sku.$touch()\"\r\n                :class=\"{\r\n                  'is-invalid': $v.mapData.sku.$dirty && $v.mapData.sku.$error\r\n                }\"\r\n                v-model.trim=\"mapData.sku\"\r\n              ></b-form-input>\r\n              <div\r\n                class=\"mw-error invalid-feedback\"\r\n                v-if=\"!$v.mapData.sku.required && $v.mapData.sku.$dirty\"\r\n              >\r\n                SKU is required.\r\n              </div>\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>ASIN</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                @input=\"$v.mapData.asin.$touch()\"\r\n                :class=\"{\r\n                  'is-invalid':\r\n                    asinNotEmpty() &&\r\n                    $v.mapData.asin.$dirty &&\r\n                    $v.mapData.asin.$error\r\n                }\"\r\n                v-model.trim=\"mapData.asin\"\r\n              ></b-form-input>\r\n              <div\r\n                class=\"mw-error invalid-feedback\"\r\n                v-if=\"\r\n                  asinNotEmpty() &&\r\n                  !$v.mapData.asin.isAsinAndNotEmpty &&\r\n                  $v.mapData.asin.$dirty\r\n                \"\r\n              >\r\n                ASIN is invalid.\r\n              </div>\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>Amazon Title</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                v-model.trim=\"mapData.amazon_title\"\r\n              />\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>UPC/EAN</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                @input=\"$v.mapData.upc.$touch()\"\r\n                :class=\"{\r\n                  'is-invalid':\r\n                    $v.mapData.upc.$dirty && !$v.mapData.upc.isUpcOrEan\r\n                }\"\r\n                v-model.trim=\"mapData.upc\"\r\n              ></b-form-input>\r\n              <div\r\n                class=\"mw-error invalid-feedback\"\r\n                v-if=\"!$v.mapData.upc.isUpcOrEan && $v.mapData.upc.$dirty\"\r\n              >\r\n                UPC/EAN is invalid.\r\n              </div>\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>Price</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"number\"\r\n                @input=\"$v.mapData.price.$touch()\"\r\n                :class=\"{\r\n                  'is-invalid':\r\n                    $v.mapData.price.$dirty && $v.mapData.price.$error\r\n                }\"\r\n                v-model.trim=\"mapData.price\"\r\n              ></b-form-input>\r\n              <div\r\n                class=\"mw-error invalid-feedback\"\r\n                v-if=\"!$v.mapData.price.required && $v.mapData.price.$dirty\"\r\n              >\r\n                Price is required.\r\n              </div>\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>GPID</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                v-model.trim=\"mapData.gpid\"\r\n              ></b-form-input>\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>Size</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                v-model.trim=\"mapData.size\"\r\n              />\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>Color</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                v-model.trim=\"mapData.color\"\r\n              />\r\n            </b-form-group>\r\n            <b-form-group>\r\n              <label>\r\n                <b>Gender</b>\r\n              </label>\r\n              <b-form-input\r\n                type=\"text\"\r\n                v-model.trim=\"mapData.gender\"\r\n              />\r\n            </b-form-group>\r\n          </b-form>\r\n          <template v-slot:footer>\r\n            <div class=\"d-flex justify-content-between\">\r\n              <div class=\"footer__btns\">\r\n                <b-button\r\n                  class=\"mr-1\"\r\n                  variant=\"primary\"\r\n                  size=\"sm\"\r\n                  @click=\"handleEditMap\"\r\n                  :disabled=\"isLoading\"\r\n                >\r\n                  <i class=\"fa fa-dot-circle-o\"></i> Update\r\n                </b-button>\r\n                <b-button size=\"sm\" class=\"ml-2\" @click=\"backToListMaps()\">\r\n                  <i class=\"icon-arrow-left-circle\"></i> Cancel\r\n                </b-button>\r\n              </div>\r\n            </div>\r\n          </template>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapActions, mapGetters, mapMutations } from 'vuex'\r\nimport { ClipboardUtil } from 'plat-sdk/dist/clipboard'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport { isUpcOrEan, isAsinAndNotEmpty } from '@/shared/utils'\r\nimport _nav from '@/_nav'\r\nimport _ from 'lodash'\r\nimport { FormType } from '@/constants/Form.js'\r\n\r\nexport default {\r\n  name: 'MWEditGSMaps',\r\n  data() {\r\n    return {\r\n      nav: _nav,\r\n      check: true,\r\n      isLoading: false\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      mapData: `mw/maps/${TYPE.GET_ONE_GS_MAP}`,\r\n      defaultParams: `mw/maps/${TYPE.GET_DEFAULT_PARAMS}`,\r\n      listGSReports: `mw/reports/${TYPE.GET_GS_LIST_REPORTS}`\r\n    }),\r\n    isCopySupport() {\r\n      return ClipboardUtil.isCopySupported()\r\n    },\r\n    reportOptions() {\r\n      return this.listGSReports.map((item) => ({\r\n        value: item._id,\r\n        text: item.name_in_dashboard\r\n      }))\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations({\r\n      setMapData: `mw/maps/${TYPE.SET_ONE_GS_MAP}`\r\n    }),\r\n    ...mapActions({\r\n      fetchMap: `mw/maps/${TYPE.FETCH_ONE_GS_MAP}`,\r\n      updateMap: `mw/maps/${TYPE.UPDATE_GS_MAP}`,\r\n      fetchListReports: `mw/reports/${TYPE.FETCH_IMPORT_REPORTS}`\r\n    }),\r\n    backToListMaps() {\r\n      this.$router.push({\r\n        name: 'MWGSListMaps',\r\n        params: { client_id: this.nav.clientId },\r\n        query: { ...this.$router.history.current.query }\r\n      })\r\n    },\r\n    async getMapById() {\r\n      this.isLoading = true\r\n      const {\r\n        params: { id }\r\n      } = this.$route\r\n      try {\r\n        await this.fetchMap(id)\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n      this.isLoading = false\r\n    },\r\n    asinNotEmpty() {\r\n      if (!this.mapData || !this.mapData.asin) {\r\n        return false\r\n      }\r\n      return this.mapData.asin.length > 0\r\n    },\r\n    async handleEditMap() {\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log('error')\r\n        return\r\n      }\r\n      this.isLoading = true\r\n      try {\r\n        const { id } = this.$route.params\r\n        await this.updateMap({ id, data: this.mapData })\r\n        this.vToasted('success', 'This MAP has been updated successfully.')\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n      this.isLoading = false\r\n    },\r\n\r\n    handleCopyRecord() {\r\n      ClipboardUtil.copy(_.cloneDeep(this.mapData), FormType.MAP_GS)\r\n      this.vToasted('success', 'Copied to clipboard.')\r\n      this.checkKey()\r\n    },\r\n\r\n    async handlePasteRecord() {\r\n      try {\r\n        const pasteData = await ClipboardUtil.paste(\r\n          _.cloneDeep(this.mapData),\r\n          FormType.MAP_GS\r\n        )\r\n        if (!pasteData) {\r\n          this.vToasted('error', 'You need to enable copy to clipboard')\r\n          return\r\n        }\r\n        this.setMapData(pasteData)\r\n        this.vToasted('success', 'Paste successfully')\r\n      } catch (e) {\r\n        this.vToasted('error', 'You copy is not valid')\r\n      }\r\n    },\r\n\r\n    async checkKey() {\r\n      const result = await ClipboardUtil.check(FormType.MAP_GS)\r\n\r\n      this.check = !result\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.getMapById()\r\n    this.checkKey()\r\n    window.addEventListener('focus', this.checkKey)\r\n    this.fetchListReports()\r\n  },\r\n\r\n  destroyed() {\r\n    window.removeEventListener('focus', this.checkKey)\r\n  },\r\n\r\n  validations: {\r\n    mapData: {\r\n      upc: {\r\n        isUpcOrEan: isUpcOrEan\r\n      },\r\n      asin: {\r\n        isAsinAndNotEmpty\r\n      },\r\n      sku: {\r\n        required\r\n      },\r\n      price: {\r\n        required\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}