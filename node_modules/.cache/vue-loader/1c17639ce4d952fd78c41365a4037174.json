{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardIndex.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardIndex.vue","mtime":1628500746245},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _nav from '@/_nav'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport { allSellers, sellersTypeFields } from './configOptions'\r\nimport HeaderComponent from './Header'\r\nimport { ReportMarketplaces, MarketPlacesResult, AllSellerMode, DashboardFilterSourceType } from '@/constants/Report'\r\nimport { getMarketplaceLabelByType } from '@/shared/utils'\r\nexport default {\r\n  name: 'MWDashboardIndex',\r\n  components: {\r\n    HeaderComponent\r\n  },\r\n  data: () => ({\r\n    MarketPlacesResult,\r\n    ReportMarketplaces,\r\n    AllSellerMode,\r\n    DashboardFilterSourceType,\r\n    sourceAllSellerOptions: [\r\n      { value: DashboardFilterSourceType.VIOLATIONS, text: 'Violations' },\r\n      { value: DashboardFilterSourceType.ALL_SELLERS, text: 'All Items' }\r\n    ],\r\n    sourceAuthorizedOnlyOptions: [\r\n      { value: DashboardFilterSourceType.VIOLATIONS, text: 'Violations' },\r\n      { value: DashboardFilterSourceType.ALL_SELLERS, text: 'All Authorized Items' }\r\n    ],\r\n    sourceRogueOnlyOptions: [\r\n      { value: DashboardFilterSourceType.VIOLATIONS, text: 'Violations' },\r\n      { value: DashboardFilterSourceType.ALL_SELLERS, text: 'All Rogue Items' }\r\n    ],\r\n    queryOptions: {\r\n      active: true\r\n    },\r\n    settings: {\r\n      show_dashboard: true\r\n    },\r\n    routeDashboardMain: 'MWDashboardMain',\r\n    routeDashboardHistorical: 'MWDashboardHistorical',\r\n    selected: {\r\n      brand: null,\r\n      marketplace: null,\r\n      marketplace_string_prefix: 'marketplace_',\r\n      seller_type: null,\r\n      fulfillment: '',\r\n      share_token: null,\r\n      source: DashboardFilterSourceType.VIOLATIONS,\r\n      options: {\r\n        marketplaces: [],\r\n        seller_type: [],\r\n        fulfillment: [\r\n          { label: 'All', value: '' },\r\n          { label: 'FBA', value: 'FBA' },\r\n          { label: 'MFN', value: 'MFN' }\r\n        ]\r\n      }\r\n    },\r\n    nav: _nav,\r\n    isLoading: true\r\n  }),\r\n  methods: {\r\n    ...mapActions({\r\n      fetchBrands: `mw/dashboard/${TYPE.FETCH_LIST_BRANDS}`,\r\n      mainConfig: `mw/dashboard/${TYPE.GET_DATA_CONFIG_VIOLATOR}`,\r\n      remoteFetchSetting: `mw/settings/${TYPE.FETCH_SETTING}`\r\n    }),\r\n    keepShareTokenForQuery() {\r\n      let query = {\r\n        brand: this.selected.brand.name_in_dashboard,\r\n        marketplace: this.selected.marketplace,\r\n        seller_type: this.selected.seller_type,\r\n        fulfillment: this.selected.fulfillment,\r\n        source: this.selected.source\r\n      }\r\n      if (this.selected.share_token) {\r\n        _.assign(query, { share_token: this.selected.share_token })\r\n      }\r\n      return query\r\n    },\r\n    hanldeChangeBrandName() {\r\n      const val = this.selected.marketplace\r\n      this.selected.options.seller_type = []\r\n      if (val === ReportMarketplaces.google_shopping) {\r\n        this.selected.seller_type = allSellers.value\r\n        this.selected.options.seller_type.push(allSellers)\r\n      } else if (_.includes(_.values(MarketPlacesResult), val.replace(/[_]/g, '.'))) {\r\n        if ((!this.selected.brand.separate_mfn_fba_authorized_seller && this.selected.brand.list_authorized_seller_names.length === 0) || (this.selected.brand.separate_mfn_fba_authorized_seller &&\r\n          this.selected.brand.mfn_authorized_seller_names.length === 0 &&\r\n          this.selected.brand.fba_authorized_seller_names.length === 0)) {\r\n          this.selected.seller_type = allSellers.value\r\n          this.selected.options.seller_type.push(allSellers)\r\n        } else {\r\n          this.selected.options.seller_type = _.cloneDeep(sellersTypeFields)\r\n          if (this.selected.options.seller_type.length) {\r\n            this.selected.seller_type = this.selected.options.seller_type[0].value\r\n          }\r\n        }\r\n      }\r\n      const query = this.keepShareTokenForQuery()\r\n\r\n      this.$router.push({\r\n        params: {\r\n          client_id: this.nav.clientId\r\n        },\r\n        query: query\r\n      })\r\n    },\r\n    handleChangeSource() {\r\n      const query = this.keepShareTokenForQuery()\r\n      this.$router.push({\r\n        params: {\r\n          client_id: this.nav.clientId\r\n        },\r\n        query: query\r\n      })\r\n    },\r\n    handleChangeSellerType() {\r\n      const query = this.keepShareTokenForQuery()\r\n\r\n      this.$router.push({\r\n        params: {\r\n          client_id: this.nav.clientId\r\n        },\r\n        query: query\r\n      })\r\n    },\r\n    needToHideSourceTypeFilter() {\r\n      const allSellerMode = this.getMarketplaceInfoDoc(this.selected.brand, this.selected.marketplace).all_seller_mode || AllSellerMode.NONE\r\n      if (allSellerMode === AllSellerMode.NONE) {\r\n        this.selected.source = DashboardFilterSourceType.VIOLATIONS\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n    getMarketplaceInfoDoc(report, marketplace) {\r\n      return report[`${this.getMarketplaceInfoKey(marketplace)}`]\r\n    },\r\n    getMarketplaceInfoKey(marketplace) {\r\n      marketplace = this.convertMarketplaceEnumToMarketplaceStringInfo(marketplace)\r\n      return `${this.selected.marketplace_string_prefix}${marketplace}`\r\n    },\r\n    convertMarketplaceEnumToMarketplaceStringInfo(marketplace) {\r\n      if (_.includes(marketplace, 'amazon')) {\r\n        return marketplace.replace(/[.]/g, '_')\r\n      }\r\n      return marketplace\r\n    },\r\n    getCurrentSourceOption() {\r\n      const allSellerMode = this.getMarketplaceInfoDoc(this.selected.brand, this.selected.marketplace).all_seller_mode || AllSellerMode.NONE\r\n      switch (allSellerMode) {\r\n        case AllSellerMode.AUTHORIZED_ONLY:\r\n          return this.sourceAuthorizedOnlyOptions\r\n        case AllSellerMode.ROGUE_ONLY:\r\n          return this.sourceRogueOnlyOptions\r\n        case AllSellerMode.NONE:\r\n        case AllSellerMode.BOTH:\r\n          return this.sourceAllSellerOptions\r\n      }\r\n    },\r\n    async fetchSettings() {\r\n      const existShareToken = _.has(this.$route.query, 'token')\r\n      if (!existShareToken) {\r\n        const { id } = this.$route.params\r\n        try {\r\n          const result = await this.remoteFetchSetting({ id })\r\n          return result.show_dashboard\r\n        } catch (error) {\r\n          console.log(error.data.message)\r\n          return false\r\n        }\r\n      }\r\n      return true\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      brands: `mw/dashboard/${TYPE.GET_LIST_BRANDS}`\r\n    }),\r\n    filterBrands() {\r\n      return this.brands\r\n    },\r\n    queryParams() {\r\n      return this.$route.query || {}\r\n    },\r\n    sharableRoute () {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    }\r\n  },\r\n  async created() {\r\n    const existShareToken = _.has(this.$route.query, 'share_token')\r\n    let params = {\r\n      active_only: this.queryOptions.active,\r\n      limit: 99,\r\n      // must keep this order\r\n      sort_by: 'order',\r\n      sort_dir: 'asc'\r\n    }\r\n    this.selected.source = DashboardFilterSourceType.VIOLATIONS\r\n    this.settings.show_dashboard = true\r\n    if (existShareToken) {\r\n      this.routeDashboardHistorical = 'MWShareDashboardHistorical'\r\n      this.routeDashboardMain = 'MWShareDashboardMain'\r\n      const shareToken = this.$route.query.share_token\r\n      _.assign(params, { share_token: shareToken })\r\n      this.selected.share_token = shareToken\r\n    } else {\r\n      this.settings.show_dashboard = await this.fetchSettings()\r\n    }\r\n    if (this.settings.show_dashboard) {\r\n      this.fetchBrands(params).then(res => {\r\n        this.isLoading = false\r\n      }).catch(res => {\r\n        this.isLoading = false\r\n      })\r\n    }\r\n  },\r\n  async syncedReportName() {\r\n    this.hanldeChangeBrandName()\r\n  },\r\n  watch: {\r\n    filterBrands(val) {\r\n      if (val.items.length) {\r\n        this.selected.brand = val.items[0]\r\n        const existBrandName = _.has(this.$route.query, 'brand')\r\n        if (existBrandName) {\r\n          const brandName = this.$route.query.brand\r\n          const index = _.findIndex(val.items, function(value) { return brandName.toLowerCase() === value.name_in_dashboard.toLowerCase() })\r\n          if (index > 0) {\r\n            this.selected.brand = val.items[index]\r\n          }\r\n        }\r\n      }\r\n    },\r\n    'selected.brand'(val) {\r\n      this.selected.marketplace = null\r\n      this.selected.options.marketplace = []\r\n      this.selected.seller_type = null\r\n      this.selected.options.seller_type = []\r\n      _.forEach(val.marketplaces, (v, k) => {\r\n        if (v) {\r\n          this.selected.options.marketplace.push({\r\n            label: getMarketplaceLabelByType(k),\r\n            value: k\r\n          })\r\n        }\r\n      })\r\n      if (!_.isEmpty(this.selected.options.marketplace)) {\r\n        const existMarketplace = _.has(this.$route.query, 'marketplace')\r\n        if (existMarketplace && _.find(this.selected.options.marketplace, { value: this.$route.query.marketplace })) {\r\n          this.selected.marketplace = this.$route.query.marketplace\r\n        } else {\r\n          this.selected.marketplace = this.selected.options.marketplace[0].value\r\n        }\r\n        this.hanldeChangeBrandName()\r\n      }\r\n      let query = this.keepShareTokenForQuery()\r\n      this.$router.push({\r\n        params: {\r\n          client_id: this.nav.clientId\r\n        },\r\n        query: query\r\n      })\r\n    },\r\n    'selected.marketplace'(val) {\r\n      this.hanldeChangeBrandName()\r\n    },\r\n    'selected.seller_type'(val) {\r\n      this.handleChangeSellerType()\r\n    },\r\n    'selected.fulfillment'(val) {\r\n      this.handleChangeSellerType()\r\n    },\r\n    'selected.source'(val) {\r\n      this.handleChangeSource()\r\n    }\r\n  }\r\n}\r\n",null]}