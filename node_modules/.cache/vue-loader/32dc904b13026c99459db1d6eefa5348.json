{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Contacts.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Contacts.vue","mtime":1626264502302},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required, email } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport _nav from '@/_nav'\r\n\r\nexport default {\r\n  name: 'MWSellerEnforcementContacts',\r\n  data() {\r\n    return {\r\n      contacts: [],\r\n      canShowErr: false,\r\n      fields: [\r\n        {\r\n          key: 'email',\r\n          label: 'Email Address'\r\n        },\r\n        {\r\n          key: 'contact_name',\r\n          label: 'Contact Name'\r\n        },\r\n        {\r\n          key: 'job_title',\r\n          label: 'Job Title'\r\n        },\r\n        {\r\n          key: 'actions',\r\n          label: ''\r\n        }\r\n      ],\r\n      nav: _nav,\r\n      deleteContactData: null\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  methods: {\r\n    ...mapActions({\r\n      getOneSeller: `mw/sellerEnforcements/${TYPE.GET_ONE_SELLER_ENFORCEMENT}`,\r\n      remoteEditSeller: `mw/sellerEnforcements/${TYPE.REMOTE_EDIT_SELLER_ENFORCEMENT}`\r\n    }),\r\n    removeRowAt(contact) {\r\n      this.contacts = _.filter(this.contacts, function(o) { return o.index !== contact.index })\r\n      this.$bvModal.hide('delete-confirm')\r\n    },\r\n    editRowAt(contact) {\r\n      const updatedContact = this.contacts[contact.index]\r\n      updatedContact.action = 'edit'\r\n      this.$set(this.contacts, contact.index, updatedContact)\r\n    },\r\n    addNewRow() {\r\n      this.contacts.push({\r\n        email: '',\r\n        contact_name: '',\r\n        job_title: '',\r\n        action: 'edit',\r\n        index: this.contacts.length\r\n      })\r\n    },\r\n    async saveContacts() {\r\n      this.canShowErr = true\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        return\r\n      }\r\n      try {\r\n        const dataSet = _.map(this.contacts, (contact) => {\r\n          return {\r\n            email: contact.email,\r\n            contact_name: contact.contact_name,\r\n            job_title: contact.job_title\r\n          }\r\n        })\r\n        await this.remoteEditSeller({ params: { contacts: dataSet }, id: this.seller.id })\r\n        this.vToasted('success', `Seller ${this.seller.name} has been updated successfully.`)\r\n        this.contacts = _.map(this.contacts, (contact) => {\r\n          contact.action = 'done'\r\n          return contact\r\n        })\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n      this.canShowErr = false\r\n    },\r\n    backToListSeller() {\r\n      this.$router.push({ name: 'MWListSellerEnforcements', params: { client_id: this.nav.clientId } })\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`\r\n    })\r\n  },\r\n  async created() {\r\n    if (!this.$route.params.id) {\r\n      this.backToListSeller()\r\n      return\r\n    }\r\n    try {\r\n      const seller = await this.getOneSeller(this.$route.params.id)\r\n      this.contacts = seller.contacts\r\n      this.seller = seller\r\n      const _this = this\r\n      _.each(this.contacts, function(contact, i) {\r\n        _this.contacts[i].index = i\r\n        _this.contacts[i].action = 'done'\r\n      })\r\n    } catch (error) {\r\n      this.vToasted('error', `Seller ${this.$route.params.id} not exist`)\r\n      this.backToListSeller()\r\n    }\r\n  },\r\n  validations: {\r\n    contacts: {\r\n      $each: {\r\n        email: { required, email },\r\n        contact_name: { required },\r\n        job_title: { required },\r\n        action: { required }\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}