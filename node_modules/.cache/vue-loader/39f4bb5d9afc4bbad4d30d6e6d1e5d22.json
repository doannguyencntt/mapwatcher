{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardHistorical.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardHistorical.vue","mtime":1626264502271},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport $ from 'jquery'\r\nimport { Promise } from 'q'\r\nimport _ from 'lodash'\r\nimport { DashboardFilterSourceType } from '@/constants/Report'\r\nimport { DashboardViolatorTitle, DashboardAllSellerTitle, DashboardWidgetId } from '@/constants/Dashboard'\r\n\r\nexport default {\r\n  props: ['selected'],\r\n  data: () => ({\r\n    dashboardFilterSourceType: _.cloneDeep(DashboardFilterSourceType),\r\n    dashboardAllSellerTitle: _.cloneDeep(DashboardAllSellerTitle),\r\n    dashboardViolatorTitle: _.cloneDeep(DashboardViolatorTitle),\r\n    dashboardWidgetId: _.cloneDeep(DashboardWidgetId),\r\n    dates: [],\r\n    loader: false,\r\n    selectedDate: null,\r\n    sdkConfigInitialized: false,\r\n    sdkConfigForceReload: 0\r\n  }),\r\n  name: 'MWDashboardHistorical',\r\n  computed: {\r\n    ...mapGetters({\r\n      dataHistoricalTable: `mw/dashboard/${TYPE.GET_DATA_HISTORICAL}`,\r\n      dataDateHistorical: `mw/dashboard/${TYPE.GET_DATE_HISTORICAL}`,\r\n      dataNumberViolations: `mw/dashboard/${TYPE.GET_DATA_NUMBER_OF_VIOLATIONS}`,\r\n      dataNumberViolationsViolators: `mw/dashboard/${TYPE.GET_DATA_NUMBER_OF_VIOLATIONS_VIOLATORS}`,\r\n      mainConfig: `mw/dashboard/${TYPE.GET_DATA_CONFIG_HISTORICAL}`\r\n    })\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchDataHistoricalTable: `mw/dashboard/${TYPE.FETCH_DATA_HISTORICAL}`,\r\n      fetchDataDateHistorical: `mw/dashboard/${TYPE.FETCH_DATE_HISTORICAL}`,\r\n      fetchDataNumberViolations: `mw/dashboard/${TYPE.FETCH_DATA_NUMBER_OF_VIOLATIONS}`,\r\n      fetchDataNumberViolationsViolators: `mw/dashboard/${TYPE.FETCH_DATA_NUMBER_OF_VIOLATIONS_VIOLATORS}`,\r\n      downloadDailyViolations: `mw/dashboard/${TYPE.FETCH_DOWNLOAD_DAILY_VIOLATIONS}`,\r\n      setSelectedDate: `mw/dashboard/${TYPE.SET_SELECTED_DATE}`\r\n    }),\r\n    handleDataHistorical(marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataHistoricalTable(this.useShareTokenIfNeed({\r\n          date: this.selectedDate ? this.$moment(this.selectedDate).format('YYYY-MM-DD') : null,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          show_upc_in_dashboard: this.selected.brand.show_upc_in_dashboard\r\n        })).then(() => {\r\n          let fakeHistorical = {...this.dataHistoricalTable}\r\n          fakeHistorical = this.emptyRowData(fakeHistorical, this.getIgnoredColumnsHistorical(this.selected.brand))\r\n          if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n            fakeHistorical = this.removeColumnData(fakeHistorical, ['upc/ean'])\r\n          }\r\n          window.mw_historical_data_table = fakeHistorical\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    // remove column from table data\r\n    removeColumnData(data, cols = []) {\r\n      if (!cols.length || !data || !data.cols || !data.rows) return data\r\n      let names = data.cols.map(d => d.name)\r\n      let indexs = cols.reduce((a, c) => { if (names.includes(c)) a.push(names.indexOf(c)); return a }, []).filter(e => e >= 0)\r\n      indexs.forEach(i => { data.rows = data.rows.map(r => { r[i] = null; return r }) })\r\n      return data\r\n    },\r\n    findWidgetByLabel(widgetArray, label) {\r\n      let flag\r\n      widgetArray.forEach(widget => {\r\n        if (widget.config.widgets && widget.config.widgets.length > 0) {\r\n          let result = this.findWidgetByLabel(widget.config.widgets, label)\r\n          // eslint-disable-next-line no-unused-expressions\r\n          result ? flag = result : ''\r\n        } else if (label === widget.config.widget.title.text) {\r\n          flag = widget\r\n        }\r\n      })\r\n      return flag\r\n    },\r\n    handleCaseRemoveColumn(widgetName, arrayLabel) {\r\n      let widget = this.findWidgetByLabel(window.mw_dashboard_main_config.widgetLayout.widgets, widgetName)\r\n      widget.config.elements[0].config.columns = this.removeColumnByLabel(widget.config.elements[0].config.columns, arrayLabel)\r\n    },\r\n    removeColumnByLabel(arrayColumn, arrayLabel) {\r\n      return arrayColumn.filter(column => !arrayLabel.includes(column.name))\r\n    },\r\n    useShareTokenIfNeed(object) {\r\n      if (this.selected.share_token) {\r\n        _.assign(object, { share_token: this.selected.share_token })\r\n      }\r\n      _.assign(object, { source: this.selected.source })\r\n      _.assign(object, { is_true_map: !!this.selected.brand.true_map_report })\r\n      return object\r\n    },\r\n    getIgnoredColumnsHistorical(brand) {\r\n      let ignoredColumns = []\r\n      if (brand && brand.ignore_price_tracking) {\r\n        ignoredColumns.push('map_price', 'diff', 'diff_percent')\r\n      }\r\n      return ignoredColumns\r\n    },\r\n    handleDataNumberOfViolationsViolators(marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataNumberViolationsViolators(this.useShareTokenIfNeed({\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type\r\n        })).then(() => {\r\n          window.mw_historical_number_of_violation_violator = this.dataNumberViolationsViolators\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    handleDataNumberViolations(marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataNumberViolations(this.useShareTokenIfNeed({\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type\r\n        })).then(() => {\r\n          window.mw_historical_number_of_violations = this.dataNumberViolations\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    emptyRowData(data, cols = []) {\r\n      if (!cols.length || !data || !data.cols || !data.rows) return data\r\n      let names = data.cols.map(d => d.name)\r\n      let indexs = cols.reduce((a, c) => { if (names.includes(c)) a.push(names.indexOf(c)); return a }, []).filter(e => e >= 0)\r\n      indexs.forEach(i => { data.rows = data.rows.map(r => { r[i] = null; return r }) })\r\n      return data\r\n    },\r\n    syncMarketplaceParams (marketplace) {\r\n      return _.includes(marketplace, 'amazon') ? marketplace.replace(/[_]/g, '.') : marketplace\r\n    },\r\n    async _fetchDashboardWidgetData() {\r\n      let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n      const isTrueMap = !!this.selected.brand.true_map_report\r\n      const promises = [this.handleDataHistorical(marketplace)]\r\n      if (isTrueMap) {\r\n        promises.push(this.handleDataNumberOfViolationsViolators(marketplace))\r\n        promises.push(this.handleDataNumberViolations(marketplace))\r\n      }\r\n      await Promise.all(promises).then(() => {\r\n        const widgets = this.mainConfig.widgetLayout.widgets\r\n        for (const [index, widget] of widgets.entries()) {\r\n          const widgetId = widget.config.widget_id\r\n          if (widgetId) {\r\n            const text = this.selected.source === this.dashboardFilterSourceType.ALL_SELLERS ? this.dashboardAllSellerTitle[widgetId] : this.dashboardViolatorTitle[widgetId]\r\n            this.mainConfig.widgetLayout.widgets[index].config.widget.title.text = text\r\n          }\r\n        }\r\n        window.mw_dashboard_main_config = $.extend(true, {}, this.mainConfig)\r\n        if (!isTrueMap) {\r\n          const cloneWidgets = _.clone(this.mainConfig.widgetLayout.widgets)\r\n          window.mw_dashboard_main_config.widgetLayout.widgets = _.filter(cloneWidgets, (item) => {\r\n            return !_.includes([this.dashboardWidgetId.number_of_violations_per_seller, this.dashboardWidgetId.number_of_violations_violators], item.config.widget_id)\r\n          })\r\n        }\r\n        if (!this.sdkConfigInitialized) {\r\n          // for first time\r\n          this.sdkConfigInitialized = true\r\n        } else {\r\n          // change dataSource effect to sdk\r\n          this.sdkConfigForceReload++\r\n        }\r\n      })\r\n    },\r\n    _renderDashboardWidgets() {\r\n      if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n        this.handleCaseRemoveColumn('Historical Data Table', ['upc/ean'])\r\n      }\r\n      const isTrueMap = !!this.selected.brand.true_map_report\r\n      if (!isTrueMap) {\r\n        this.handleCaseRemoveColumn('Historical Data Table', ['map_price', 'diff', 'diff_percent'])\r\n      }\r\n      // let el = $(this.$el).find('.widgets-container:eq(0)')\r\n      // el.html(\r\n      //   '<cbpo-dashboard config-ref=\"mw_dashboard_main_config\" class=\"mw-sdk-styled\" />'\r\n      // )\r\n      // this.$CBPO.wgManager().init('.widgets-container')\r\n      // this.$forceUpdate()\r\n      this.sdkConfigForceReload++\r\n    },\r\n    async fetchAndRenderDashboardWidgets() {\r\n      await this._fetchDashboardWidgetData()\r\n      this._renderDashboardWidgets()\r\n    },\r\n    async fetchDate() {\r\n      let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n      await this.fetchDataDateHistorical(this.useShareTokenIfNeed({\r\n        marketplace: marketplace,\r\n        brand_id: this.selected.brand._id,\r\n        seller_type: this.selected.seller_type,\r\n        fulfillment: this.selected.fulfillment\r\n      }))\r\n      this.dates = this.dataDateHistorical.dates\r\n      if (this.dates.length > 0) {\r\n        this.selectedDate = this.dates[0]\r\n      } else {\r\n        this.selectedDate = null\r\n      }\r\n      this.setSelectedDate(this.selectedDate)\r\n      this.fetchAndRenderDashboardWidgets()\r\n    },\r\n    dateChange(e) {\r\n      this.selectedDate = e.target.value\r\n      this.setSelectedDate(this.selectedDate)\r\n      this.fetchAndRenderDashboardWidgets()\r\n    },\r\n    createEventButtonAction() {\r\n      // Download button DAILY VIOLATOR widget\r\n      this.$CBPO.$bus.$on(`trigger_button_history_${TYPE.DOWNLOAD_DAILY_VIOLATIONS}`, () => {\r\n        let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n        this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS + '_stateChange', true)\r\n        this.downloadDailyViolations(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        })).then((link) => {\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS + '_stateChange', false)\r\n          if (link && link.uri) {\r\n            let a = document.createElement('a')\r\n            a.href = link.uri\r\n            a.click()\r\n          }\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS + '_stateChange', false)\r\n        })\r\n      })\r\n    }\r\n  },\r\n  async created() {\r\n    this.fetchDate()\r\n    this.createEventButtonAction()\r\n  },\r\n\r\n  watch: {\r\n    '$route.query'(val) {\r\n      this.fetchDate()\r\n    }\r\n  },\r\n  destroyed() {\r\n    this.$CBPO.$bus.$off(`trigger_button_history_${TYPE.DOWNLOAD_DAILY_VIOLATIONS}`)\r\n  }\r\n}\r\n",null]}