{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\PolicyNotificationModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\PolicyNotificationModal.vue","mtime":1630397532752},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport vToasted from '@/shared/notification'\r\nimport * as TYPE from '@/actionTypes.js'\r\n\r\nexport default {\r\n  name: 'PolicyNotificationModal',\r\n  props: {\r\n    id: { type: String, required: true }\r\n  },\r\n  data() {\r\n    return {\r\n      internalSellerData: {},\r\n      allChecked: true\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      listSellers: `mw/sellerEnforcements/${TYPE.GET_LIST_SELLER_ENFORCEMENT}`\r\n    }),\r\n    sellerItemsList: function() {\r\n      return this.listSellers.items || []\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchSellerEnforcementsList: `mw/sellerEnforcements/${\r\n        TYPE.FETCH_LIST_SELLER_ENFORCEMENTS\r\n      }`,\r\n      sendPolicyNotification: `mw/settings/${TYPE.SEND_POLICY_NOTIFICATION}`\r\n    }),\r\n    toggleAllList(checked) {\r\n      for (const sellerName in this.internalSellerData) {\r\n        this.toggleAllContacts(sellerName, checked)\r\n        this.internalSellerData[sellerName].allSelected = checked\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n      }\r\n    },\r\n    toggleAllContacts(sellerName, checked) {\r\n      this.internalSellerData[sellerName].selected = checked\r\n        ? this.internalSellerData[sellerName].options\r\n          .map((option) => ({\r\n            email: option.email,\r\n            contact_name: option.contact_name\r\n          }))\r\n          .slice()\r\n        : []\r\n    },\r\n    onChangeSellerContact(sellerName, selected) {\r\n      // Handle changes in individual checkboxes\r\n      if (selected.length === 0) {\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n        this.internalSellerData[sellerName].allSelected = false\r\n        this.allChecked = false\r\n      } else if (\r\n        selected.length === this.internalSellerData[sellerName].options.length\r\n      ) {\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n        this.internalSellerData[sellerName].allSelected = true\r\n        this.allChecked = Object.values(this.internalSellerData).every(\r\n          (seller) => seller.allSelected === true\r\n        )\r\n      } else {\r\n        this.internalSellerData[sellerName].indeterminate = true\r\n        this.internalSellerData[sellerName].allSelected = false\r\n        this.allChecked = false\r\n      }\r\n    },\r\n    handleFetchSellerList() {\r\n      this.fetchSellerEnforcementsList().then(() => {\r\n        const defaultOptions = { allSelected: true, indeterminate: false }\r\n        this.internalSellerData = this.sellerItemsList.reduce(\r\n          (acc, sellerItem) => {\r\n            if (\r\n              sellerItem.name &&\r\n              sellerItem.contacts &&\r\n              sellerItem.contacts.length\r\n            ) {\r\n              acc[sellerItem.name] = {\r\n                options: sellerItem.contacts,\r\n                selected: sellerItem.contacts.map((item) => ({\r\n                  email: item.email,\r\n                  contact_name: item.contact_name\r\n                })),\r\n                ...defaultOptions\r\n              }\r\n            }\r\n            return acc\r\n          },\r\n          {}\r\n        )\r\n      })\r\n    },\r\n    handleSendUpdatedPolicyMail() {\r\n      let payload = { email_list: [] }\r\n      for (const [key, value] of Object.entries(this.internalSellerData)) {\r\n        if (value.selected.length) {\r\n          payload.email_list.push({\r\n            seller_name: key,\r\n            contact_list: value.selected\r\n          })\r\n        }\r\n      }\r\n      this.sendPolicyNotification(payload)\r\n        .then(() => {\r\n          this.vToasted(\r\n            'success',\r\n            `Policy notification email has been sent successfully.`\r\n          )\r\n        })\r\n        .catch((error) => {\r\n          this.vToasted('error', error.data.message)\r\n        })\r\n    }\r\n  },\r\n  created() {\r\n    this.handleFetchSellerList()\r\n  }\r\n}\r\n",{"version":3,"sources":["PolicyNotificationModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PolicyNotificationModal.vue","sourceRoot":"src/components/page/settings","sourcesContent":["<template>\r\n  <b-modal\r\n    :id=\"id\"\r\n    title=\"Please confirm\"\r\n    centered\r\n    @ok=\"handleSendUpdatedPolicyMail()\"\r\n    ok-variant=\"danger\"\r\n    scrollable\r\n  >\r\n    Are you sure you want to let all the contacts know about the policy change?\r\n    <div\r\n      v-if=\"internalSellerData && Object.keys(internalSellerData).length\"\r\n      class=\"seller-list mt-3 mb-0\"\r\n    >\r\n      <b-card no-body class=\"mb-2\">\r\n        <b-card-header>\r\n          <b-row>\r\n            <b-col cols=\"12\" md=\"6\">\r\n              <strong>Contact List</strong>\r\n            </b-col>\r\n            <b-col cols=\"12\" md=\"6\" class=\"d-flex justify-content-end\">\r\n              <b-form-group class=\"action-part mb-0\">\r\n                <b-form-checkbox\r\n                  v-model=\"allChecked\"\r\n                  @change=\"toggleAllList($event)\"\r\n                  name=\"toggle-all-button\"\r\n                >\r\n                  {{ allChecked ? 'Unselect All' : 'Select All' }}\r\n                </b-form-checkbox>\r\n              </b-form-group>\r\n            </b-col>\r\n          </b-row>\r\n        </b-card-header>\r\n\r\n        <b-card-body>\r\n          <b-form-group\r\n            v-for=\"(sellerItem, sellerName) in internalSellerData\"\r\n            :key=\"`seller-item-${sellerName}`\"\r\n            class=\"mb-3\"\r\n          >\r\n            <template #label>\r\n              <b-form-checkbox\r\n                :id=\"`contact-${sellerName}`\"\r\n                v-model=\"sellerItem.allSelected\"\r\n                :indeterminate=\"sellerItem.indeterminate\"\r\n                @change=\"toggleAllContacts(sellerName, $event)\"\r\n              >\r\n                Seller <strong>{{ sellerName }}</strong>\r\n              </b-form-checkbox>\r\n            </template>\r\n            <b-form-checkbox-group\r\n              :id=\"`seller-contacts-${sellerName}`\"\r\n              v-model=\"sellerItem.selected\"\r\n              class=\"ml-4\"\r\n              stacked\r\n              @change=\"onChangeSellerContact(sellerName, $event)\"\r\n            >\r\n              <b-form-checkbox\r\n                :id=\"`contact-${option.email}-${index}`\"\r\n                v-for=\"(option, index) in sellerItem.options\"\r\n                :key=\"`contact-${index}`\"\r\n                :value=\"{\r\n                  email: option.email,\r\n                  contact_name: option.contact_name\r\n                }\"\r\n                class=\"contact-checkbox\"\r\n              >\r\n                {{ option.contact_name }} &lt;{{ option.email }}&gt;\r\n              </b-form-checkbox>\r\n            </b-form-checkbox-group>\r\n          </b-form-group>\r\n        </b-card-body>\r\n      </b-card>\r\n    </div>\r\n    <template v-slot:modal-footer=\"{ ok, cancel }\">\r\n      <b-button variant=\"warning\" @click=\"ok()\">\r\n        <i class=\"icon-check\"></i> Yes, I understand &amp; confirm!\r\n      </b-button>\r\n      <b-button variant @click=\"cancel()\">\r\n        <i class=\"icon-close\"></i> No\r\n      </b-button>\r\n    </template>\r\n  </b-modal>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport vToasted from '@/shared/notification'\r\nimport * as TYPE from '@/actionTypes.js'\r\n\r\nexport default {\r\n  name: 'PolicyNotificationModal',\r\n  props: {\r\n    id: { type: String, required: true }\r\n  },\r\n  data() {\r\n    return {\r\n      internalSellerData: {},\r\n      allChecked: true\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      listSellers: `mw/sellerEnforcements/${TYPE.GET_LIST_SELLER_ENFORCEMENT}`\r\n    }),\r\n    sellerItemsList: function() {\r\n      return this.listSellers.items || []\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchSellerEnforcementsList: `mw/sellerEnforcements/${\r\n        TYPE.FETCH_LIST_SELLER_ENFORCEMENTS\r\n      }`,\r\n      sendPolicyNotification: `mw/settings/${TYPE.SEND_POLICY_NOTIFICATION}`\r\n    }),\r\n    toggleAllList(checked) {\r\n      for (const sellerName in this.internalSellerData) {\r\n        this.toggleAllContacts(sellerName, checked)\r\n        this.internalSellerData[sellerName].allSelected = checked\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n      }\r\n    },\r\n    toggleAllContacts(sellerName, checked) {\r\n      this.internalSellerData[sellerName].selected = checked\r\n        ? this.internalSellerData[sellerName].options\r\n          .map((option) => ({\r\n            email: option.email,\r\n            contact_name: option.contact_name\r\n          }))\r\n          .slice()\r\n        : []\r\n    },\r\n    onChangeSellerContact(sellerName, selected) {\r\n      // Handle changes in individual checkboxes\r\n      if (selected.length === 0) {\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n        this.internalSellerData[sellerName].allSelected = false\r\n        this.allChecked = false\r\n      } else if (\r\n        selected.length === this.internalSellerData[sellerName].options.length\r\n      ) {\r\n        this.internalSellerData[sellerName].indeterminate = false\r\n        this.internalSellerData[sellerName].allSelected = true\r\n        this.allChecked = Object.values(this.internalSellerData).every(\r\n          (seller) => seller.allSelected === true\r\n        )\r\n      } else {\r\n        this.internalSellerData[sellerName].indeterminate = true\r\n        this.internalSellerData[sellerName].allSelected = false\r\n        this.allChecked = false\r\n      }\r\n    },\r\n    handleFetchSellerList() {\r\n      this.fetchSellerEnforcementsList().then(() => {\r\n        const defaultOptions = { allSelected: true, indeterminate: false }\r\n        this.internalSellerData = this.sellerItemsList.reduce(\r\n          (acc, sellerItem) => {\r\n            if (\r\n              sellerItem.name &&\r\n              sellerItem.contacts &&\r\n              sellerItem.contacts.length\r\n            ) {\r\n              acc[sellerItem.name] = {\r\n                options: sellerItem.contacts,\r\n                selected: sellerItem.contacts.map((item) => ({\r\n                  email: item.email,\r\n                  contact_name: item.contact_name\r\n                })),\r\n                ...defaultOptions\r\n              }\r\n            }\r\n            return acc\r\n          },\r\n          {}\r\n        )\r\n      })\r\n    },\r\n    handleSendUpdatedPolicyMail() {\r\n      let payload = { email_list: [] }\r\n      for (const [key, value] of Object.entries(this.internalSellerData)) {\r\n        if (value.selected.length) {\r\n          payload.email_list.push({\r\n            seller_name: key,\r\n            contact_list: value.selected\r\n          })\r\n        }\r\n      }\r\n      this.sendPolicyNotification(payload)\r\n        .then(() => {\r\n          this.vToasted(\r\n            'success',\r\n            `Policy notification email has been sent successfully.`\r\n          )\r\n        })\r\n        .catch((error) => {\r\n          this.vToasted('error', error.data.message)\r\n        })\r\n    }\r\n  },\r\n  created() {\r\n    this.handleFetchSellerList()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.seller-list {\r\n  &::v-deep {\r\n    .custom-control-label {\r\n      padding-top: 1px;\r\n    }\r\n  }\r\n}\r\n.action-part {\r\n  label {\r\n    padding-top: 1px;\r\n  }\r\n}\r\n</style>\r\n"]}]}