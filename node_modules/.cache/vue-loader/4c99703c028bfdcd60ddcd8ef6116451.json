{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\ListMaps.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\ListMaps.vue","mtime":1639404481197},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\index.js","mtime":1620898435762},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1620898436811},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\postcss-loader\\src\\index.js","mtime":1620898436496},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\sass-loader\\lib\\loader.js","mtime":1626076778407},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.map-list-title {\r\n  position: relative;\r\n  top: 4px;\r\n}\r\n.dropdown-action {\r\n  margin: 0 !important;\r\n}\r\n.btn-loader {\r\n  width: 12px !important;\r\n  height: 12px !important;\r\n  border-width: 1px !important;\r\n}\r\n",{"version":3,"sources":["ListMaps.vue"],"names":[],"mappingsjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ListMaps.vue","sourceRoot":"src/components/page/maps","sourcesContent":["<template>\r\n  <b-card :header=\"caption\">\r\n    <template v-slot:header>\r\n      <p class=\"po-list-title my-0 pull-left align-middle map-list-title\">\r\n        <strong><i class=\"icon-book-open icons\"></i> {{ caption }}</strong>\r\n        <span v-if=\"listMaps && listMaps.total\">\r\n          (Total:\r\n          {{ new Number(listMaps.total || 0).toLocaleString('en') }})</span\r\n        >\r\n        <span v-else> (Total: 0)</span>\r\n      </p>\r\n      <div class=\"pull-right\">\r\n        <b-button-group>\r\n          <router-link\r\n            v-if=\"\r\n              getPermissions.module_enabled &&\r\n              getPermissions.permissions.mapman &&\r\n              !params.share_token\r\n            \"\r\n            :to=\"{\r\n              name: `MWImportAmazonMaps`,\r\n              params: { client_id: nav.clientId }\r\n            }\"\r\n            tag=\"button\"\r\n            class=\"btn btn-primary btn-sm\"\r\n          >\r\n            <i class=\"icons icon-cloud-upload\"></i> Import\r\n          </router-link>\r\n          <b-button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            @click=\"\r\n              () => {\r\n                handleOpenModelDownload()\r\n              }\r\n            \"\r\n          >\r\n            <i class=\"icons icon-cloud-download\"></i> Export\r\n            <b-spinner\r\n              v-if=\"$store.state.mw.maps.loadingDownload\"\r\n              label=\"Spinning\"\r\n              class=\"icon- btn-loader\"\r\n            ></b-spinner>\r\n          </b-button>\r\n        </b-button-group>\r\n      </div>\r\n    </template>\r\n    <b-row>\r\n      <b-col class=\"mb-4 col-1\">\r\n        <b-dropdown\r\n          v-if=\"selectedMaps.length\"\r\n          text=\"Actions\"\r\n          class=\"dropdown-action\"\r\n        >\r\n          <b-dropdown-item-button\r\n            :disabled=\"\r\n              !getPermissions.module_enabled &&\r\n              !getPermissions.permissions.mapman\r\n            \"\r\n            @click=\"$bvModal.show('modal-confirm-remove-multi')\"\r\n          >\r\n            <i class=\"icon-close\"></i> Remove\r\n          </b-dropdown-item-button>\r\n        </b-dropdown>\r\n      </b-col>\r\n      <b-col class=\"mb-4 col-11\">\r\n        <b-form-group class=\"mb-0\">\r\n          <b-input-group class=\"search cancel-action align-items-center\">\r\n            <!-- Report -->\r\n            <label class=\"d-inline mb-0 pr-2\">Report:</label>\r\n            <b-form-select\r\n              @change=\"\r\n                params.page = 1\r\n                reportChange()\r\n              \"\r\n              v-model=\"params.report_id\"\r\n              :options=\"reportOptions\"\r\n            >\r\n              <template v-slot:first>\r\n                <option :value=\"null\">All Reports</option>\r\n              </template>\r\n            </b-form-select>\r\n            <!-- Marketplace -->\r\n            <label class=\"d-inline ml-5 mb-0 pr-2\">Marketplace:</label>\r\n            <b-form-select\r\n              @change=\"\r\n                params.page = 1\r\n                marketplaceChange()\r\n              \"\r\n              v-model=\"params.marketplace\"\r\n              :options=\"marketplaceOptions\"\r\n            >\r\n              <template v-slot:first>\r\n                <option :value=\"null\">All Marketplace</option>\r\n              </template>\r\n            </b-form-select>\r\n            <!-- Brand -->\r\n            <label class=\"d-inline ml-5 mb-0 pr-2\">Brand:</label>\r\n            <b-form-select\r\n              @change=\"\r\n                params.page = 1\r\n                paramsChange()\r\n              \"\r\n              v-model=\"params.brand_name\"\r\n              :options=\"brandOptions\"\r\n            >\r\n              <template v-slot:first>\r\n                <option :value=\"null\">All Brands</option>\r\n              </template>\r\n            </b-form-select>\r\n            <!-- Search -->\r\n            <label class=\"d-inline mb-0 pr-2 pl-2 ml-5\">Search:</label>\r\n            <b-form-input\r\n              @keyup.enter=\"\r\n                params.page = 1\r\n                paramsChange()\r\n              \"\r\n              placeholder=\"Enter keyword\"\r\n              ref=\"inputSearch\"\r\n              v-model=\"params.search\"\r\n            ></b-form-input>\r\n            <i\r\n              v-show=\"params.search\"\r\n              @click=\"\r\n                params.page = 1\r\n                params.search = ''\r\n                paramsChange()\r\n              \"\r\n              class=\"icon-close cancel-icon\"\r\n            ></i>\r\n            <b-input-group-append>\r\n              <b-button\r\n                @click=\"\r\n                  params.page = 1\r\n                  paramsChange()\r\n                \"\r\n              >\r\n                <i class=\"icons icon-magnifier\"></i>\r\n              </b-button>\r\n            </b-input-group-append>\r\n          </b-input-group>\r\n        </b-form-group>\r\n      </b-col>\r\n    </b-row>\r\n    <b-table\r\n      :dark=\"dark\"\r\n      :hover=\"hover\"\r\n      striped\r\n      :small=\"small\"\r\n      outlined\r\n      responsive=\"sm\"\r\n      thead-class=\"thead-light\"\r\n      :items=\"getItems\"\r\n      :fields=\"captions\"\r\n      show-empty\r\n      class=\"overflow-auto\"\r\n    >\r\n      <template v-slot:empty>\r\n        <div class=\"empty\">No MAP</div>\r\n      </template>\r\n      <template v-slot:head(selected)>\r\n        <b-form-checkbox v-model=\"allSelected\" />\r\n      </template>\r\n      <template v-slot:cell(selected)=\"row\">\r\n        <b-form-checkbox\r\n          :key=\"row.index\"\r\n          :value=\"row.item.id\"\r\n          v-model=\"selectedMaps\"\r\n        />\r\n      </template>\r\n      <template class=\"align-items-baseline\" v-slot:cell(price)=\"data\"\r\n        >{{ data.item.price ? currency(data.item.marketplace) : '' }}\r\n        {{ data.item.price | formatNumber }}</template\r\n      >\r\n      <template v-slot:cell(active)=\"row\">\r\n        <b-form-checkbox\r\n          v-model=\"row.item.active\"\r\n          :disabled=\"true\"\r\n        ></b-form-checkbox>\r\n      </template>\r\n      <template v-slot:cell(last_violation_checked)=\"data\">\r\n        <div class=\"float-left\" v-if=\"data.item.has_processed\">\r\n          {{ data.item.last_violation_checked | moment('MM/DD/YYYY') }}\r\n        </div>\r\n        <div class=\"float-left\" v-else>N/A</div>\r\n        <i\r\n          v-if=\"data.item.has_processed\"\r\n          class=\"\r\n            icon-check\r\n            icons\r\n            rounded-circle\r\n            bg-success\r\n            custom_icon\r\n            float-left\r\n            ml-2\r\n          \"\r\n        ></i>\r\n        <i\r\n          v-if=\"!data.item.has_processed\"\r\n          class=\"\r\n            icon-clock\r\n            icons\r\n            rounded-circle\r\n            bg-secondary\r\n            custom_icon\r\n            float-left\r\n            ml-2\r\n          \"\r\n        ></i>\r\n      </template>\r\n      <template v-slot:cell(type)=\"data\">\r\n        <span class=\"badge badge-secondary\">{{\r\n          convertToUpperCase(data.item.type)\r\n        }}</span>\r\n      </template>\r\n      <template v-slot:cell(discovered_asins)=\"row\">\r\n        <ul\r\n          class=\"mb-0 w-100 p-0\"\r\n          v-for=\"(itemAsin, index) in row.item.discovered_asins\"\r\n          :key=\"index\"\r\n          style=\"list-style-position: inside; list-style-type: none\"\r\n        >\r\n          <li class=\"text-truncate max-width-300\">\r\n            {{ itemAsin.asin }} on ({{ itemAsin.date | moment('MM/DD/YYYY') }})\r\n          </li>\r\n        </ul>\r\n      </template>\r\n      <template\r\n        v-slot:cell(actions)=\"row\"\r\n        v-if=\"\r\n          getPermissions.module_enabled && getPermissions.permissions.mapman\r\n        \"\r\n      >\r\n        <b-button-group class=\"d-flex flex-row\">\r\n          <b-button\r\n            variant=\"primary\"\r\n            size=\"sm\"\r\n            @click=\"handleEditMap(row.item.id)\"\r\n          >\r\n            <i class=\"icon-note\"></i> Edit\r\n          </b-button>\r\n          <b-button\r\n            variant=\"danger\"\r\n            size=\"sm\"\r\n            @click=\"\r\n              $bvModal.show('modal-confirm-delete-map')\r\n              mapId = row.item.id\r\n            \"\r\n          >\r\n            <i class=\"icon-close\"></i> Remove\r\n          </b-button>\r\n        </b-button-group>\r\n      </template>\r\n      <template v-slot:view>\r\n        <b-button class=\"mr-1 my-1\" variant=\"primary\">\r\n          <i class=\"fa fa-window-restore fa-lg\"></i> Revision\r\n        </b-button>\r\n      </template>\r\n    </b-table>\r\n    <b-modal\r\n      title=\"Please confirm\"\r\n      centered\r\n      id=\"modal-confirm-delete-map\"\r\n      @ok=\"handleRemoveMap(mapId)\"\r\n      ok-variant=\"danger\"\r\n    >\r\n      Are you sure you want to remove this MAP?\r\n      <template v-slot:modal-footer=\"{ ok, cancel }\">\r\n        <b-button variant=\"warning\" @click=\"ok()\">\r\n          <i class=\"icon-check\"></i> Yes, I understand &amp; confirm!\r\n        </b-button>\r\n        <b-button variant @click=\"cancel()\">\r\n          <i class=\"icon-close\"></i> No\r\n        </b-button>\r\n      </template>\r\n    </b-modal>\r\n    <b-modal\r\n      title=\"Please confirm\"\r\n      centered\r\n      id=\"modal-confirm-remove-multi\"\r\n      @ok=\"handleRemoveMulti\"\r\n    >\r\n      Are you sure you want to remove all selected MAPs?\r\n      <template v-slot:modal-footer=\"{ ok, cancel }\">\r\n        <b-button variant=\"danger\" @click=\"ok()\">\r\n          <i class=\"icon-check\"></i> Yes, I understand &amp; confirm!\r\n        </b-button>\r\n        <b-button variant @click=\"cancel()\">\r\n          <i class=\"icon-close\"></i> No\r\n        </b-button>\r\n      </template>\r\n    </b-modal>\r\n    <nav\r\n      class=\"d-flex justify-content-center\"\r\n      v-if=\"listMaps.total > listMaps.page_size && listMaps.items.length > 0\"\r\n    >\r\n      <b-pagination\r\n        :total-rows=\"listMaps.total\"\r\n        :per-page=\"params.limit\"\r\n        v-model=\"params.page\"\r\n        prev-text=\"Prev\"\r\n        next-text=\"Next\"\r\n        hide-goto-end-buttons\r\n        @change=\";(params.page = $event), paramsChange()\"\r\n        limit=\"10\"\r\n        hide-ellipsis\r\n      />\r\n    </nav>\r\n  </b-card>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport vToasted from '@/shared/notification'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport _ from 'lodash'\r\nimport _nav from '@/_nav'\r\nimport { MarketPlacesCurrency } from '@/constants/Report'\r\n\r\nexport default {\r\n  name: 'c-table',\r\n  inheritAttrs: false,\r\n  mixins: [vToasted],\r\n  props: {\r\n    caption: {\r\n      type: String,\r\n      default: 'Table'\r\n    },\r\n    hover: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    striped: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    bordered: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    small: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    fixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tableData: {\r\n      type: [Array, Function],\r\n      default: () => []\r\n    },\r\n    fields: {\r\n      type: [Array, Object],\r\n      default: () => []\r\n    },\r\n    dark: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    totalRows: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    handleChangePage: {\r\n      type: [Function]\r\n    }\r\n  },\r\n  data: () => {\r\n    return {\r\n      MarketPlacesCurrency,\r\n      params: null,\r\n      validReports: [],\r\n      brandNames: [],\r\n      nav: _nav,\r\n      mapId: null,\r\n      selectedMaps: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      organizationStats: `mw/${TYPE.GET_ORGANIZATION_STATS}`,\r\n      defaultParams: `mw/maps/${TYPE.GET_DEFAULT_AMAZON_MAP_PARAMS}`,\r\n      reportList: `mw/reports/${TYPE.GET_LIST_REPORTS}`,\r\n      listMaps: `mw/maps/${TYPE.GET_MAPS}`\r\n    }),\r\n    captions: function () {\r\n      const { fields } = this\r\n      return this.params.marketplace\r\n        ? fields\r\n        : fields.filter((f) => f.key !== 'name')\r\n    },\r\n    getItems: function () {\r\n      return this.listMaps.items\r\n    },\r\n    allSelected: {\r\n      get: function () {\r\n        let items = this.getItems\r\n        return !_.isEmpty(items) && items.length === this.selectedMaps.length\r\n      },\r\n      set: function (newValue) {\r\n        let items = this.getItems\r\n        this.selectedMaps = newValue ? items.map((item) => item.id) : items.length === this.selectedMaps.length ? [] : this.selectedMaps\r\n      }\r\n    },\r\n    sharableRoute() {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    },\r\n    reportOptions() {\r\n      return this.validReports.map((item) => ({\r\n        value: item._id,\r\n        text: item.name_in_dashboard\r\n      }))\r\n    },\r\n    marketplaceOptions() {\r\n      const selectedReports = this.params.report_id\r\n        ? [_.find(this.validReports, { _id: this.params.report_id })]\r\n        : this.validReports\r\n      let supportedMarkets = []\r\n      _.forEach(selectedReports, (report) => {\r\n        const markets = _.get(report, 'marketplaces')\r\n        _.forEach(_.keys(markets), (marketKey) => {\r\n          const marketplace = marketKey.replaceAll('_', '.') // amazon.com\r\n          markets[marketKey] &&\r\n            !supportedMarkets.includes(marketplace) &&\r\n            supportedMarkets.push(marketplace)\r\n        })\r\n      })\r\n      return _.isEmpty(this.planConfig)\r\n        ? supportedMarkets\r\n          .map((market) => ({ value: market, text: _.upperFirst(market) })) // not sort marketplaces\r\n        : this.planConfig.allowed_amazon_marketplaces\r\n          .filter((market) => supportedMarkets.includes(market))\r\n          .map((market) => ({ value: market, text: _.upperFirst(market) })) // sorted marketplaces\r\n    },\r\n    brandOptions() {\r\n      return this.brandNames.map((name) => ({\r\n        value: name === '' ? -1 : name,\r\n        text: name\r\n      }))\r\n    },\r\n    currency() {\r\n      // TODO later on, currency needs to be supported from backend.\r\n      return (marketplace) => MarketPlacesCurrency[marketplace]\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchMaps: `mw/maps/${TYPE.FETCH_LIST_MAPS}`,\r\n      fetchReports: `mw/reports/${TYPE.FETCH_LIST_REPORTS}`,\r\n      fetchValidAmazonReport: `mw/reports/${TYPE.GET_VALID_AMAZON_REPORTS}`,\r\n      removeMap: `mw/maps/${TYPE.REMOVE_MAP}`,\r\n      fetchUrlDownload: `mw/maps/${TYPE.FETCH_URL_EXPORT}`,\r\n      updateTotalGSMap: `mw/maps/${TYPE.UPDATE_TOTAL_GS_MAP}`,\r\n      fetchBrandNames: `mw/maps/${TYPE.GET_BRAND_NAMES}`,\r\n      fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`\r\n    }),\r\n    convertToUpperCase: function (str) {\r\n      return _.upperCase(str)\r\n    },\r\n    sortChange(event) {\r\n      this.params.searchort_by = event.sortBy\r\n      if (event.sortBy) {\r\n        this.params.searchort_dir = event.sortDesc ? 'desc' : 'asc'\r\n      } else {\r\n        this.params.searchort_dir = null\r\n      }\r\n      this.paramsChange()\r\n    },\r\n    syncParams() {\r\n      this.paramsChange()\r\n    },\r\n    async paramsChange() {\r\n      await this.fetchMaps(this.params)\r\n      this.$router.push(\r\n        {\r\n          params: {\r\n            client_id: this.nav.clientId\r\n          },\r\n          query: this.keepShareTokenForQuery({\r\n            search: this.params.search,\r\n            report_id: this.params.report_id,\r\n            limit: this.params.limit ? this.params.limit : 100,\r\n            page: this.params.page ? this.params.page : 1,\r\n            marketplace: this.params.marketplace,\r\n            brand_name: this.params.brand_name\r\n          })\r\n        },\r\n        () => {}\r\n      )\r\n    },\r\n    async reportChange() {\r\n      this.params.marketplace = null\r\n      this.params.brand_name = null\r\n      await this.reloadBrandNames()\r\n      await this.paramsChange()\r\n    },\r\n    async marketplaceChange() {\r\n      this.params.brand_name = null\r\n      await this.reloadBrandNames()\r\n      await this.paramsChange()\r\n    },\r\n    keepShareTokenForQuery(query) {\r\n      if (this.$route.query.share_token) {\r\n        _.assign(query, { share_token: this.$route.query.share_token })\r\n      }\r\n      return query\r\n    },\r\n    async fetchUniqAmazonReport() {\r\n      this.validReports = await this.fetchValidAmazonReport(\r\n        this.keepShareTokenForQuery({})\r\n      )\r\n      this.reloadBrandNames()\r\n    },\r\n    async reloadBrandNames() {\r\n      this.brandNames = await this.fetchBrandNames({\r\n        report_id: this.params.report_id,\r\n        marketplace: this.params.marketplace\r\n      })\r\n    },\r\n    async handleOpenModelDownload() {\r\n      try {\r\n        const res = await this.fetchUrlDownload(\r\n          this.keepShareTokenForQuery({ marketplace: this.params.marketplace })\r\n        )\r\n        window.location.href = res.url\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n    },\r\n    handleEditMap(mapId) {\r\n      this.$router.push({\r\n        name: `MW${this.sharableRoute}EditMaps`,\r\n        params: { client_id: this.nav.clientId, id: mapId },\r\n        query: { ...this.$route.query }\r\n      })\r\n    },\r\n    async handleRemoveMap(mapId) {\r\n      try {\r\n        await this.removeMap(mapId)\r\n        this.vToasted('success', `This MAP has been removed successfully.`)\r\n        await this.fetchPermissions()\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n    handleRemoveMulti() {\r\n      let allRemove = this.selectedMaps.map((mapId) => this.removeMap(mapId))\r\n      Promise.all(allRemove)\r\n        .then((values) => {\r\n          const newTotalGSmaps = this.listMaps.total - this.selectedMaps.length\r\n          this.updateTotalGSMap(newTotalGSmaps)\r\n          this.vToasted(\r\n            'success',\r\n            `All selected MAPs have been removed successfully.`\r\n          )\r\n          this.selectedMaps = []\r\n        })\r\n        .catch((error) => {\r\n          this.vToasted('error', error.data.message)\r\n        })\r\n    }\r\n  },\r\n  created() {\r\n    this.params = _.defaultsDeep(this.$route.query, this.defaultParams)\r\n    this.syncParams()\r\n    this.fetchUniqAmazonReport()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.map-list-title {\r\n  position: relative;\r\n  top: 4px;\r\n}\r\n.dropdown-action {\r\n  margin: 0 !important;\r\n}\r\n.btn-loader {\r\n  width: 12px !important;\r\n  height: 12px !important;\r\n  border-width: 1px !important;\r\n}\r\n</style>\r\n"]}]}