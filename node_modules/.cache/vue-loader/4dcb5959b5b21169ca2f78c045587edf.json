{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\brands\\ReportMarketplacePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\brands\\ReportMarketplacePicker.vue","mtime":1628569031600},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport VueTagsInput from '@johmun/vue-tags-input'\r\nimport Datepicker from 'vuejs-datepicker'\r\nimport * as moment from 'moment/moment'\r\nimport { MarketPlacesResult } from '@/constants/Report'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\n\r\nexport default {\r\n  name: 'MWReportMarketplacePicker',\r\n  data() {\r\n    return {\r\n      MarketPlacesResult,\r\n      listUniqGoogleShoppingMarketplace: [],\r\n      fields: [\r\n        // A column that needs custom formatting\r\n        { key: 'marketplace', label: 'Marketplace' },\r\n        { key: 'report_name', label: 'Brand' },\r\n        { key: 'file_in_use', label: 'File in Use' },\r\n        { key: 'date_started', label: 'Date Started' },\r\n        { key: 'all_seller_mode', label: 'All Seller Mode' },\r\n        { key: 'action', label: '' }\r\n      ],\r\n      allSellerModeOptions: [\r\n        { value: 'none', text: 'None' },\r\n        { value: 'authorized_only', text: 'Authorized Only' },\r\n        { value: 'rogue_only', text: 'Rogue Only' },\r\n        { value: 'both', text: 'Both' }\r\n      ],\r\n      marketplaces: {\r\n        amazon_com: false,\r\n        amazon_ca: false,\r\n        amazon_co_uk: false,\r\n        amazon_de: false,\r\n        amazon_fr: false,\r\n        amazon_it: false,\r\n        amazon_es: false,\r\n        amazon_nl: false,\r\n        amazon_co_jp: false,\r\n        amazon_in: false,\r\n        amazon_com_au: false,\r\n        amazon_sg: false,\r\n        amazon_ae: false,\r\n        amazon_com_tr: false,\r\n        amazon_com_mx: false,\r\n        amazon_com_br: false,\r\n        google_shopping: false\r\n      },\r\n      marketplaceItems: [],\r\n      removedMarketplace: [],\r\n      parsedData: {}\r\n    }\r\n  },\r\n  mixins: [vToasted, PermissionsMixin],\r\n  props: {\r\n    reportDoc: Object,\r\n    isValidMarketplace: Boolean\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`\r\n    }),\r\n    listUniqAmazonMarketplace() {\r\n      if (_.isEmpty(this.planConfig)) return []\r\n      let listAmazon = this.planConfig.allowed_amazon_marketplaces.map(item => {\r\n        return {\r\n          value: item,\r\n          text: _.upperFirst(item)\r\n        }\r\n      })\r\n      return _.sortBy(listAmazon, ['value'])\r\n    },\r\n    listUniqAllMarketplace() {\r\n      return _.concat(this.listUniqAmazonMarketplace, this.listUniqGoogleShoppingMarketplace)\r\n    },\r\n    amazonMarketPlaceList() {\r\n      return this.listUniqAmazonMarketplace.filter(\r\n        (item) =>\r\n          !this.marketplaceItems.find(\r\n            (mkItem) => mkItem.marketplace.value === item.value\r\n          )\r\n      )\r\n    },\r\n    googleShoppingMarketplaceList() {\r\n      return this.listUniqGoogleShoppingMarketplace.filter(\r\n        (item) =>\r\n          !this.marketplaceItems.find(\r\n            (mkItem) => mkItem.marketplace.value === item.value\r\n          )\r\n      )\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({}),\r\n    /* eslint-disable */\r\n    insertMarketplace(marketplace) {\r\n      const alreadyExist = _.find(this.marketplaceItems, function (o) {\r\n        return o.marketplace.value === marketplace\r\n      })\r\n      if (!alreadyExist) {\r\n        const marketplaceDoc = _.find(this.listUniqAllMarketplace, {\r\n          value: marketplace\r\n        })\r\n        this.marketplaceItems.push({\r\n          marketplace: marketplaceDoc,\r\n          report_name: '',\r\n          file_in_use: '',\r\n          date_started: '',\r\n          all_seller_mode: 'none',\r\n          action: false\r\n        })\r\n      }\r\n      this.autoEnableWhenSelectMarketplace(marketplace, true)\r\n    },\r\n    autoEnableWhenSelectMarketplace(marketplace, action) {\r\n      this.marketplaces[marketplace.replace(/[.]/g, '_')] = action\r\n    },\r\n    buildMarketplaceInfo(name, fileInUse, dateStarted, all_seller_mode) {\r\n      return {\r\n        name: name,\r\n        file_in_use: fileInUse,\r\n        date_started: dateStarted\r\n          ? moment(dateStarted).format('MM/DD/YYYY')\r\n          : '',\r\n        all_seller_mode: all_seller_mode\r\n      }\r\n    },\r\n    removeMarketplace(marketplace) {\r\n      this.marketplaceItems = _.remove(this.marketplaceItems, function (o) {\r\n        return o.marketplace.value !== marketplace\r\n      })\r\n      this.autoEnableWhenSelectMarketplace(marketplace, false)\r\n    },\r\n    isAmazonMarketplace(marketplace) {\r\n      return _.includes(marketplace, 'amazon')\r\n    },\r\n    getMarketplaceField(marketplace) {\r\n      return `marketplace_${marketplace.replace(/[.]/g, '_')}`\r\n    },\r\n    convertMarketplaceKeyToField(marketplace) {\r\n      return marketplace.replace(/[_]/g, '.')\r\n    },\r\n    findMarketplaceFromListUnique(marketplace) {\r\n      return _.find(this.listUniqAllMarketplace, (data) => {\r\n        if (this.isAmazonMarketplace(marketplace)) {\r\n          return data.value === this.convertMarketplaceKeyToField(marketplace)\r\n        } else if (this.isGoogleShoppingMarketplace(marketplace)) {\r\n          return data.value === MarketPlacesResult.GOOGLE_SHOPPING\r\n        }\r\n      })\r\n    },\r\n    isAmazonMarketplace(marketplace) {\r\n      return _.includes(marketplace, 'amazon')\r\n    },\r\n    isGoogleShoppingMarketplace(marketplace) {\r\n      return _.includes(marketplace, 'google')\r\n    },\r\n    syncMarketplaceItems(doc) {\r\n      if (!doc.marketplaces) {\r\n        return\r\n      }\r\n      const marketplaceKeys = _.keys(doc.marketplaces)\r\n      const values = _.values(MarketPlacesResult)\r\n      _.forEach(marketplaceKeys, (marketplaceKey) => {\r\n        const marketplaceField = _.includes(marketplaceKey, 'amazon')\r\n          ? this.convertMarketplaceKeyToField(marketplaceKey)\r\n          : marketplaceKey\r\n        if (\r\n          doc.marketplaces[marketplaceKey] &&\r\n          _.includes(values, marketplaceField)\r\n        ) {\r\n          this.marketplaces[marketplaceKey] = true\r\n          const marketplaceField = this.getMarketplaceField(marketplaceKey)\r\n          const marketplaceInfo = doc[marketplaceField]\r\n          if (marketplaceInfo) {\r\n            const {\r\n              name,\r\n              file_in_use,\r\n              date_started,\r\n              all_seller_mode\r\n            } = marketplaceInfo\r\n            this.marketplaceItems.push({\r\n              marketplace: this.findMarketplaceFromListUnique(marketplaceKey),\r\n              report_name: name,\r\n              file_in_use: file_in_use,\r\n              date_started: date_started,\r\n              action: '',\r\n              all_seller_mode: all_seller_mode || 'none'\r\n            })\r\n          } else {\r\n            this.marketplaceItems.push({\r\n              marketplace: this.findMarketplaceFromListUnique(marketplaceKey),\r\n              report_name: '',\r\n              file_in_use: '',\r\n              date_started: '',\r\n              action: '',\r\n              all_seller_mode: all_seller_mode || 'none'\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    convertData() {\r\n      _.forEach(this.marketplaceItems, (marketplaceItem) => {\r\n        const marketplaceInfo = this.getMarketplaceField(\r\n          marketplaceItem.marketplace.value\r\n        )\r\n        const {\r\n          report_name,\r\n          file_in_use,\r\n          date_started,\r\n          all_seller_mode\r\n        } = marketplaceItem\r\n        _.assign(this.parsedData, {\r\n          [marketplaceInfo]: this.buildMarketplaceInfo(\r\n            report_name,\r\n            file_in_use,\r\n            date_started,\r\n            all_seller_mode\r\n          )\r\n        })\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    const marketplaceValues = _.values(MarketPlacesResult)\r\n    _.forEach(marketplaceValues, (marketplaceValue) => {\r\n      if (_.includes(marketplaceValue, 'google')) {\r\n        this.listUniqGoogleShoppingMarketplace.push({\r\n          value: marketplaceValue,\r\n          text: 'Google Shopping'\r\n        })\r\n      }\r\n    })\r\n    if (this.reportDoc) {\r\n      this.syncMarketplaceItems(this.reportDoc)\r\n      // this.$watch('reportDoc', (val) =>\r\n      //   {\r\n      //     this.marketplaceItems = []\r\n      //     this.syncMarketplaceItems(val)\r\n      //   }\r\n      // )\r\n    }\r\n  },\r\n  validations: {\r\n    marketplaceItems: {\r\n      required,\r\n      $each: {\r\n        report_name: {\r\n          required\r\n        }\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    VueTagsInput,\r\n    Datepicker\r\n  },\r\n  watch: {\r\n    marketplaceItems: {\r\n      deep: true,\r\n      handler(val) {\r\n        this.convertData()\r\n        this.$emit('marketplaceChange', {\r\n          parsedData: this.parsedData,\r\n          marketplaces: this.marketplaces\r\n        })\r\n      }\r\n    },\r\n    reportDoc: {\r\n      handler(val) {\r\n        this.marketplaceItems = []\r\n        this.syncMarketplaceItems(val)\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}