{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\reports\\List.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\reports\\List.vue","mtime":1639556629258},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import { shuffleArray } from '@/shared/utils'\r\n// import TableContent from './TableContent' // use this for system mode handle job is report based job\r\nimport TableContent from './TableReportMapJob' // use this for system mode handle job mode map based job\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport vToasted from '@/shared/notification'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport _nav from '@/_nav'\r\nimport action from '@/service/activity'\r\n\r\nexport default {\r\n  name: 'tables',\r\n  components: { TableContent },\r\n  mixins: [vToasted, PermissionsMixin],\r\n  data() {\r\n    return {\r\n      fields: {},\r\n      nav: _nav\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      reports: `mw/reports/${TYPE.GET_LIST_REPORTS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      organizationStats: `mw/${TYPE.GET_ORGANIZATION_STATS}`,\r\n      reportLoading: `mw/reports/${TYPE.GET_REPORT_LOADING}`\r\n    }),\r\n    remainingSlotsReport() {\r\n      if (this.organizationStats['reports_used'] > this.planConfig['plan_max_of_reports']) {\r\n        return parseInt(this.organizationStats['reports_used'] - this.planConfig['plan_max_of_reports'])\r\n      }\r\n      return false\r\n    },\r\n    remainingSlotsReportAmazon() {\r\n      if (this.organizationStats['reports_with_amazon_used'] > this.planConfig['plan_max_of_reports_with_amazon']) {\r\n        return parseInt(this.organizationStats['reports_with_amazon_used'] - this.planConfig['plan_max_of_reports_with_amazon'])\r\n      }\r\n      return false\r\n    },\r\n    remainingSlotsReportGoogleShopping() {\r\n      if (this.organizationStats['reports_with_google_shopping_used'] > this.planConfig['plan_max_of_reports_with_google_shopping']) {\r\n        return parseInt(this.organizationStats['reports_with_google_shopping_used'] - this.planConfig['plan_max_of_reports_with_google_shopping'])\r\n      }\r\n      return false\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchReports: `mw/reports/${TYPE.FETCH_LIST_REPORTS}`,\r\n      removeReport: `mw/reports/${TYPE.REMOVE_REPORTS}`,\r\n      runAReport: `mw/reports/${TYPE.RUN_A_REPORT}`,\r\n      // forceRunAReport: `mw/reports/${TYPE.FORCE_RUN_A_REPORT}`,\r\n      downloadJobById: `mw/reports/${TYPE.REMOTE_GET_LINK_DOWNLOAD_JOB}`,\r\n      onSeach: `mw/reports/${TYPE.REMOTE_SEARCH_REPORTS}`,\r\n      onSort: `mw/reports/${TYPE.REMOTE_SORT_REPORTS}`,\r\n      resetReports: `mw/reports/${TYPE.RESET_REPORTS}`\r\n    }),\r\n    handleEditReport(data) {\r\n      this.$router.push({\r\n        name: 'MWEditReports',\r\n        params: { client_id: this.nav.clientId, id: data._id },\r\n        query: { name: data.name_in_dashboard }\r\n      })\r\n    },\r\n    loadData(params = {}) {\r\n      this.fetchReports(params)\r\n      this.$router.push({\r\n        query: {\r\n          s: params.s,\r\n          limit: params.limit ? params.limit : '10',\r\n          page: params.page ? params.page : '1',\r\n          sort_by: params.sort_by ? params.sort_by : 'name_in_dashboard',\r\n          sort_dir: params.sort_dir ? params.sort_dir : 'asc'\r\n        }\r\n      })\r\n    },\r\n    async handleRemoveReport(data) {\r\n      try {\r\n        await this.removeReport(data.id)\r\n        this.vToasted('success', `Report ${data.name} has been deleted successfully`)\r\n        this.$refs.tableContentReport.checkCondition()\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n    async handleRunAReport(e, runOptions) {\r\n      try {\r\n        console.log('e ', e)\r\n        console.log('runOptions ', runOptions)\r\n        await this.runAReport({ id: e._id, runOptions: runOptions })\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n    },\r\n    trackDownload(data) {\r\n      let payload = {\r\n        client_id: data.client_id,\r\n        report_name: data.name_in_dashboard,\r\n        report_id: data.id\r\n      }\r\n      action.downloadAction(payload)\r\n    },\r\n    async handleExportForJob(item, index, marketplace, indexActiveMarketplaces, source) {\r\n      this.trackDownload(item)\r\n      try {\r\n        this.$set(this.reports.items[index].activeMarketplaces[indexActiveMarketplaces].info, 'isLoad', true)\r\n        const res = await this.downloadJobById({ id: item._id, marketplace: marketplace, source: source })\r\n        window.location.href = res.uri\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      } finally {\r\n        this.$set(this.reports.items[index].activeMarketplaces[indexActiveMarketplaces].info, 'isLoad', false)\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    let params = {\r\n      s: this.$route.query.s ? this.$route.query.s : '',\r\n      limit: this.$route.query.limit ? this.$route.query.limit : 10,\r\n      page: this.$route.query.page ? this.$route.query.page : 1,\r\n      sort_by: this.$route.query.sort_by ? this.$route.query.sort_by : 'name_in_dashboard',\r\n      sort_dir: this.$route.query.sort_dir ? this.$route.query.sort_dir : 'asc'\r\n    }\r\n    this.loadData(params)\r\n    this.fields = [\r\n      {\r\n        key: 'name_in_dashboard',\r\n        label: 'Report Name',\r\n        sortable: true,\r\n        sortDirection: 'desc',\r\n        tdClass: 'align-middle'\r\n      },\r\n      {\r\n        key: 'active',\r\n        label: 'Active',\r\n        thClass: 'at-50 text-center align-middle',\r\n        tdClass: 'text-center mw-checkbox-active align-middle'\r\n      },\r\n      {\r\n        key: 'status',\r\n        label: 'Status',\r\n        thClass: 'text-center align-middle',\r\n        tdClass: 'text-center align-middle'\r\n      },\r\n      {\r\n        key: 'updated',\r\n        label: 'Modified',\r\n        thClass: 'md-120 text-center align-middle',\r\n        tdClass: 'align-middle text-center',\r\n        sortable: true\r\n      },\r\n      {\r\n        key: 'actions',\r\n        label: 'Actions',\r\n        thClass: 'text-center align-middle',\r\n        tdClass: 'col-manage align-middle text-center'\r\n      }\r\n    ]\r\n  },\r\n  beforeDestroy() {\r\n    this.resetReports()\r\n  }\r\n}\r\n",{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"List.vue","sourceRoot":"src/components/page/reports","sourcesContent":["<template>\r\n  <div class=\"animated fadeIn\">\r\n    <b-row>\r\n      <b-col lg=\"12\">\r\n        <div class=\"warning-plan\">\r\n          <b-alert v-if=\"remainingSlotsReport\" show dismissible variant=\"warning\">Your plan allows <strong>{{planConfig['plan_max_of_reports'] | formatNumber}}</strong> {{ 'report' | pluralize(planConfig['plan_max_of_reports'])}} but you have <strong>{{organizationStats['reports_used'] | formatNumber}}</strong> active {{ 'one' | pluralize(organizationStats['reports_used'])}}. Please consider removing the unnecessary ones or we will randomly disable data processing for your <strong>{{remainingSlotsReport | formatNumber}}</strong> {{ 'one' | pluralize(remainingSlotsReport)}}.</b-alert>\r\n          <b-alert v-if=\"remainingSlotsReportAmazon\" show dismissible variant=\"warning\">Your plan allows <strong>{{planConfig['plan_max_of_reports_with_amazon'] | formatNumber}}</strong> Amazon {{ 'report' | pluralize(planConfig['plan_max_of_reports_with_amazon'])}} but you have <strong>{{ organizationStats['reports_with_amazon_used']| formatNumber}}</strong> active {{ 'one' | pluralize(organizationStats['reports_with_amazon_used'])}}. Please consider removing the unnecessary ones or we will randomly disable data processing for your <strong>{{remainingSlotsReportAmazon | formatNumber}}</strong> {{ 'one' | pluralize(remainingSlotsReportAmazon)}}.</b-alert>\r\n          <b-alert v-if=\"remainingSlotsReportGoogleShopping\" show dismissible variant=\"warning\">Your plan allows <strong>{{planConfig['plan_max_of_reports_with_google_shopping'] | formatNumber}}</strong> Google Shopping {{ 'report' | pluralize(planConfig['plan_max_of_reports_with_google_shopping'])}} but you have <strong>{{organizationStats['reports_with_google_shopping_used'] | formatNumber}}</strong> active {{ 'one' | pluralize(organizationStats['reports_with_google_shopping_used'])}}. Please consider removing the unnecessary ones or we will randomly disable data processing for your <strong>{{remainingSlotsReportGoogleShopping | formatNumber}}</strong> {{ 'one' | pluralize(remainingSlotsReportGoogleShopping)}}.</b-alert>\r\n        </div>\r\n        <table-content\r\n          ref=\"tableContentReport\"\r\n          :fields=\"fields\"\r\n          fixed\r\n          bordered\r\n          striped\r\n          :hover=\"true\"\r\n          :caption=\"$route.meta.tableName\"\r\n          :removeReports=\"handleRemoveReport\"\r\n          :handleEditReport=\"handleEditReport\"\r\n          :handleRun=\"handleRunAReport\"\r\n          :dataSet=\"reports\"\r\n          :handleExportForJob=\"handleExportForJob\"\r\n          @paramsChange=\"loadData\"\r\n          :reportLoading=\"reportLoading\"\r\n        ></table-content>\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import { shuffleArray } from '@/shared/utils'\r\n// import TableContent from './TableContent' // use this for system mode handle job is report based job\r\nimport TableContent from './TableReportMapJob' // use this for system mode handle job mode map based job\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport vToasted from '@/shared/notification'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport _nav from '@/_nav'\r\nimport action from '@/service/activity'\r\n\r\nexport default {\r\n  name: 'tables',\r\n  components: { TableContent },\r\n  mixins: [vToasted, PermissionsMixin],\r\n  data() {\r\n    return {\r\n      fields: {},\r\n      nav: _nav\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      reports: `mw/reports/${TYPE.GET_LIST_REPORTS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      organizationStats: `mw/${TYPE.GET_ORGANIZATION_STATS}`,\r\n      reportLoading: `mw/reports/${TYPE.GET_REPORT_LOADING}`\r\n    }),\r\n    remainingSlotsReport() {\r\n      if (this.organizationStats['reports_used'] > this.planConfig['plan_max_of_reports']) {\r\n        return parseInt(this.organizationStats['reports_used'] - this.planConfig['plan_max_of_reports'])\r\n      }\r\n      return false\r\n    },\r\n    remainingSlotsReportAmazon() {\r\n      if (this.organizationStats['reports_with_amazon_used'] > this.planConfig['plan_max_of_reports_with_amazon']) {\r\n        return parseInt(this.organizationStats['reports_with_amazon_used'] - this.planConfig['plan_max_of_reports_with_amazon'])\r\n      }\r\n      return false\r\n    },\r\n    remainingSlotsReportGoogleShopping() {\r\n      if (this.organizationStats['reports_with_google_shopping_used'] > this.planConfig['plan_max_of_reports_with_google_shopping']) {\r\n        return parseInt(this.organizationStats['reports_with_google_shopping_used'] - this.planConfig['plan_max_of_reports_with_google_shopping'])\r\n      }\r\n      return false\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchReports: `mw/reports/${TYPE.FETCH_LIST_REPORTS}`,\r\n      removeReport: `mw/reports/${TYPE.REMOVE_REPORTS}`,\r\n      runAReport: `mw/reports/${TYPE.RUN_A_REPORT}`,\r\n      // forceRunAReport: `mw/reports/${TYPE.FORCE_RUN_A_REPORT}`,\r\n      downloadJobById: `mw/reports/${TYPE.REMOTE_GET_LINK_DOWNLOAD_JOB}`,\r\n      onSeach: `mw/reports/${TYPE.REMOTE_SEARCH_REPORTS}`,\r\n      onSort: `mw/reports/${TYPE.REMOTE_SORT_REPORTS}`,\r\n      resetReports: `mw/reports/${TYPE.RESET_REPORTS}`\r\n    }),\r\n    handleEditReport(data) {\r\n      this.$router.push({\r\n        name: 'MWEditReports',\r\n        params: { client_id: this.nav.clientId, id: data._id },\r\n        query: { name: data.name_in_dashboard }\r\n      })\r\n    },\r\n    loadData(params = {}) {\r\n      this.fetchReports(params)\r\n      this.$router.push({\r\n        query: {\r\n          s: params.s,\r\n          limit: params.limit ? params.limit : '10',\r\n          page: params.page ? params.page : '1',\r\n          sort_by: params.sort_by ? params.sort_by : 'name_in_dashboard',\r\n          sort_dir: params.sort_dir ? params.sort_dir : 'asc'\r\n        }\r\n      })\r\n    },\r\n    async handleRemoveReport(data) {\r\n      try {\r\n        await this.removeReport(data.id)\r\n        this.vToasted('success', `Report ${data.name} has been deleted successfully`)\r\n        this.$refs.tableContentReport.checkCondition()\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n    async handleRunAReport(e, runOptions) {\r\n      try {\r\n        console.log('e ', e)\r\n        console.log('runOptions ', runOptions)\r\n        await this.runAReport({ id: e._id, runOptions: runOptions })\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n    },\r\n    trackDownload(data) {\r\n      let payload = {\r\n        client_id: data.client_id,\r\n        report_name: data.name_in_dashboard,\r\n        report_id: data.id\r\n      }\r\n      action.downloadAction(payload)\r\n    },\r\n    async handleExportForJob(item, index, marketplace, indexActiveMarketplaces, source) {\r\n      this.trackDownload(item)\r\n      try {\r\n        this.$set(this.reports.items[index].activeMarketplaces[indexActiveMarketplaces].info, 'isLoad', true)\r\n        const res = await this.downloadJobById({ id: item._id, marketplace: marketplace, source: source })\r\n        window.location.href = res.uri\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      } finally {\r\n        this.$set(this.reports.items[index].activeMarketplaces[indexActiveMarketplaces].info, 'isLoad', false)\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    let params = {\r\n      s: this.$route.query.s ? this.$route.query.s : '',\r\n      limit: this.$route.query.limit ? this.$route.query.limit : 10,\r\n      page: this.$route.query.page ? this.$route.query.page : 1,\r\n      sort_by: this.$route.query.sort_by ? this.$route.query.sort_by : 'name_in_dashboard',\r\n      sort_dir: this.$route.query.sort_dir ? this.$route.query.sort_dir : 'asc'\r\n    }\r\n    this.loadData(params)\r\n    this.fields = [\r\n      {\r\n        key: 'name_in_dashboard',\r\n        label: 'Report Name',\r\n        sortable: true,\r\n        sortDirection: 'desc',\r\n        tdClass: 'align-middle'\r\n      },\r\n      {\r\n        key: 'active',\r\n        label: 'Active',\r\n        thClass: 'at-50 text-center align-middle',\r\n        tdClass: 'text-center mw-checkbox-active align-middle'\r\n      },\r\n      {\r\n        key: 'status',\r\n        label: 'Status',\r\n        thClass: 'text-center align-middle',\r\n        tdClass: 'text-center align-middle'\r\n      },\r\n      {\r\n        key: 'updated',\r\n        label: 'Modified',\r\n        thClass: 'md-120 text-center align-middle',\r\n        tdClass: 'align-middle text-center',\r\n        sortable: true\r\n      },\r\n      {\r\n        key: 'actions',\r\n        label: 'Actions',\r\n        thClass: 'text-center align-middle',\r\n        tdClass: 'col-manage align-middle text-center'\r\n      }\r\n    ]\r\n  },\r\n  beforeDestroy() {\r\n    this.resetReports()\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n.mw-160 {\r\n  width: 160px;\r\n}\r\n.at-50 {\r\n  width: 50px;\r\n}\r\n.mkp-170 {\r\n  width: 170px;\r\n}\r\n.md-120 {\r\n  width: 120px;\r\n}\r\n</style>\r\n"]}]}