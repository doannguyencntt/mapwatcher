{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Contacts.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Contacts.vue","mtime":1639556629327},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required, email } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport _nav from '@/_nav'\r\n\r\nexport default {\r\n  name: 'MWSellerEnforcementContacts',\r\n  data() {\r\n    return {\r\n      contacts: [],\r\n      canShowErr: false,\r\n      fields: [\r\n        {\r\n          key: 'email',\r\n          label: 'Email Address',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'contact_name',\r\n          label: 'Contact Name',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'job_title',\r\n          label: 'Job Title',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'actions',\r\n          label: '',\r\n          class: 'text-right'\r\n        }\r\n      ],\r\n      nav: _nav,\r\n      deleteContactData: null,\r\n      originalContacts: []\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  methods: {\r\n    ...mapActions({\r\n      getOneSeller: `mw/sellerEnforcements/${TYPE.GET_ONE_SELLER_ENFORCEMENT}`,\r\n      remoteEditSeller: `mw/sellerEnforcements/${TYPE.REMOTE_EDIT_SELLER_ENFORCEMENT}`\r\n    }),\r\n    removeRowAt(contact) {\r\n      this.contacts = _.filter(this.contacts, function(o) { return o.index !== contact.index })\r\n      this.$bvModal.hide('delete-confirm')\r\n    },\r\n    editRowAt(contact) {\r\n      const updatedContact = this.contacts[contact.index]\r\n      updatedContact.action = 'edit'\r\n      this.$set(this.contacts, contact.index, updatedContact)\r\n    },\r\n    addNewRow() {\r\n      this.contacts.push({\r\n        email: '',\r\n        contact_name: '',\r\n        job_title: '',\r\n        action: 'edit',\r\n        index: this.contacts.length\r\n      })\r\n      this.canShowErr = false\r\n    },\r\n    async saveContacts() {\r\n      this.canShowErr = true\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        return\r\n      }\r\n      try {\r\n        const dataSet = _.map(this.contacts, (contact) => {\r\n          return {\r\n            email: contact.email,\r\n            contact_name: contact.contact_name,\r\n            job_title: contact.job_title\r\n          }\r\n        })\r\n        await this.remoteEditSeller({ params: { contacts: dataSet }, id: this.seller.id })\r\n        this.vToasted('success', `Seller ${this.seller.name} has been updated successfully.`)\r\n        this.contacts = _.map(this.contacts, (contact) => {\r\n          contact.action = 'done'\r\n          return contact\r\n        })\r\n        this.originalContacts = _.cloneDeep(this.contacts)\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n      this.canShowErr = false\r\n    },\r\n    backToListSeller() {\r\n      this.$router.push({ name: 'MWListSellerEnforcements', params: { client_id: this.nav.clientId } })\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`\r\n    }),\r\n    isContactChanged() {\r\n      let checkContacts = _.differenceWith(this.contacts, this.originalContacts, _.isEqual)\r\n      let checkOriginContacts = _.differenceWith(this.originalContacts, this.contacts, _.isEqual)\r\n      return _.isEmpty(checkContacts) && _.isEmpty(checkOriginContacts)\r\n    }\r\n  },\r\n  async created() {\r\n    if (!this.$route.params.id) {\r\n      this.backToListSeller()\r\n      return\r\n    }\r\n    try {\r\n      const seller = await this.getOneSeller(this.$route.params.id)\r\n      this.contacts = seller.contacts\r\n      this.originalContacts = _.cloneDeep(seller.contacts)\r\n      this.seller = seller\r\n      const _this = this\r\n      _.each(this.contacts, function(contact, i) {\r\n        _this.contacts[i].index = i\r\n        _this.contacts[i].action = 'done'\r\n      })\r\n    } catch (error) {\r\n      this.vToasted('error', `Seller ${this.$route.params.id} not exist`)\r\n      this.backToListSeller()\r\n    }\r\n  },\r\n  validations: {\r\n    contacts: {\r\n      $each: {\r\n        email: { required, email },\r\n        contact_name: { required },\r\n        job_title: { required },\r\n        action: { required }\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Contacts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Contacts.vue","sourceRoot":"src/components/page/sellerEnforcements","sourcesContent":["<template>\r\n  <div class=\"animated fadeIn\">\r\n    <b-card>\r\n      <!-- header -->\r\n      <template v-slot:header>\r\n        <div class=\"d-flex justify-content-between align-items-center\">\r\n          <span><strong>{{$route.meta.tableName}}</strong></span>\r\n          <div class=\"card-header-actions\">\r\n            <div class=\"btn-close\">\r\n              <b-button variant=\"secondary\" class=\"btn btn-block\" size=\"sm\" @click=\"backToListSeller()\"> <i class=\"icon-arrow-left-circle icons\"></i> Back </b-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </template>\r\n      <table class=\"table b-table table-striped table-hover border\">\r\n        <thead class=\"thead-light\">\r\n        <tr>\r\n          <th v-for=\"field in fields\" :class=\"field.class\" :key=\"field.key\">{{ field.label }}</th>\r\n        </tr>\r\n        </thead>\r\n        <tfoot>\r\n          <tr>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td class=\"text-right\">\r\n              <button class=\"btn btn-success btn-sm save-button\" @click=\"saveContacts()\" :disabled=\"!getPermissions.module_enabled || !getPermissions.permissions.seedit || isContactChanged\">\r\n                <i class=\"fa fa-check\" aria-hidden=\"true\" ></i> Save\r\n              </button>\r\n              <button class=\"btn btn-primary btn-sm ml-2\" @click=\"addNewRow()\" :disabled=\"!getPermissions.module_enabled || !getPermissions.permissions.seedit\">\r\n                <i class=\"icons icon-plus\"></i> Add more\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n        <tbody class=\"text-center\" v-if=\"contacts.length > 0\">\r\n          <tr v-for=\"(data, index) in contacts\" :key=\"data.index\" >\r\n            <td class=\"text-left\">\r\n              <span v-if=\"data.action === 'done'\">{{ data.email }}</span>\r\n              <b-form-input v-if=\"data.action === 'edit'\"  type=\"text\" v-model=\"data.email\"\r\n                :class=\"{'is-invalid': canShowErr && ($v.contacts.$each[index].email.$invalid || $v.contacts.$each[index].email.$anyError)}\">\r\n              ></b-form-input>\r\n              <div class=\"mw-error\" v-if=\"canShowErr && ($v.contacts.$each[index].email.$invalid || $v.contacts.$each[index].email.$anyError)\">Email is invalid!</div>\r\n            </td>\r\n            <td class=\"text-left\">\r\n              <span v-if=\"data.action === 'done'\">{{ data.contact_name }}</span>\r\n              <b-form-input v-if=\"data.action === 'edit'\" type=\"text\" v-model=\"data.contact_name\"\r\n                :class=\"{'is-invalid': canShowErr && ($v.contacts.$each[index].contact_name.$invalid || $v.contacts.$each[index].contact_name.$anyError)}\">\r\n              ></b-form-input>\r\n              <div class=\"mw-error\" v-if=\"canShowErr && ($v.contacts.$each[index].contact_name.$invalid || $v.contacts.$each[index].contact_name.$anyError)\">Contact Name is required!</div>\r\n            </td>\r\n            <td class=\"text-left\">\r\n              <span v-if=\"data.action === 'done'\">{{ data.job_title }}</span>\r\n              <b-form-input v-if=\"data.action === 'edit'\" type=\"text\" v-model=\"data.job_title\"\r\n                :class=\"{'is-invalid': canShowErr && ($v.contacts.$each[index].job_title.$invalid || $v.contacts.$each[index].job_title.$anyError)}\">\r\n              ></b-form-input>\r\n              <div class=\"mw-error\" v-if=\"canShowErr && ($v.contacts.$each[index].job_title.$invalid || $v.contacts.$each[index].job_title.$anyError)\">Job Title is required!</div>\r\n            </td>\r\n            <td class=\"text-right\">\r\n              <button v-if=\"getPermissions.module_enabled && getPermissions.permissions.seedit\" class=\"btn btn-success ml-2 btn-sm\" @click=\"editRowAt(data)\" :disabled=\"data.action === 'edit'\"><i class=\"icon-note \"></i><span class=\"ml-1\">Edit</span></button>\r\n              <button v-if=\"getPermissions.module_enabled && getPermissions.permissions.sedelete\" class=\"btn btn-danger ml-2 btn-sm\" @click=\"deleteContactData = data\" v-b-modal.delete-confirm><i class=\"icon-close \"></i><span class=\"ml-1\">Delete</span></button>\r\n             </td>\r\n          </tr>\r\n        </tbody>\r\n        <tbody v-else>\r\n          <tr>\r\n            <td colspan=\"4\" class=\"text-center\">\r\n              No contacts\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <b-modal id=\"delete-confirm\" variant=\"danger\" centered title=\"Please confirm\">\r\n        <p>Are you sure you want to delete this contact?</p>\r\n        <template v-slot:modal-footer>\r\n          <b-button variant=\"warning\" @click=\"removeRowAt(deleteContactData)\">\r\n            <i class=\"icon-check\"></i> Yes, I understand &amp; confirm!\r\n          </b-button>\r\n          <b-button variant @click=\"$bvModal.hide('delete-confirm')\">\r\n            <i class=\"icon-close\"></i> No\r\n          </b-button>\r\n        </template>\r\n      </b-modal>\r\n    </b-card>\r\n  </div>\r\n</template>\r\n<script>\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required, email } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport _nav from '@/_nav'\r\n\r\nexport default {\r\n  name: 'MWSellerEnforcementContacts',\r\n  data() {\r\n    return {\r\n      contacts: [],\r\n      canShowErr: false,\r\n      fields: [\r\n        {\r\n          key: 'email',\r\n          label: 'Email Address',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'contact_name',\r\n          label: 'Contact Name',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'job_title',\r\n          label: 'Job Title',\r\n          class: 'text-left'\r\n        },\r\n        {\r\n          key: 'actions',\r\n          label: '',\r\n          class: 'text-right'\r\n        }\r\n      ],\r\n      nav: _nav,\r\n      deleteContactData: null,\r\n      originalContacts: []\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  methods: {\r\n    ...mapActions({\r\n      getOneSeller: `mw/sellerEnforcements/${TYPE.GET_ONE_SELLER_ENFORCEMENT}`,\r\n      remoteEditSeller: `mw/sellerEnforcements/${TYPE.REMOTE_EDIT_SELLER_ENFORCEMENT}`\r\n    }),\r\n    removeRowAt(contact) {\r\n      this.contacts = _.filter(this.contacts, function(o) { return o.index !== contact.index })\r\n      this.$bvModal.hide('delete-confirm')\r\n    },\r\n    editRowAt(contact) {\r\n      const updatedContact = this.contacts[contact.index]\r\n      updatedContact.action = 'edit'\r\n      this.$set(this.contacts, contact.index, updatedContact)\r\n    },\r\n    addNewRow() {\r\n      this.contacts.push({\r\n        email: '',\r\n        contact_name: '',\r\n        job_title: '',\r\n        action: 'edit',\r\n        index: this.contacts.length\r\n      })\r\n      this.canShowErr = false\r\n    },\r\n    async saveContacts() {\r\n      this.canShowErr = true\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        return\r\n      }\r\n      try {\r\n        const dataSet = _.map(this.contacts, (contact) => {\r\n          return {\r\n            email: contact.email,\r\n            contact_name: contact.contact_name,\r\n            job_title: contact.job_title\r\n          }\r\n        })\r\n        await this.remoteEditSeller({ params: { contacts: dataSet }, id: this.seller.id })\r\n        this.vToasted('success', `Seller ${this.seller.name} has been updated successfully.`)\r\n        this.contacts = _.map(this.contacts, (contact) => {\r\n          contact.action = 'done'\r\n          return contact\r\n        })\r\n        this.originalContacts = _.cloneDeep(this.contacts)\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n      this.canShowErr = false\r\n    },\r\n    backToListSeller() {\r\n      this.$router.push({ name: 'MWListSellerEnforcements', params: { client_id: this.nav.clientId } })\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`\r\n    }),\r\n    isContactChanged() {\r\n      let checkContacts = _.differenceWith(this.contacts, this.originalContacts, _.isEqual)\r\n      let checkOriginContacts = _.differenceWith(this.originalContacts, this.contacts, _.isEqual)\r\n      return _.isEmpty(checkContacts) && _.isEmpty(checkOriginContacts)\r\n    }\r\n  },\r\n  async created() {\r\n    if (!this.$route.params.id) {\r\n      this.backToListSeller()\r\n      return\r\n    }\r\n    try {\r\n      const seller = await this.getOneSeller(this.$route.params.id)\r\n      this.contacts = seller.contacts\r\n      this.originalContacts = _.cloneDeep(seller.contacts)\r\n      this.seller = seller\r\n      const _this = this\r\n      _.each(this.contacts, function(contact, i) {\r\n        _this.contacts[i].index = i\r\n        _this.contacts[i].action = 'done'\r\n      })\r\n    } catch (error) {\r\n      this.vToasted('error', `Seller ${this.$route.params.id} not exist`)\r\n      this.backToListSeller()\r\n    }\r\n  },\r\n  validations: {\r\n    contacts: {\r\n      $each: {\r\n        email: { required, email },\r\n        contact_name: { required },\r\n        job_title: { required },\r\n        action: { required }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n::v-deep .card-header-actions {\r\n  margin-right: 0;\r\n}\r\n::v-deep .form-control:focus {\r\n  box-shadow: none;\r\n  border-color: #e4e7ea;\r\n}\r\n::v-deep .tag-input {\r\n  border-top: 0px;\r\n  border-top-left-radius: 0px;\r\n  border-top-right-radius: 0px;\r\n}\r\n.textarea {\r\n  overflow-y: auto !important;\r\n}\r\n::v-deep .mw-vue-tags-custom .ti-input {\r\n  border-bottom-right-radius: 0px;\r\n  border-bottom-left-radius: 0px;\r\n  height: auto !important;\r\n}\r\n.component-label {\r\n  min-width: 55px;\r\n}\r\n.custom-datepicker-control {\r\n  &::v-deep {\r\n    button.btn {\r\n      width: 83px;\r\n    }\r\n    .vdp-datepicker {\r\n      width: calc(100% - 83px);\r\n      margin-right: 0 !important;\r\n    }\r\n  }\r\n}\r\n.custom-width {\r\n  width: 100%;\r\n  max-width: 70%;\r\n}\r\n.save-button {\r\n  margin-left: 22.5px;\r\n}\r\n</style>\r\n"]}]}