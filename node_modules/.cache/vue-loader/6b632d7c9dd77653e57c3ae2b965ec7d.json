{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Add.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerEnforcements\\Add.vue","mtime":1626264502287},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { ClipboardUtil } from 'plat-sdk/dist/clipboard'\r\nimport _ from 'lodash'\r\nimport { mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required, email } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport { SellerEnforcementFrequencyType } from '@/constants/SellerEnforcement'\r\nimport { FormType } from '@/constants/Form.js'\r\n\r\nimport _nav from '@/_nav'\r\n\r\nexport default {\r\n  name: 'MWAddSellerEnforcements',\r\n  data() {\r\n    return {\r\n      sellerEnforcementFrequencyType: _.cloneDeep(\r\n        SellerEnforcementFrequencyType\r\n      ),\r\n      frequency_options: [\r\n        {\r\n          value: SellerEnforcementFrequencyType.MANUAL,\r\n          text: _.upperFirst(SellerEnforcementFrequencyType.MANUAL)\r\n        },\r\n        {\r\n          value: SellerEnforcementFrequencyType.DAILY,\r\n          text: _.upperFirst(SellerEnforcementFrequencyType.DAILY)\r\n        }\r\n      ],\r\n      dataSet: {\r\n        sender_email: '',\r\n        sender_name: '',\r\n        name: '',\r\n        frequency: SellerEnforcementFrequencyType.MANUAL\r\n      },\r\n      nav: _nav,\r\n      check: true\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  methods: {\r\n    ...mapActions({\r\n      remotePostSeller: `mw/sellerEnforcements/${TYPE.REMOTE_POST_SELLER_ENFORCEMENT}`\r\n    }),\r\n    async handleSave() {\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log(this.$v.dataSet)\r\n        return\r\n      }\r\n      try {\r\n        const selerEnforcementData = _.pickBy(this.dataSet, _.identity)\r\n        await this.remotePostSeller(selerEnforcementData)\r\n        this.backToListSeller()\r\n        this.vToasted('success', 'A new seller has been created successfully.')\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n    backToListSeller() {\r\n      this.$router.push({\r\n        name: 'MWListSellerEnforcements',\r\n        params: { client_id: this.nav.clientId }\r\n      })\r\n    },\r\n\r\n    handleCopyRecord() {\r\n      ClipboardUtil.copy(_.cloneDeep(this.dataSet), FormType.SELLER)\r\n      this.vToasted('success', 'Copied to clipboard.')\r\n      this.checkKey()\r\n    },\r\n\r\n    async handlePasteRecord() {\r\n      try {\r\n        const pasteData = await ClipboardUtil.paste(\r\n          _.cloneDeep(this.dataSet),\r\n          FormType.SELLER\r\n        )\r\n\r\n        // validate if key not match\r\n        if (!pasteData) {\r\n          this.vToasted('error', 'You need to enable copy to clipboard')\r\n          return\r\n        }\r\n\r\n        this.dataSet = {\r\n          ...pasteData\r\n        }\r\n\r\n        this.vToasted('success', 'Paste successfully')\r\n      } catch (e) {\r\n        this.vToasted('error', 'Your copy is not valid')\r\n      }\r\n    },\r\n\r\n    async checkKey() {\r\n      const result = await ClipboardUtil.check(FormType.SELLER)\r\n\r\n      this.check = !result\r\n    }\r\n  },\r\n  computed: {\r\n    isCopySupport() {\r\n      return ClipboardUtil.isCopySupported()\r\n    }\r\n  },\r\n  created() {\r\n    this.checkKey()\r\n    window.addEventListener('focus', this.checkKey)\r\n  },\r\n  destroyed() {\r\n    window.removeEventListener('focus', this.checkKey)\r\n  },\r\n  validations: {\r\n    dataSet: {\r\n      sender_email: {\r\n        email\r\n      },\r\n      sender_name: {},\r\n      name: {\r\n        required\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}