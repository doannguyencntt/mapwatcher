{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerDashboard\\DashboardIndex.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellerDashboard\\DashboardIndex.vue","mtime":1638523541251},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _nav from '@/_nav'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport config from './sdk-configs/mainTabConfig'\r\nimport reportLogo from '@/assets/img/report-demo.jpg'\r\n\r\nexport default {\r\n  name: 'MWSellerDashboardIndex',\r\n  components: {\r\n  },\r\n  data: () => ({\r\n    share_token: null,\r\n    sdkConfigInitialized: false,\r\n    nav: _nav,\r\n    isLoading: true\r\n  }),\r\n  methods: {\r\n    ...mapActions({\r\n      mainConfig: `mw/dashboard/${TYPE.GET_DATA_CONFIG_VIOLATOR}`,\r\n      remoteFetchSetting: `mw/settings/${TYPE.FETCH_SETTING}`,\r\n      fetchCompliedActiveRogue: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_COMPLIED_ACTIVE_ROGUE}`,\r\n      fetchCompletion: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_COMPLETION}`,\r\n      fetchGmr: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_GMR}`,\r\n      fetchArbitrage: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_ARBITRAGE}`,\r\n      fetchTotalListing: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_TOTAL_LISTING}`,\r\n      fetchSellerStatus: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_SELLER_STATUS}`\r\n    }),\r\n    keepShareTokenForQuery(query) {\r\n      if (this.share_token) {\r\n        _.assign(query, { share_token: this.share_token })\r\n      }\r\n      return query\r\n    },\r\n    initMainDataSource() {\r\n      window.ms_dashboard_seller_main_config = config\r\n    },\r\n    async updateSIDashboardTotalListing() {\r\n      window.ms_dashboard_seller_total_listing = await this.fetchTotalListing(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardCompliedActiveRogue() {\r\n      window.ms_dashboard_seller_complied_active_rogue = await this.fetchCompliedActiveRogue(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardCompletion() {\r\n      window.ms_dashboard_seller_completion = await this.fetchCompletion(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardGmr() {\r\n      window.ms_dashboard_seller_gmr = await this.fetchGmr(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardArbitrage() {\r\n      window.ms_dashboard_seller_arbitrage = await this.fetchArbitrage(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardSellerStatus() {\r\n      window.ms_dashboard_seller_status = await this.fetchSellerStatus(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateDataSrc() {\r\n      const apiList = this.prepareApisForData()\r\n      await Promise.all(apiList).then(() => {\r\n        // TODO: SDK support API refresh data source\r\n        this.$nextTick(() => {\r\n          this.sdkConfigInitialized = true\r\n        })\r\n      })\r\n    },\r\n    prepareApisForData() {\r\n      return [\r\n        this.updateSIDashboardTotalListing(),\r\n        this.updateSIDashboardCompliedActiveRogue(),\r\n        this.updateSIDashboardCompletion(),\r\n        this.updateSIDashboardGmr(),\r\n        this.updateSIDashboardArbitrage(),\r\n        this.updateSIDashboardSellerStatus()\r\n      ]\r\n    },\r\n    async fetchSettings() {\r\n      try {\r\n        const result = await this.remoteFetchSetting(this.keepShareTokenForQuery({}))\r\n        return result\r\n      } catch (error) {\r\n        console.log(error.response.data.message)\r\n        return false\r\n      }\r\n    },\r\n    updateReportLogo(link) {\r\n      if (_.isEmpty(link)) {\r\n        link = reportLogo\r\n      }\r\n      window.ms_dashboard_seller_main_config.widgetLayout.widgets[0].config.elements[0].config.content = `<img src=\"${link}\">`\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n    }),\r\n    sharableRoute () {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    }\r\n  },\r\n  async created() {\r\n    this.share_token = this.$route.query.share_token\r\n    const result = await this.fetchSettings()\r\n    this.initMainDataSource()\r\n    this.updateReportLogo(result.default_brand_logo)\r\n    await this.updateDataSrc()\r\n  }\r\n}\r\n",{"version":3,"sources":["DashboardIndex.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"DashboardIndex.vue","sourceRoot":"src/components/page/sellerDashboard","sourcesContent":["<template>\r\n    <div >\r\n      <div class=\"mw-main card\">\r\n      <div class=\"widgets-container\">\r\n        <div class=\"align-middle d-flex justify-content-center align-items-center spinner-container\" v-if=\"!sdkConfigInitialized\">\r\n      <div class=\"spinner-border thin-spinner spinner-border-sm thin-spinner\"></div>&nbsp;Loading...\r\n      </div>\r\n          <!--dashboard sdk will be renderred where, DON'T change the class-->\r\n          <cbpo-dashboard v-if=\"sdkConfigInitialized\" config-ref=\"ms_dashboard_seller_main_config\" class=\"mw-sdk-styled seller-dashboard\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport _nav from '@/_nav'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport config from './sdk-configs/mainTabConfig'\r\nimport reportLogo from '@/assets/img/report-demo.jpg'\r\n\r\nexport default {\r\n  name: 'MWSellerDashboardIndex',\r\n  components: {\r\n  },\r\n  data: () => ({\r\n    share_token: null,\r\n    sdkConfigInitialized: false,\r\n    nav: _nav,\r\n    isLoading: true\r\n  }),\r\n  methods: {\r\n    ...mapActions({\r\n      mainConfig: `mw/dashboard/${TYPE.GET_DATA_CONFIG_VIOLATOR}`,\r\n      remoteFetchSetting: `mw/settings/${TYPE.FETCH_SETTING}`,\r\n      fetchCompliedActiveRogue: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_COMPLIED_ACTIVE_ROGUE}`,\r\n      fetchCompletion: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_COMPLETION}`,\r\n      fetchGmr: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_GMR}`,\r\n      fetchArbitrage: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_ARBITRAGE}`,\r\n      fetchTotalListing: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_TOTAL_LISTING}`,\r\n      fetchSellerStatus: `mw/sellers/${TYPE.FETCH_SI_DASHBOARD_SELLER_STATUS}`\r\n    }),\r\n    keepShareTokenForQuery(query) {\r\n      if (this.share_token) {\r\n        _.assign(query, { share_token: this.share_token })\r\n      }\r\n      return query\r\n    },\r\n    initMainDataSource() {\r\n      window.ms_dashboard_seller_main_config = config\r\n    },\r\n    async updateSIDashboardTotalListing() {\r\n      window.ms_dashboard_seller_total_listing = await this.fetchTotalListing(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardCompliedActiveRogue() {\r\n      window.ms_dashboard_seller_complied_active_rogue = await this.fetchCompliedActiveRogue(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardCompletion() {\r\n      window.ms_dashboard_seller_completion = await this.fetchCompletion(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardGmr() {\r\n      window.ms_dashboard_seller_gmr = await this.fetchGmr(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardArbitrage() {\r\n      window.ms_dashboard_seller_arbitrage = await this.fetchArbitrage(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateSIDashboardSellerStatus() {\r\n      window.ms_dashboard_seller_status = await this.fetchSellerStatus(this.keepShareTokenForQuery({}))\r\n    },\r\n    async updateDataSrc() {\r\n      const apiList = this.prepareApisForData()\r\n      await Promise.all(apiList).then(() => {\r\n        // TODO: SDK support API refresh data source\r\n        this.$nextTick(() => {\r\n          this.sdkConfigInitialized = true\r\n        })\r\n      })\r\n    },\r\n    prepareApisForData() {\r\n      return [\r\n        this.updateSIDashboardTotalListing(),\r\n        this.updateSIDashboardCompliedActiveRogue(),\r\n        this.updateSIDashboardCompletion(),\r\n        this.updateSIDashboardGmr(),\r\n        this.updateSIDashboardArbitrage(),\r\n        this.updateSIDashboardSellerStatus()\r\n      ]\r\n    },\r\n    async fetchSettings() {\r\n      try {\r\n        const result = await this.remoteFetchSetting(this.keepShareTokenForQuery({}))\r\n        return result\r\n      } catch (error) {\r\n        console.log(error.response.data.message)\r\n        return false\r\n      }\r\n    },\r\n    updateReportLogo(link) {\r\n      if (_.isEmpty(link)) {\r\n        link = reportLogo\r\n      }\r\n      window.ms_dashboard_seller_main_config.widgetLayout.widgets[0].config.elements[0].config.content = `<img src=\"${link}\">`\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n    }),\r\n    sharableRoute () {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    }\r\n  },\r\n  async created() {\r\n    this.share_token = this.$route.query.share_token\r\n    const result = await this.fetchSettings()\r\n    this.initMainDataSource()\r\n    this.updateReportLogo(result.default_brand_logo)\r\n    await this.updateDataSrc()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.spinner-container {\r\n  height: 50px;\r\n\r\n  .thin-spinner {\r\n    border-width: 1px;\r\n  }\r\n}\r\n.main-board {\r\n  padding-bottom: 10px\r\n}\r\n.mw-main {\r\n  overflow: hidden;\r\n  .cbpo-pagination button.current{\r\n    background-color: #57719b !important;\r\n  }\r\n}\r\n.widgets-nav {\r\n  .nav-item:first-child {\r\n    .nav-link {\r\n      border-left: 0;\r\n    }\r\n  }\r\n  .nav-link {\r\n    border-top: 0!important;\r\n    border-radius: 0!important;\r\n    &.active {\r\n      position: relative;\r\n      &:before {\r\n        content: '';\r\n        position: absolute;\r\n        width: 100%;\r\n        top: 0;\r\n        left: 0;\r\n        height: 4px;\r\n        background: #50a3a2;\r\n        border: 1px solid #50a3a2;\r\n      }\r\n    }\r\n  }\r\n}\r\n.seller-dashboard .cbpo-layout .vue-grid-layout .vue-grid-item:nth-child(1) .ql-container .ql-editor img {\r\n  margin:0 auto !important;\r\n  display:block !important;\r\n}\r\n</style>\r\n"]}]}