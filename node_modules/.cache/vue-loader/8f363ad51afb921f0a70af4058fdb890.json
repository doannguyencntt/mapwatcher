{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\Import.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\Import.vue","mtime":1631532115725},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport _nav from '@/_nav'\r\nimport Datepicker from 'vuejs-datepicker'\r\nimport * as moment from 'moment/moment'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      date_started: null,\r\n      file_in_use: null,\r\n      file: null,\r\n      flag: {\r\n        processed: false\r\n      },\r\n      reports: {\r\n        items: [],\r\n        isLoad: true\r\n      },\r\n      nav: _nav\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      getProcess: `mw/maps/${TYPE.GET_PROCESS_MAPS}`\r\n    }),\r\n    sharableRoute () {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    }\r\n  },\r\n  validations: {\r\n    date_started: {\r\n      required\r\n    },\r\n    file_in_use: {\r\n      required\r\n    }\r\n  },\r\n  components: {\r\n    Datepicker\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      remoteFileUpload: `mw/maps/${TYPE.REMOTE_IMPORT_CSV_MAPS}`,\r\n      fetchReports: `mw/reports/${TYPE.FETCH_LIST_REPORTS}`\r\n    }),\r\n    handleCannel() {\r\n      this.report = {}\r\n    },\r\n    async handleSubmitFileUpload() {\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log('error')\r\n        return\r\n      }\r\n      if (!this.reports.isLoad && this.reports.items.length && this.file) {\r\n        this.flag.processed = false\r\n        let formData = new FormData()\r\n        formData.append('file', this.file)\r\n        formData.append('date_started', moment(this.date_started).format('MM/DD/YYYY'))\r\n        formData.append('file_in_use', this.file_in_use)\r\n        try {\r\n          await this.remoteFileUpload(formData)\r\n          this.flag.processed = true\r\n        } catch (error) {\r\n          if (error.status && error.status === 400) {\r\n            this.vToasted('error', 'Could not import data. Please compare your file with the sample one to make sure your column definition is correct.')\r\n          } else {\r\n            this.vToasted('error', error.data.message)\r\n          }\r\n          this.flag.processed = false\r\n        }\r\n      }\r\n    },\r\n    handleDownloadCSVExample() {\r\n      window.location.href = 'https://storage.googleapis.com/precise/mw/sample-map-import.csv'\r\n    },\r\n    async fetchReportList() {\r\n      try {\r\n        // check report list is not empty, so limit 1 is enough\r\n        const response = await this.fetchReports({limit: 1, page: 1})\r\n        this.reports.items = response.items\r\n        this.reports.isLoad = false\r\n      } catch (e) {\r\n        this.reports.isLoad = false\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchReportList()\r\n    this.fields = [\r\n      { key: 'name', label: '', sortable: true, thClass: 'text-center' },\r\n      { key: 'count', label: 'Count', sortable: true, thClass: 'text-center' }\r\n    ]\r\n  }\r\n}\r\n",{"version":3,"sources":["Import.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Import.vue","sourceRoot":"src/components/page/maps","sourcesContent":["<template>\r\n  <div class=\"animated fadeIn\">\r\n    <b-row>\r\n      <b-col md=\"6\" lg=\"6\" sm=\"12\">\r\n        <b-card>\r\n          <template v-slot:header>\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n              <div>\r\n                <b>Import MAPs</b>\r\n              </div>\r\n              <div class=\"card-header-actions\">\r\n                <div class=\"btn-close\">\r\n                  <router-link\r\n                    :to=\"{name: `MW${sharableRoute}ListMaps`, params: {client_id: nav.clientId}}\"\r\n                    tag=\"button\"\r\n                    class=\"btn btn-secondary btn-block btn-sm\"\r\n                  >\r\n                    <i class=\"icon-arrow-left-circle icons\"></i> Back\r\n                  </router-link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </template>\r\n          <b-form>\r\n            <b-form-group>\r\n              <b-row class=\"align-items-center\">\r\n                <b-col md=\"12\">\r\n                  <label>Select CSV File</label>\r\n                  <b-form-file v-model=\"file\"></b-form-file>\r\n                </b-col>\r\n              </b-row>\r\n            </b-form-group>\r\n            <b-col class=\"px-0\">\r\n              <i>\r\n                Please download the sample file\r\n                <b-button size=\"sm\" class=\"btn btn-pill btn-light btn-sm\" @click=\"handleDownloadCSVExample()\">\r\n                  <i class=\"icons icon-cloud-download\"></i> Download\r\n                </b-button>\r\n              </i>\r\n            </b-col>\r\n            <b-row>\r\n              <b-col md=\"6\" lg=\"6\" sm=\"12\">\r\n                <b-form-group>\r\n                  <label>\r\n                    <b>File in use</b>\r\n                  </label>\r\n                  <b-form-input type=\"text\"\r\n                                @input=\"$v.file_in_use.$touch()\"\r\n                                v-model=\"file_in_use\"\r\n                  ></b-form-input>\r\n                  <div\r\n                          class=\"mw-error\"\r\n                          v-if=\"$v.file_in_use.$error && $v.file_in_use.$dirty\"\r\n                  >File in use is required.</div>\r\n                </b-form-group>\r\n              </b-col>\r\n              <b-col md=\"6\" lg=\"6\" sm=\"12\">\r\n                <b-form-group>\r\n                  <label>\r\n                    <b>Date started</b>\r\n                  </label>\r\n                  <div class=\"custom-datepicker-control\">\r\n                    <b-button-group class=\"w-100\">\r\n                      <b-button class=\"col-md-2\" id=\"btnDate\" size='sm' @click=\"$refs.date_started.click()\">\r\n                        <i class=\"icons icon-calendar\"></i>\r\n                      </b-button>\r\n                      <Datepicker\r\n                              v-model=\"date_started\"\r\n                              bootstrap-styling\r\n                              format=\"MM/dd/yyyy\"\r\n                              typeable\r\n                              ref=\"date_started\"\r\n                              @input=\"$v.date_started.$touch()\"\r\n                              id=\"fromPicker\"\r\n                              placeholder=\"Select a date\"\r\n                              class=\"optimize-dp col-md-10 p-0\"\r\n                      >\r\n                      </Datepicker>\r\n                    </b-button-group>\r\n                    <div\r\n                            class=\"mw-error\"\r\n                            v-if=\"$v.date_started.$error && $v.date_started.$dirty\"\r\n                    >Date started is required.</div>\r\n                  </div>\r\n                </b-form-group>\r\n              </b-col>\r\n            </b-row>\r\n            <b-col class=\"px-0\">\r\n                <span class=\"text-danger pt-2\" v-if=\"!reports.isLoad && !reports.items.length\">\r\n                  There is no report or active report in the list. Please\r\n                  <router-link class=\"text-danger font-weight-bold\" :to=\"{name: 'MWAddReports'}\">add a new report</router-link> or\r\n                  <router-link class=\"text-danger font-weight-bold\" :to=\"{name: 'MWListReports'}\">activate</router-link> at least one report first.\r\n                </span>\r\n            </b-col>\r\n          </b-form>\r\n          <template v-slot:footer>\r\n            <b-button :disabled=\"$v.$error || reports.isLoad || !reports.items.length || !file\" variant=\"primary\" size=\"sm\" @click=\"handleSubmitFileUpload()\">\r\n              <i class=\"icon-cloud-upload\"></i> Upload\r\n            </b-button>\r\n            <b-button size=\"sm\" class=\"ml-2\" @click=\"$router.push({name: `MW${sharableRoute}ListMaps`, params: {client_id: nav.clientId}})\">\r\n              <i class=\"icon-arrow-left-circle\"></i> Cancel\r\n            </b-button>\r\n          </template>\r\n        </b-card>\r\n      </b-col>\r\n      <b-col md=\"6\" lg=\"6\" sm=\"12\" v-if=\"flag.processed\">\r\n        <b-card>\r\n          <template v-slot:header>\r\n            <span class=\"align-middle\">\r\n              Import\r\n              <strong>Result</strong>\r\n            </span>\r\n          </template>\r\n          <b-card-body>\r\n            <ul>\r\n              <li>\r\n                <strong>Created</strong>\r\n                : {{ getProcess.total_created }}\r\n              </li>\r\n              <li>\r\n                <strong>Updated</strong>\r\n                : {{ getProcess.total_updated }}\r\n              </li>\r\n              <li>\r\n                <strong>Deleted</strong>\r\n                : {{ getProcess.total_deleted }}\r\n              </li>\r\n              <li v-if=\"getProcess.errors && getProcess.errors.length\">\r\n                <strong>Errors</strong>\r\n                <ul>\r\n                  <li\r\n                    v-for=\"(d, i) in getProcess.errors\"\r\n                    :key=\"i\"\r\n                  >{{ d.error }} at row #{{ d.row_number }}</li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n<script>\r\n// import _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport _nav from '@/_nav'\r\nimport Datepicker from 'vuejs-datepicker'\r\nimport * as moment from 'moment/moment'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      date_started: null,\r\n      file_in_use: null,\r\n      file: null,\r\n      flag: {\r\n        processed: false\r\n      },\r\n      reports: {\r\n        items: [],\r\n        isLoad: true\r\n      },\r\n      nav: _nav\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      getProcess: `mw/maps/${TYPE.GET_PROCESS_MAPS}`\r\n    }),\r\n    sharableRoute () {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    }\r\n  },\r\n  validations: {\r\n    date_started: {\r\n      required\r\n    },\r\n    file_in_use: {\r\n      required\r\n    }\r\n  },\r\n  components: {\r\n    Datepicker\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      remoteFileUpload: `mw/maps/${TYPE.REMOTE_IMPORT_CSV_MAPS}`,\r\n      fetchReports: `mw/reports/${TYPE.FETCH_LIST_REPORTS}`\r\n    }),\r\n    handleCannel() {\r\n      this.report = {}\r\n    },\r\n    async handleSubmitFileUpload() {\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log('error')\r\n        return\r\n      }\r\n      if (!this.reports.isLoad && this.reports.items.length && this.file) {\r\n        this.flag.processed = false\r\n        let formData = new FormData()\r\n        formData.append('file', this.file)\r\n        formData.append('date_started', moment(this.date_started).format('MM/DD/YYYY'))\r\n        formData.append('file_in_use', this.file_in_use)\r\n        try {\r\n          await this.remoteFileUpload(formData)\r\n          this.flag.processed = true\r\n        } catch (error) {\r\n          if (error.status && error.status === 400) {\r\n            this.vToasted('error', 'Could not import data. Please compare your file with the sample one to make sure your column definition is correct.')\r\n          } else {\r\n            this.vToasted('error', error.data.message)\r\n          }\r\n          this.flag.processed = false\r\n        }\r\n      }\r\n    },\r\n    handleDownloadCSVExample() {\r\n      window.location.href = 'https://storage.googleapis.com/precise/mw/sample-map-import.csv'\r\n    },\r\n    async fetchReportList() {\r\n      try {\r\n        // check report list is not empty, so limit 1 is enough\r\n        const response = await this.fetchReports({limit: 1, page: 1})\r\n        this.reports.items = response.items\r\n        this.reports.isLoad = false\r\n      } catch (e) {\r\n        this.reports.isLoad = false\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchReportList()\r\n    this.fields = [\r\n      { key: 'name', label: '', sortable: true, thClass: 'text-center' },\r\n      { key: 'count', label: 'Count', sortable: true, thClass: 'text-center' }\r\n    ]\r\n  }\r\n}\r\n</script>\r\n"]}]}