{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\Edit.vue","mtime":1626264502271},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapActions, mapGetters, mapMutations } from 'vuex'\r\nimport { ClipboardUtil } from 'plat-sdk/dist/clipboard'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport { isUpcOrEan, isAsinAndNotEmpty } from '@/shared/utils'\r\nimport _nav from '@/_nav'\r\nimport _ from 'lodash'\r\nimport { FormType } from '@/constants/Form.js'\r\n\r\nexport default {\r\n  name: 'MWEditGSMaps',\r\n  data() {\r\n    return {\r\n      nav: _nav,\r\n      check: true\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      mapData: `mw/maps/${TYPE.GET_ONE_GS_MAP}`,\r\n      defaultParams: `mw/maps/${TYPE.GET_DEFAULT_PARAMS}`\r\n    }),\r\n    isCopySupport() {\r\n      return ClipboardUtil.isCopySupported()\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations({\r\n      setMapData: `mw/maps/${TYPE.SET_ONE_GS_MAP}`\r\n    }),\r\n    ...mapActions({\r\n      fetchMap: `mw/maps/${TYPE.FETCH_ONE_GS_MAP}`,\r\n      updateMap: `mw/maps/${TYPE.UPDATE_GS_MAP}`\r\n    }),\r\n    backToListMaps() {\r\n      this.$router.push({\r\n        name: 'MWGSListMaps',\r\n        params: { client_id: this.nav.clientId },\r\n        query: { ...this.$router.history.current.query }\r\n      })\r\n    },\r\n    async getMapById() {\r\n      const {\r\n        params: { id }\r\n      } = this.$route\r\n      try {\r\n        await this.fetchMap(id)\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n    },\r\n    asinNotEmpty() {\r\n      if (!this.mapData || !this.mapData.asin) {\r\n        return false\r\n      }\r\n      return this.mapData.asin.length > 0\r\n    },\r\n    async handleEditMap() {\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log('error')\r\n        return\r\n      }\r\n      try {\r\n        const { id } = this.$route.params\r\n        await this.updateMap({ id, data: this.mapData })\r\n        this.vToasted('success', 'This MAP has been updated successfully.')\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n\r\n    handleCopyRecord() {\r\n      ClipboardUtil.copy(_.cloneDeep(this.mapData), FormType.MAP_GS)\r\n      this.vToasted('success', 'Copied to clipboard.')\r\n      this.checkKey()\r\n    },\r\n\r\n    async handlePasteRecord() {\r\n      try {\r\n        const pasteData = await ClipboardUtil.paste(\r\n          _.cloneDeep(this.mapData),\r\n          FormType.MAP_GS\r\n        )\r\n        if (!pasteData) {\r\n          this.vToasted('error', 'You need to enable copy to clipboard')\r\n          return\r\n        }\r\n        this.setMapData(pasteData)\r\n        this.vToasted('success', 'Paste successfully')\r\n      } catch (e) {\r\n        this.vToasted('error', 'You copy is not valid')\r\n      }\r\n    },\r\n\r\n    async checkKey() {\r\n      const result = await ClipboardUtil.check(FormType.MAP_GS)\r\n\r\n      this.check = !result\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.getMapById()\r\n    this.checkKey()\r\n    window.addEventListener('focus', this.checkKey)\r\n  },\r\n\r\n  destroyed() {\r\n    window.removeEventListener('focus', this.checkKey)\r\n  },\r\n\r\n  validations: {\r\n    mapData: {\r\n      upc: {\r\n        isUpcOrEan: isUpcOrEan\r\n      },\r\n      asin: {\r\n        isAsinAndNotEmpty\r\n      },\r\n      sku: {\r\n        required\r\n      },\r\n      price: {\r\n        required\r\n      }\r\n    }\r\n  }\r\n}\r\n",null]}