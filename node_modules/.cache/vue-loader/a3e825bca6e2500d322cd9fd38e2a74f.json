{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\Setting.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\settings\\Setting.vue","mtime":1627381226850},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _nav from '@/_nav'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport vToasted from '@/shared/notification'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport brandLogo from '@/assets/img/brand-demo.jpg'\r\nimport PolicyNotificationModal from './PolicyNotificationModal.vue'\r\n\r\nexport default {\r\n  components: { PolicyNotificationModal },\r\n  data() {\r\n    return {\r\n      brandLogo,\r\n      disable_update: false,\r\n      data: {\r\n        show_dashboard: true,\r\n        si_listing_brand_name: '',\r\n        default_brand_logo: '',\r\n        map_pricing_policy_document: {\r\n          url: '',\r\n          file_name: ''\r\n        }\r\n      },\r\n      originData: {},\r\n      nav: _nav,\r\n      policyModalID: 'policy-sending-confirmation',\r\n      policyUpdated: false\r\n    }\r\n  },\r\n  mixins: [vToasted, PermissionsMixin],\r\n  methods: {\r\n    ...mapActions({\r\n      remoteFetchSetting: `mw/settings/${TYPE.FETCH_SETTING}`,\r\n      remoteUpdateSetting: `mw/settings/${TYPE.REMOTE_EDIT_SETTING}`,\r\n      remoteImagesFileUpload: `mw/images/${TYPE.REMOTE_UPLOAD_IMAGES}`,\r\n      remoteFileUpload: `mw/settings/${TYPE.REMOTE_UPLOAD_FILES}`\r\n    }),\r\n    async handleImagesFileUpload(e) {\r\n      this.disable_update = true\r\n      let formData = new FormData()\r\n      formData.append('file', e.target.files[0])\r\n      formData.append('type', 'brand_logos')\r\n      try {\r\n        const res = await this.remoteImagesFileUpload(formData)\r\n        this.data.default_brand_logo = res.url\r\n        this.vToasted('success', `Your file is uploaded successfully.`)\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n      this.disable_update = false\r\n    },\r\n    async handleUploadMapPricingPolicyDocument(e) {\r\n      this.disable_update = true\r\n      let formData = new FormData()\r\n      formData.append('file', e.target.files[0])\r\n      formData.append('type', 'map_pricing_policy_document')\r\n      try {\r\n        const res = await this.remoteFileUpload(formData)\r\n        // eslint-disable-next-line\r\n        const { url, file_name } = res\r\n        this.data.map_pricing_policy_document.url = url\r\n        // eslint-disable-next-line\r\n        this.data.map_pricing_policy_document.file_name = file_name\r\n        this.vToasted('success', `Your file is uploaded successfully.`)\r\n      } catch (error) {\r\n        this.vToasted('error', error)\r\n      }\r\n      this.disable_update = false\r\n    },\r\n    removeLogo() {\r\n      this.data.default_brand_logo = ''\r\n    },\r\n    removePolicyFile() {\r\n      this.data.map_pricing_policy_document.url = ''\r\n      this.data.map_pricing_policy_document.file_name = ''\r\n      this.$refs.policyFileInput.reset()\r\n    },\r\n    downloadFile() {\r\n      window.location.href = this.data.map_pricing_policy_document.url\r\n    },\r\n    formatNames(files) {\r\n      const name = files[0].name\r\n      return name.length > 20 ? `${name.substr(0, 15)}...` : name\r\n    },\r\n    async handleUpdateSetting() {\r\n      try {\r\n        const { id } = this.$route.params\r\n        await this.remoteUpdateSetting({ params: this.data, id })\r\n        this.vToasted('success', `Settings have been updated successfully.`)\r\n        this.policyUpdated = true\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n    async handleFetchAndReloadData() {\r\n      try {\r\n        const { id } = this.$route.params\r\n        const result = await this.remoteFetchSetting({ id })\r\n        this.data.show_dashboard = result.show_dashboard\r\n        this.data.si_listing_brand_name = result.si_listing_brand_name\r\n        this.data.default_brand_logo = result.default_brand_logo\r\n        this.data.map_pricing_policy_document.url = result.map_pricing_policy_document.url\r\n        this.data.map_pricing_policy_document.file_name = result.map_pricing_policy_document.file_name\r\n        // backup originData\r\n        this.originData = JSON.parse(JSON.stringify(this.data))\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`,\r\n      defaultParams: `mw/brands/${TYPE.GET_DEFAULT_PARAMS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`\r\n    }),\r\n    capitalize: function() {\r\n      return (str) => str[0].toUpperCase() + str.slice(1)\r\n    },\r\n    params: function() {\r\n      return {...this.defaultParams} || {}\r\n    },\r\n    newPolicyUploaded() {\r\n      return (\r\n        this.data.map_pricing_policy_document.url !==\r\n        this.originData.map_pricing_policy_document.url\r\n      )\r\n    }\r\n  },\r\n  created() {\r\n    this.handleFetchAndReloadData()\r\n  }\r\n}\r\n",null]}