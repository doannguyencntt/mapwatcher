{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardHistorical.vue?vue&type=style&index=0&id=02803373&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardHistorical.vue","mtime":1639556629140},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\index.js","mtime":1620898435762},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1620898436811},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\postcss-loader\\src\\index.js","mtime":1620898436496},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\sass-loader\\lib\\loader.js","mtime":1626076778407},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\r\n.pl-05 {\r\n  padding-left: 0.5rem !important;\r\n}\r\n\r\n.mb-0 {\r\n  margin-bottom: 0 !important;\r\n}\r\n\r\n.mw-historical-control-select {\r\n  padding: 0.5rem;\r\n  label {\r\n    margin: 0;\r\n    padding: 5px 10px 5px 9px;\r\n    display: inline-block;\r\n  }\r\n  select {\r\n    padding: .2rem .5rem;\r\n    width: auto;\r\n    height: auto;\r\n    display: inline-block;\r\n    font-size: 11.5px;\r\n    border-radius: 0;\r\n  }\r\n}\r\n.mw-sdk-styled {\r\n  &.cbpo-dashboard {\r\n    border: none;\r\n  }\r\n  /deep/ {\r\n    .cbpo-dashboard-container{\r\n      border: none;\r\n      padding: 0\r\n    }\r\n    .cbpo-wrapper-action{\r\n      margin-left: auto;\r\n    }\r\n    .cbpo-btn {\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n    .cbpo-btn .spinner-border {\r\n      width: 10px;\r\n      height: 10px;\r\n      border-width: 1px;\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["DashboardHistorical.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwUA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DashboardHistorical.vue","sourceRoot":"src/components/page/dashboard","sourcesContent":["<template>\r\n   <div class=\"animated fadeIn\">\r\n     <div class=\"align-middle d-flex justify-content-center align-items-center spinner-container\" v-if=\"!sdkConfigInitialized\">\r\n        <div class=\"spinner-border thin-spinner spinner-border-sm thin-spinner\"></div>&nbsp;Loading...\r\n      </div>\r\n    <div class=\"cbpo-s form-group mw-historical-control-select mb-0\" :class=\"{ 'pt-0': sdkConfigInitialized }\" v-if=\"sdkConfigInitialized\">\r\n      <label>Date:</label>\r\n      <select v-model=\"selectedDate\" @change=\"dateChange($event)\" class=\"form-control\">\r\n        <template v-for=\"(date, i) in dates\">\r\n          <option :value=\"date\" :key=\"i\">{{date}}</option>\r\n        </template>\r\n      </select>\r\n    </div>\r\n    <div v-if=\"sdkConfigInitialized\" class=\"widgets-container\">\r\n      <!--dashboard sdk will be rendered where, DON'T change the class-->\r\n        <cbpo-dashboard :key=\"sdkConfigForceReload\" config-ref=\"mw_dashboard_main_config\" class=\"mw-sdk-styled\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport $ from 'jquery'\r\nimport { Promise } from 'q'\r\nimport _ from 'lodash'\r\nimport { DashboardFilterSourceType } from '@/constants/Report'\r\nimport { DashboardViolatorTitle, DashboardAllSellerTitle, DashboardWidgetId } from '@/constants/Dashboard'\r\nimport configHistoricalDataTable from '@/store/modules/page/dashboard/configs/historical-data-table'\r\n\r\nexport default {\r\n  props: ['selected'],\r\n  data: () => ({\r\n    dashboardFilterSourceType: _.cloneDeep(DashboardFilterSourceType),\r\n    dashboardAllSellerTitle: _.cloneDeep(DashboardAllSellerTitle),\r\n    dashboardViolatorTitle: _.cloneDeep(DashboardViolatorTitle),\r\n    dashboardWidgetId: _.cloneDeep(DashboardWidgetId),\r\n    dates: [],\r\n    loader: false,\r\n    selectedDate: null,\r\n    sdkConfigInitialized: false,\r\n    sdkConfigForceReload: 0,\r\n    violationDataSourceConnection: {\r\n      type: 'vio',\r\n      ds_external_id: null\r\n    }\r\n  }),\r\n  name: 'MWDashboardHistorical',\r\n  computed: {\r\n    ...mapGetters({\r\n      dataHistoricalTable: `mw/dashboard/${TYPE.GET_DATA_HISTORICAL}`,\r\n      dataDateHistorical: `mw/dashboard/${TYPE.GET_DATE_HISTORICAL}`,\r\n      dataNumberViolations: `mw/dashboard/${TYPE.GET_DATA_NUMBER_OF_VIOLATIONS}`,\r\n      dataNumberViolationsViolators: `mw/dashboard/${TYPE.GET_DATA_NUMBER_OF_VIOLATIONS_VIOLATORS}`,\r\n      mainConfig: `mw/dashboard/${TYPE.GET_DATA_CONFIG_HISTORICAL}`\r\n    })\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchDataHistoricalTable: `mw/dashboard/${TYPE.FETCH_DATA_HISTORICAL}`,\r\n      fetchDataDateHistorical: `mw/dashboard/${TYPE.FETCH_DATE_HISTORICAL}`,\r\n      fetchDataNumberViolations: `mw/dashboard/${TYPE.FETCH_DATA_NUMBER_OF_VIOLATIONS}`,\r\n      fetchDataNumberViolationsViolators: `mw/dashboard/${TYPE.FETCH_DATA_NUMBER_OF_VIOLATIONS_VIOLATORS}`,\r\n      downloadDailyViolations: `mw/dashboard/${TYPE.FETCH_DOWNLOAD_DAILY_VIOLATIONS}`,\r\n      setSelectedDate: `mw/dashboard/${TYPE.SET_SELECTED_DATE}`,\r\n      getDsMaps: `mw/dashboard/${TYPE.GET_DS_MAPS}`\r\n    }),\r\n    handleDataHistorical(marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataHistoricalTable(this.useShareTokenIfNeed({\r\n          date: this.selectedDate ? this.$moment(this.selectedDate).format('YYYY-MM-DD') : null,\r\n          marketplace: marketplace,\r\n          report_id: this.selected.report._id,\r\n          seller_type: this.selected.seller_type,\r\n          show_upc_in_dashboard: this.selected.report.show_upc_in_dashboard\r\n        })).then(() => {\r\n          let fakeHistorical = {...this.dataHistoricalTable}\r\n          fakeHistorical = this.emptyRowData(fakeHistorical, this.getIgnoredColumnsHistorical(this.selected.report))\r\n          if (this.selected.report && !this.selected.report.show_upc_in_dashboard) {\r\n            fakeHistorical = this.removeColumnData(fakeHistorical, ['upc/ean'])\r\n          }\r\n          window.mw_historical_data_table = fakeHistorical\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    // remove column from table data\r\n    removeColumnData(data, cols = []) {\r\n      if (!cols.length || !data || !data.cols || !data.rows) return data\r\n      let names = data.cols.map(d => d.name)\r\n      let indexs = cols.reduce((a, c) => { if (names.includes(c)) a.push(names.indexOf(c)); return a }, []).filter(e => e >= 0)\r\n      indexs.forEach(i => { data.rows = data.rows.map(r => { r[i] = null; return r }) })\r\n      return data\r\n    },\r\n    findWidgetByLabel(widgetArray, label) {\r\n      let flag\r\n      widgetArray.forEach(widget => {\r\n        if (widget.config.widgets && widget.config.widgets.length > 0) {\r\n          let result = this.findWidgetByLabel(widget.config.widgets, label)\r\n          // eslint-disable-next-line no-unused-expressions\r\n          result ? flag = result : ''\r\n        } else if (label === widget.config.widget.title.text) {\r\n          flag = widget\r\n        }\r\n      })\r\n      return flag\r\n    },\r\n    handleCaseRemoveColumn(widgetName, arrayLabel) {\r\n      let widget = this.findWidgetByLabel(window.mw_dashboard_main_config.widgetLayout.widgets, widgetName)\r\n      widget.config.elements[0].config.columns = this.removeColumnByLabel(widget.config.elements[0].config.columns, arrayLabel)\r\n    },\r\n    removeColumnByLabel(arrayColumn, arrayLabel) {\r\n      return arrayColumn.filter(column => !arrayLabel.includes(column.name))\r\n    },\r\n    useShareTokenIfNeed(object) {\r\n      if (this.selected.share_token) {\r\n        _.assign(object, { share_token: this.selected.share_token })\r\n      }\r\n      _.assign(object, { source: this.selected.source })\r\n      _.assign(object, { is_true_map: !!this.selected.report.true_map_report })\r\n      return object\r\n    },\r\n    getIgnoredColumnsHistorical(report) {\r\n      let ignoredColumns = []\r\n      if (report && report.ignore_price_tracking) {\r\n        ignoredColumns.push('map_price', 'diff', 'diff_percent')\r\n      }\r\n      return ignoredColumns\r\n    },\r\n    handleDataNumberOfViolationsViolators(marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataNumberViolationsViolators(this.useShareTokenIfNeed({\r\n          marketplace: marketplace,\r\n          report_id: this.selected.report._id,\r\n          seller_type: this.selected.seller_type\r\n        })).then(() => {\r\n          window.mw_historical_number_of_violation_violator = this.dataNumberViolationsViolators\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    handleDataNumberViolations(marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataNumberViolations(this.useShareTokenIfNeed({\r\n          marketplace: marketplace,\r\n          report_id: this.selected.report._id,\r\n          seller_type: this.selected.seller_type\r\n        })).then(() => {\r\n          window.mw_historical_number_of_violations = this.dataNumberViolations\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    emptyRowData(data, cols = []) {\r\n      if (!cols.length || !data || !data.cols || !data.rows) return data\r\n      let names = data.cols.map(d => d.name)\r\n      let indexs = cols.reduce((a, c) => { if (names.includes(c)) a.push(names.indexOf(c)); return a }, []).filter(e => e >= 0)\r\n      indexs.forEach(i => { data.rows = data.rows.map(r => { r[i] = null; return r }) })\r\n      return data\r\n    },\r\n    syncMarketplaceParams (marketplace) {\r\n      return _.includes(marketplace, 'amazon') ? marketplace.replace(/[_]/g, '.') : marketplace\r\n    },\r\n    async _fetchDashboardWidgetData() {\r\n      let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n      const isTrueMap = !!this.selected.report.true_map_report\r\n      // const isTrueMap = false\r\n      // const promises = [this.handleDataHistorical(marketplace)]\r\n      const promises = [] // GET data from data source VIOLATION\r\n      if (isTrueMap) {\r\n        promises.push(this.handleDataNumberOfViolationsViolators(marketplace))\r\n        promises.push(this.handleDataNumberViolations(marketplace))\r\n      }\r\n\r\n      await Promise.all(promises).then(() => {\r\n        let cloneObj = $.extend(true, {}, this.mainConfig)\r\n\r\n        cloneObj.widgetLayout.widgets.unshift(this.buildConfigWidgetHistoricalData(marketplace))\r\n\r\n        for (const [index, widget] of cloneObj.widgetLayout.widgets.entries()) {\r\n          const widgetId = widget.config.widget_id\r\n          if (widgetId) {\r\n            const text = this.selected.source === this.dashboardFilterSourceType.ALL_SELLERS ? this.dashboardAllSellerTitle[widgetId] : this.dashboardViolatorTitle[widgetId]\r\n            cloneObj.widgetLayout.widgets[index].config.widget.title.text = text\r\n          }\r\n        }\r\n        if (!isTrueMap) {\r\n          // const cloneWidgets = _.clone(widgets)\r\n          cloneObj.widgetLayout.widgets = _.filter(cloneObj.widgetLayout.widgets, (item) => {\r\n            return !_.includes([this.dashboardWidgetId.number_of_violations_per_seller, this.dashboardWidgetId.number_of_violations_violators], item.config.widget_id)\r\n          })\r\n        }\r\n\r\n        window.mw_dashboard_main_config = cloneObj\r\n        if (!this.sdkConfigInitialized) {\r\n          // for first time\r\n          this.sdkConfigInitialized = true\r\n        } else {\r\n          // change dataSource effect to sdk\r\n          this.sdkConfigForceReload++\r\n        }\r\n      })\r\n    },\r\n    buildConfigWidgetHistoricalData(marketplace) {\r\n      const ignoreColumnNames = []\r\n      if (this.selected.report && !this.selected.report.show_upc_in_dashboard) {\r\n        ignoreColumnNames.push('upc')\r\n      }\r\n      const emptyDataColumnNames = []\r\n      if (this.selected.report && this.selected.report.ignore_price_tracking) {\r\n        emptyDataColumnNames.push(...['map_price', 'diff', 'diff_percent'])\r\n      }\r\n\r\n      return {\r\n        type: 'cbpo-widget',\r\n        config: configHistoricalDataTable(\r\n          this.violationDataSourceConnection.ds_external_id,\r\n          this.buildFilterHistoricalData(marketplace),\r\n          ignoreColumnNames,\r\n          emptyDataColumnNames)\r\n      }\r\n    },\r\n    buildFilterHistoricalData(marketplace) {\r\n      const conditions = [\r\n        {\r\n          column: 'marketplace',\r\n          operator: '==',\r\n          value: 'amazon.com'\r\n        },\r\n        {\r\n          column: 'report_id',\r\n          operator: '==',\r\n          value: this.selected.report._id\r\n        }\r\n      ]\r\n      if (!_.isEmpty(this.selected.fulfillment)) {\r\n        const operator = this.selected.fulfillment === 'FBA' ? 'is_true' : 'is_false'\r\n        conditions.push({\r\n          column: 'fba',\r\n          value: '',\r\n          operator\r\n        })\r\n      }\r\n      conditions.push({\r\n        column: 'violation_date_string',\r\n        operator: '==',\r\n        value: this.selectedDate\r\n      })\r\n      if (_.isEqual(this.selected.seller_type, 'authorized_sellers')) {\r\n        conditions.push({\r\n          column: 'is_authorized_seller',\r\n          operator: 'is_true',\r\n          value: ''\r\n        })\r\n      }\r\n      return {\r\n        type: 'AND',\r\n        conditions\r\n      }\r\n    },\r\n    _renderDashboardWidgets() {\r\n      // if (this.selected.report && !this.selected.report.show_upc_in_dashboard) {\r\n      //   this.handleCaseRemoveColumn('Historical Data Table', ['upc/ean'])\r\n      // }\r\n      // const isTrueMap = !!this.selected.report.true_map_report\r\n      // if (!isTrueMap) {\r\n      //   this.handleCaseRemoveColumn('Historical Data Table', ['map_price', 'diff', 'diff_percent'])\r\n      // }\r\n      // let el = $(this.$el).find('.widgets-container:eq(0)')\r\n      // el.html(\r\n      //   '<cbpo-dashboard config-ref=\"mw_dashboard_main_config\" class=\"mw-sdk-styled\" />'\r\n      // )\r\n      // this.$CBPO.wgManager().init('.widgets-container')\r\n      // this.$forceUpdate()\r\n      this.sdkConfigForceReload++\r\n    },\r\n    async fetchAndRenderDashboardWidgets() {\r\n      await this._fetchDashboardWidgetData()\r\n      // this._renderDashboardWidgets()\r\n    },\r\n    async fetchDate() {\r\n      let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n      await this.fetchDataDateHistorical(this.useShareTokenIfNeed({\r\n        marketplace: marketplace,\r\n        report_id: this.selected.report._id,\r\n        seller_type: this.selected.seller_type,\r\n        fulfillment: this.selected.fulfillment\r\n      }))\r\n      this.dates = this.dataDateHistorical.dates\r\n      if (this.dates.length > 0) {\r\n        this.selectedDate = this.dates[0]\r\n      } else {\r\n        this.selectedDate = null\r\n      }\r\n      this.setSelectedDate(this.selectedDate)\r\n      this.fetchAndRenderDashboardWidgets()\r\n    },\r\n    dateChange(e) {\r\n      this.selectedDate = e.target.value\r\n      this.setSelectedDate(this.selectedDate)\r\n      this.fetchAndRenderDashboardWidgets()\r\n    },\r\n    async _fetchDs() {\r\n      try {\r\n        return await this.getDsMaps()\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n  },\r\n  async created() {\r\n    const allDataSources = await this._fetchDs()\r\n    this.violationDataSourceConnection = _.find(allDataSources, ele => ele.type === 'vio')\r\n    this.fetchDate()\r\n  },\r\n\r\n  watch: {\r\n    '$route.query'(val) {\r\n      this.fetchDate()\r\n    }\r\n  },\r\n  destroyed() {\r\n    this.$CBPO.$bus.$off(`trigger_button_history_${TYPE.DOWNLOAD_DAILY_VIOLATIONS}`)\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n\r\n.pl-05 {\r\n  padding-left: 0.5rem !important;\r\n}\r\n\r\n.mb-0 {\r\n  margin-bottom: 0 !important;\r\n}\r\n\r\n.mw-historical-control-select {\r\n  padding: 0.5rem;\r\n  label {\r\n    margin: 0;\r\n    padding: 5px 10px 5px 9px;\r\n    display: inline-block;\r\n  }\r\n  select {\r\n    padding: .2rem .5rem;\r\n    width: auto;\r\n    height: auto;\r\n    display: inline-block;\r\n    font-size: 11.5px;\r\n    border-radius: 0;\r\n  }\r\n}\r\n.mw-sdk-styled {\r\n  &.cbpo-dashboard {\r\n    border: none;\r\n  }\r\n  /deep/ {\r\n    .cbpo-dashboard-container{\r\n      border: none;\r\n      padding: 0\r\n    }\r\n    .cbpo-wrapper-action{\r\n      margin-left: auto;\r\n    }\r\n    .cbpo-btn {\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n    .cbpo-btn .spinner-border {\r\n      width: 10px;\r\n      height: 10px;\r\n      border-width: 1px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}