{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardMain.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\dashboard\\DashboardMain.vue","mtime":1629276564696},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport { configDailyViolatorWithInventory } from '@/store/modules/page/dashboard/sub_configs/config-daily-violator-with-inventory'\r\nimport $ from 'jquery'\r\nimport _ from 'lodash'\r\nimport { Promise } from 'q'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport { DashboardFilterSourceType } from '@/constants/Report'\r\nimport { DashboardAllSellerTitle, DashboardViolatorTitle, DashboardViolatorTitleNoTrueMap, DashboardWidgetId } from '@/constants/Dashboard'\r\n\r\nexport default {\r\n  props: ['selected'],\r\n  mixins: [PermissionsMixin],\r\n  data: () => ({\r\n    dashboardFilterSourceType: _.cloneDeep(DashboardFilterSourceType),\r\n    dashboardAllSellerTitle: _.cloneDeep(DashboardAllSellerTitle),\r\n    dashboardViolatorTitle: _.cloneDeep(DashboardViolatorTitle),\r\n    dashboardViolatorTitleNoTrueMap: _.cloneDeep(DashboardViolatorTitleNoTrueMap),\r\n    dashboardWidgetId: _.cloneDeep(DashboardWidgetId),\r\n    dates: [],\r\n    selectedDate: null,\r\n    sdkConfigInitialized: false,\r\n    sdkConfigForceReload: 0\r\n  }),\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`,\r\n      dataViolator: `mw/dashboard/${TYPE.GET_DATA_VIOLATOR}`,\r\n      dataViolatorWithInventory: `mw/dashboard/${TYPE.GET_DATA_VIOLATOR_WITH_INVENTORY}`,\r\n      dataTopViolatedProductViolator: `mw/dashboard/${\r\n        TYPE.GET_DATA_TOP_VIOLATED_PRODUCTS_7D\r\n      }`,\r\n      dataNew1stTimeViolator: `mw/dashboard/${TYPE.GET_DATA_NEW_1ST_TIME}`,\r\n      dataNew2ndTimeViolator: `mw/dashboard/${TYPE.GET_DATA_NEW_2ND_TIME}`,\r\n      dataSellerViolations7d: `mw/dashboard/${TYPE.GET_DATA_SELLER_VIOLATIONS_7D}`,\r\n      dataAvgPercentageOffMap: `mw/dashboard/${\r\n        TYPE.GET_DATA_AVG_PERCENTAGE_OFF_MAP\r\n      }`,\r\n      dataNewRepeatViolators: `mw/dashboard/${TYPE.GET_DATA_NEW_REPEAT_VIOLATORS}`,\r\n      dataAllRepeatOffenders: `mw/dashboard/${TYPE.GET_DATA_ALL_REPEAT_OFFENDERS}`,\r\n      mainConfig: `mw/dashboard/${TYPE.GET_DATA_CONFIG_VIOLATOR}`,\r\n      downloadDailyLoader: `mw/dashboard/${TYPE.GET_DOWNLOAD_DAILY_LOADER}`,\r\n      downloadNewRepeatLoader: `mw/dashboard/${TYPE.GET_DOWNLOAD_NEW_REPEAT_LOADER}`,\r\n      dataDateHistorical: `mw/dashboard/${TYPE.GET_DATE_HISTORICAL}`,\r\n      orgIs: `mw/${TYPE.GET_ORG_IS}`\r\n    })\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchDataViolator: `mw/dashboard/${TYPE.FETCH_DATA_VIOLATOR}`,\r\n      fetchAllWidgetData: `mw/dashboard/${TYPE.FETCH_ALL_WIDGET}`,\r\n      fetchDataDailyWithInventoryViolator: `mw/dashboard/${TYPE.FETCH_DATA_VIOLATOR_WITH_INVENTORY}`,\r\n      fetchDataTopViolatedProduct: `mw/dashboard/${\r\n        TYPE.FETCH_DATA_TOP_VIOLATED_PRODUCTS_7D\r\n      }`,\r\n      fetchDataNew1stTimeViolator: `mw/dashboard/${TYPE.FETCH_DATA_NEW_1ST_TIME}`,\r\n      fetchDataNew2ndTimeViolator: `mw/dashboard/${TYPE.FETCH_DATA_NEW_2ND_TIME}`,\r\n      fetchDataSellerViolations7d: `mw/dashboard/${\r\n        TYPE.FETCH_DATA_SELLER_VIOLATIONS_7D\r\n      }`,\r\n      fetchDataAvgPercentageOffMap: `mw/dashboard/${\r\n        TYPE.FETCH_DATA_AVG_PERCENTAGE_OFF_MAP\r\n      }`,\r\n      fetchDataNewRepeatViolators: `mw/dashboard/${\r\n        TYPE.FETCH_DATA_NEW_REPEAT_VIOLATORS\r\n      }`,\r\n      fetchDataAllRepeatOffenders: `mw/dashboard/${\r\n        TYPE.FETCH_DATA_ALL_REPEAT_OFFENDERS\r\n      }`,\r\n      downloadDailyViolations: `mw/dashboard/${TYPE.FETCH_DOWNLOAD_DAILY_VIOLATIONS}`,\r\n      downloadNewRepeatViolators: `mw/dashboard/${TYPE.FETCH_DOWNLOAD_NEW_REPEAT_VIOLATORS}`,\r\n      downloadDailyViolationsWithInventory: `mw/dashboard/${TYPE.FETCH_DOWNLOAD_DAILY_VIOLATIONS_WITH_INVENTORY}`,\r\n      fetchDataDateHistorical: `mw/dashboard/${TYPE.FETCH_DATE_HISTORICAL}`,\r\n      setSelectedDate: `mw/dashboard/${TYPE.SET_SELECTED_DATE}`\r\n    }),\r\n    syncMarketplaceParams (marketplace) {\r\n      return _.includes(marketplace, 'amazon') ? marketplace.replace(/[_]/g, '.') : marketplace\r\n    },\r\n    handleDataViolator (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataViolator(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment,\r\n          show_upc_in_dashboard: this.selected.brand.show_upc_in_dashboard\r\n        })).then(() => {\r\n          let fakeDaily = { ...this.dataViolator }\r\n          fakeDaily = this.emptyRowData(fakeDaily, this.getIgnoredColumnsDaily(this.selected.brand))\r\n          if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n            fakeDaily = this.removeColumnData(fakeDaily, ['upc/ean'])\r\n          }\r\n          window.mw_dashboard_main_daily_visitors = fakeDaily\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    /**\r\n     * Use share token\r\n     * Add needed source param\r\n     */\r\n    useShareTokenIfNeed (object) {\r\n      if (this.selected.share_token) {\r\n        _.assign(object, { share_token: this.selected.share_token })\r\n      }\r\n      _.assign(object, { source: this.selected.source })\r\n      _.assign(object, { is_true_map: !!this.selected.brand.true_map_report })\r\n      return object\r\n    },\r\n    getIgnoredColumnsDaily (brand) {\r\n      let ignoredColumns = []\r\n      if (brand && brand.ignore_screenshot) {\r\n        ignoredColumns.push('screenshot', 'captured_at')\r\n      }\r\n      if (brand && brand.ignore_price_tracking) {\r\n        ignoredColumns.push('map_price', 'diff', 'diff_percent')\r\n      }\r\n      if (brand && this.selected.marketplace === 'google_shopping') {\r\n        ignoredColumns.push('fba', 'prime')\r\n      }\r\n      return ignoredColumns\r\n    },\r\n    handleDataDailyWithInventoryViolator (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataDailyWithInventoryViolator({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment,\r\n          show_upc_in_dashboard: this.selected.brand.show_upc_in_dashboard,\r\n          source: this.selected.source,\r\n          is_true_map: !!this.selected.brand.true_map_report\r\n        })\r\n          .then(() => {\r\n            let fakeDaily = { ...this.dataViolatorWithInventory }\r\n            fakeDaily = this.emptyRowData(fakeDaily, this.getIgnoredColumnsDaily(this.selected.brand))\r\n            if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n              fakeDaily = this.removeColumnData(fakeDaily, ['upc/ean'])\r\n            }\r\n            window.mw_dashboard_main_daily_with_inventory_visitors = fakeDaily\r\n            resolve()\r\n          })\r\n      })\r\n    },\r\n    handleDataTopViolatedProduct (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataTopViolatedProduct(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        }))\r\n          .then(() => {\r\n            window.mw_dashboard_top_violated = this.dataTopViolatedProductViolator\r\n            resolve()\r\n          })\r\n      })\r\n    },\r\n    handleDataNew1stTimeViolator (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataNew1stTimeViolator(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment,\r\n          show_upc_in_dashboard: this.selected.brand.show_upc_in_dashboard\r\n        })).then(() => {\r\n          let fake1stData = { ...this.dataNew1stTimeViolator }\r\n          fake1stData = this.emptyRowData(fake1stData, this.getIgnoredColumns1st(this.selected.brand))\r\n          if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n            fake1stData = this.removeColumnData(fake1stData, ['upc/ean'])\r\n          }\r\n          window.mw_dashboard_new_1st_time = fake1stData\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    getIgnoredColumns1st (brand) {\r\n      let ignoredColumns = []\r\n      if (brand && brand.ignore_price_tracking) {\r\n        ignoredColumns.push('map')\r\n      }\r\n      if (brand && brand.ignore_screenshot) {\r\n        ignoredColumns.push('screenshot')\r\n      }\r\n      return ignoredColumns\r\n    },\r\n    handleDataNew2ndTimeViolator (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataNew2ndTimeViolator(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment,\r\n          show_upc_in_dashboard: this.selected.brand.show_upc_in_dashboard\r\n        })).then(() => {\r\n          let fake2nd = { ...this.dataNew2ndTimeViolator }\r\n          fake2nd = this.emptyRowData(fake2nd, this.getIgnoredColumns2st(this.selected.brand))\r\n          if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n            fake2nd = this.removeColumnData(fake2nd, ['upc/ean'])\r\n          }\r\n          window.mw_dashboard_new_2nd_time = fake2nd\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    getIgnoredColumns2st (brand) {\r\n      let ignoredColumns = []\r\n      if (brand && brand.ignore_price_tracking) {\r\n        ignoredColumns.push('map')\r\n      }\r\n      if (brand.marketplace === 'google_shopping') {\r\n        ignoredColumns = ['date_violated']\r\n      }\r\n      return ignoredColumns\r\n    },\r\n    handleDataSellerViolations7d (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataSellerViolations7d(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        }))\r\n          .then(() => {\r\n            window.mw_dashboard_seller_violations_7d = this.dataSellerViolations7d\r\n            resolve()\r\n          })\r\n      })\r\n    },\r\n    handleDataAvgPercentageOffMap (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataAvgPercentageOffMap(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        }))\r\n          .then(() => {\r\n            let fakeAVGPercent = { ...this.dataAvgPercentageOffMap }\r\n            fakeAVGPercent = this.emptyRowData(fakeAVGPercent, this.getIgnoredColumnsAvgPercent(this.selected.brand))\r\n            window.mw_dashboard_avg_percentage_off_map = _.cloneDeep(fakeAVGPercent)\r\n            resolve()\r\n          })\r\n      })\r\n    },\r\n    getIgnoredColumnsAvgPercent (brand) {\r\n      let ignoredColumns = []\r\n      if (brand && brand.ignore_price_tracking) {\r\n        ignoredColumns.push('seller_name', 'average_off_map_percent', 'average_off_map_percent')\r\n      }\r\n      return ignoredColumns\r\n    },\r\n    handleDataAllRepeatOffenders (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataAllRepeatOffenders(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        }))\r\n          .then(() => {\r\n            window.mw_dashboard_all_repeat_offenders = this.dataAllRepeatOffenders\r\n            resolve()\r\n          })\r\n      })\r\n    },\r\n    handleDataNewRepeatViolators (marketplace) {\r\n      return new Promise((resolve, reject) => {\r\n        this.fetchDataNewRepeatViolators(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment,\r\n          show_upc_in_dashboard: this.selected.brand.show_upc_in_dashboard\r\n        })).then(() => {\r\n          let fakeNewRepeat = { ...this.dataNewRepeatViolators }\r\n          fakeNewRepeat = this.emptyRowData(fakeNewRepeat, this.getIgnoredColumnsNewRepeat(this.selected.brand))\r\n          if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n            fakeNewRepeat = this.removeColumnData(fakeNewRepeat, ['upc/ean'])\r\n          }\r\n          window.mw_dashboard_new_repeat_violators = fakeNewRepeat\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    getIgnoredColumnsNewRepeat (brand) {\r\n      let ignoredColumns = []\r\n      if (brand && brand.ignore_price_tracking) {\r\n        ignoredColumns.push('map', 'diff_percent')\r\n      }\r\n      return ignoredColumns\r\n    },\r\n    handlePrepareApisForData (isOeUser, marketplace) {\r\n      let apis = [\r\n        this.handleDataViolator(marketplace),\r\n        this.handleDataTopViolatedProduct(marketplace),\r\n        this.handleDataSellerViolations7d(marketplace),\r\n        this.handleDataAvgPercentageOffMap(marketplace),\r\n        this.handleDataNew1stTimeViolator(marketplace),\r\n        this.handleDataNew2ndTimeViolator(marketplace),\r\n        this.handleDataNewRepeatViolators(marketplace),\r\n        this.handleDataAllRepeatOffenders(marketplace)\r\n      ]\r\n      if (isOeUser) {\r\n        apis.push(this.handleDataDailyWithInventoryViolator(marketplace))\r\n      }\r\n      return apis\r\n    },\r\n    handlePrepareApisForDataOptimized (isOeUser, marketplace) {\r\n      let apis = [\r\n        this.fetchAllWidgetData({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment,\r\n          show_upc_in_dashboard: this.selected.brand.show_upc_in_dashboard,\r\n          source: this.selected.source,\r\n          is_true_map: !!this.selected.brand.true_map_report\r\n        })\r\n      ]\r\n      if (isOeUser) {\r\n        apis.push(this.handleDataDailyWithInventoryViolator(marketplace))\r\n      }\r\n      return apis\r\n    },\r\n    async _fetchDashboardWidgetData () {\r\n      let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n      const invsee = _.get(this.getPermissions, 'permissions.invsee')\r\n      const apis = this.handlePrepareApisForDataOptimized(invsee, marketplace)\r\n      const self = this\r\n      await Promise.all(apis).then(() => {\r\n        // handleDataViolator\r\n        let fakeDaily = { ...this.dataViolator }\r\n        fakeDaily = this.emptyRowData(fakeDaily, this.getIgnoredColumnsDaily(this.selected.brand))\r\n        if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n          fakeDaily = this.removeColumnData(fakeDaily, ['upc/ean'])\r\n        }\r\n        window.mw_dashboard_main_daily_visitors = fakeDaily\r\n        // handleDataTopViolatedProduct\r\n        window.mw_dashboard_top_violated = this.dataTopViolatedProductViolator\r\n        // handleDataSellerViolations7d\r\n        window.mw_dashboard_seller_violations_7d = this.dataSellerViolations7d\r\n        // handleDataAvgPercentageOffMap\r\n        let fakeAVGPercent = { ...this.dataAvgPercentageOffMap }\r\n        fakeAVGPercent = this.emptyRowData(fakeAVGPercent, this.getIgnoredColumnsAvgPercent(this.selected.brand))\r\n        window.mw_dashboard_avg_percentage_off_map = _.cloneDeep(fakeAVGPercent)\r\n        // handleDataNew1stTimeViolator\r\n        let fake1stData = { ...this.dataNew1stTimeViolator }\r\n        fake1stData = this.emptyRowData(fake1stData, this.getIgnoredColumns1st(this.selected.brand))\r\n        if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n          fake1stData = this.removeColumnData(fake1stData, ['upc/ean'])\r\n        }\r\n        window.mw_dashboard_new_1st_time = fake1stData\r\n        // handleDataNew2ndTimeViolator\r\n        let fake2nd = { ...this.dataNew2ndTimeViolator }\r\n        fake2nd = this.emptyRowData(fake2nd, this.getIgnoredColumns2st(this.selected.brand))\r\n        if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n          fake2nd = this.removeColumnData(fake2nd, ['upc/ean'])\r\n        }\r\n        window.mw_dashboard_new_2nd_time = fake2nd\r\n        if (this.selected.brand.true_map_report) {\r\n          // handleDataNewRepeatViolators\r\n          let fakeNewRepeat = { ...this.dataNewRepeatViolators }\r\n          fakeNewRepeat = this.emptyRowData(fakeNewRepeat, this.getIgnoredColumnsNewRepeat(this.selected.brand))\r\n          if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n            fakeNewRepeat = this.removeColumnData(fakeNewRepeat, ['upc/ean'])\r\n          }\r\n          window.mw_dashboard_new_repeat_violators = fakeNewRepeat\r\n        }\r\n        // handleDataAllRepeatOffenders\r\n        window.mw_dashboard_all_repeat_offenders = this.dataAllRepeatOffenders\r\n        let cloneObj = $.extend(true, {}, this.mainConfig)\r\n        // TODO Remove this function when Builder mode was merged into develop\r\n        if (self.selected.brand && self.selected.brand.client_id === '98596dc6-c495-4ff8-83fc-81e9b46232cd') {\r\n          cloneObj.widgets = cloneObj.widgets.filter((c, i) => i < 2)\r\n        }\r\n        if (invsee && this.orgIs) {\r\n          cloneObj.widgetLayout.widgets.push($.extend(true, {}, configDailyViolatorWithInventory))\r\n        }\r\n        const widgets = cloneObj.widgetLayout.widgets\r\n        const isTrueMap = !!this.selected.brand.true_map_report\r\n        for (const [index, widget] of widgets.entries()) {\r\n          const widgetId = widget.config.widget_id\r\n          if (widgetId) {\r\n            const text = this.selected.source === this.dashboardFilterSourceType.ALL_SELLERS ? this.dashboardAllSellerTitle[widgetId] : isTrueMap ? this.dashboardViolatorTitle[widgetId] : this.dashboardViolatorTitleNoTrueMap[widgetId]\r\n            cloneObj.widgetLayout.widgets[index].config.widget.title.text = text\r\n          }\r\n        }\r\n        if (!isTrueMap) {\r\n          cloneObj.widgetLayout.widgets = _.filter(cloneObj.widgetLayout.widgets, (item) => {\r\n            return !_.includes([this.dashboardWidgetId.avg_percentage_off_map, this.dashboardWidgetId.new_repeat_violators], item.config.widget_id)\r\n          })\r\n          if (this.selected.source !== this.dashboardFilterSourceType.ALL_SELLERS) {\r\n            const index = _.findIndex(cloneObj.widgetLayout.widgets, (item) => { return item.config.widget_id === this.dashboardWidgetId.all_repeat_offenders })\r\n            if (index > 0) {\r\n              cloneObj.widgetLayout.widgets[index].config.elements[0].config.columns[1].displayName = 'Days with Listings'\r\n              cloneObj.widgetLayout.widgets[index].config.elements[0].config.columns[2].displayName = 'Number of Listings Active'\r\n            }\r\n          }\r\n          cloneObj.widgetLayout.widgets[1].config.grid.h = 40\r\n          cloneObj.widgetLayout.widgets[5].config.grid.x = 0\r\n          cloneObj.widgetLayout.widgets[5].config.grid.w = 12\r\n        }\r\n        window.ms_dashboard_main_config = cloneObj\r\n        // TODO: SDK support API refresh data source\r\n        if (!this.sdkConfigInitialized) {\r\n          // for first time\r\n          this.sdkConfigInitialized = true\r\n        } else {\r\n          // change dataSource effect to sdk\r\n          this.sdkConfigForceReload++\r\n        }\r\n      })\r\n    },\r\n    emptyRowData (data, cols = []) {\r\n      if (!cols.length || !data || !data.cols || !data.rows) return data\r\n      let names = data.cols.map(d => d.name)\r\n      let indexs = cols.reduce((a, c) => {\r\n        if (names.includes(c)) a.push(names.indexOf(c))\r\n        return a\r\n      }, []).filter(e => e >= 0)\r\n      indexs.forEach(i => {\r\n        data.rows = data.rows.map(r => {\r\n          r[i] = null\r\n          return r\r\n        })\r\n      })\r\n      return data\r\n    },\r\n    // remove column from table data\r\n    removeColumnData (data, cols = []) {\r\n      if (!cols.length || !data || !data.cols || !data.rows) return data\r\n      let names = data.cols.map(d => d.name)\r\n      let indexs = cols.reduce((a, c) => {\r\n        if (names.includes(c)) a.push(names.indexOf(c))\r\n        return a\r\n      }, []).filter(e => e >= 0)\r\n      indexs.forEach(i => {\r\n        data.rows = data.rows.map(r => {\r\n          r[i] = null\r\n          return r\r\n        })\r\n      })\r\n      return data\r\n    },\r\n    handleCaseRemoveColumn (widgetName, arrayLabel) {\r\n      let widget = this.findWidgetByLabel(window.ms_dashboard_main_config.widgetLayout.widgets, widgetName)\r\n      if (widget) {\r\n        widget.config.elements[0].config.columns = this.removeColumnByLabel(widget.config.elements[0].config.columns, arrayLabel)\r\n      }\r\n    },\r\n    removeColumnByLabel (arrayColumn, arrayLabel) {\r\n      return arrayColumn.filter(column => !arrayLabel.includes(column.name))\r\n    },\r\n    _renderDashboardWidgets () {\r\n      const isAllSellerMode = this.selected.source === this.dashboardFilterSourceType.ALL_SELLERS\r\n      const isTrueMap = !!this.selected.brand.true_map_report\r\n      const titleSource = isAllSellerMode ? this.dashboardAllSellerTitle : !isTrueMap && !isAllSellerMode ? this.dashboardViolatorTitleNoTrueMap : this.dashboardViolatorTitle\r\n      if (this.selected.brand && !this.selected.brand.show_upc_in_dashboard) {\r\n        this.handleCaseRemoveColumn(titleSource.daily_violator, ['upc/ean'])\r\n        this.handleCaseRemoveColumn(titleSource.new_1st_time_violator, ['upc/ean'])\r\n        this.handleCaseRemoveColumn(titleSource.new_2nd_time_violator, ['upc/ean'])\r\n        this.handleCaseRemoveColumn(titleSource.new_repeat_violators, ['upc/ean'])\r\n      }\r\n      if (!isTrueMap) {\r\n        this.handleCaseRemoveColumn(titleSource.daily_violator, ['map_price', 'diff', 'diff_percent'])\r\n        this.handleCaseRemoveColumn(titleSource.daily_violator_with_inventory, ['diff', 'diff_percent'])\r\n        this.handleCaseRemoveColumn(titleSource.new_1st_time_violator, ['map'])\r\n        this.handleCaseRemoveColumn(titleSource.new_2nd_time_violator, ['map'])\r\n        this.handleCaseRemoveColumn(titleSource.new_repeat_violators, ['map', 'diff_percent'])\r\n        this.handleCaseRemoveColumn(titleSource.new_repeat_violators, ['map', 'diff_percent'])\r\n      }\r\n      // let el = $(this.$el).find('.widgets-container:eq(0)')\r\n      // el.html(\r\n      //   '<cbpo-dashboard config-ref=\"ms_dashboard_main_config\" class=\"mw-sdk-styled\" />'\r\n      // )\r\n      // this.$CBPO.wgManager().init('.widgets-container')\r\n      // this.$forceUpdate()\r\n      this.sdkConfigForceReload++\r\n    },\r\n    findWidgetByLabel (widgetArray, label) {\r\n      return widgetArray.find(widget => widget.config.widget.title.text === label)\r\n    },\r\n    async handleFetchSetting () {\r\n      const showDashboard = await this.fetchSetting()\r\n      return showDashboard\r\n    },\r\n    async fetchAndRenderDashboardWidgets () {\r\n      await this._fetchDashboardWidgetData()\r\n      this._renderDashboardWidgets()\r\n    },\r\n    createEventButtonAction () {\r\n      // Download button NEW REPEAT widgets\r\n\r\n      this.$CBPO.$bus.$on(`trigger_button_${TYPE.DOWNLOAD_NEW_REPEAT_VIOLATORS}`, () => {\r\n        let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n        this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_NEW_REPEAT_VIOLATORS + '_stateChange', true)\r\n        this.downloadNewRepeatViolators(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        })).then((link) => {\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_NEW_REPEAT_VIOLATORS + '_stateChange', false)\r\n          if (link && link.uri) {\r\n            let a = document.createElement('a')\r\n            a.href = link.uri\r\n            a.click()\r\n          }\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_NEW_REPEAT_VIOLATORS + '_stateChange', false)\r\n        })\r\n      })\r\n      // Download button DAILY VIOLATOR widget\r\n      this.$CBPO.$bus.$on(`trigger_button_${TYPE.DOWNLOAD_DAILY_VIOLATIONS}`, () => {\r\n        let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n        this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS + '_stateChange', true)\r\n        this.downloadDailyViolations(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        })).then((link) => {\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS + '_stateChange', false)\r\n          if (link && link.uri) {\r\n            let a = document.createElement('a')\r\n            a.href = link.uri\r\n            a.click()\r\n          }\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS + '_stateChange', false)\r\n        })\r\n      })\r\n      this.$CBPO.$bus.$on(`trigger_button_${TYPE.DOWNLOAD_DAILY_VIOLATIONS_WITH_INVENTORY}`, () => {\r\n        let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n        this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS_WITH_INVENTORY + '_stateChange', true)\r\n        this.downloadDailyViolationsWithInventory(this.useShareTokenIfNeed({\r\n          date: this.selectedDate,\r\n          marketplace: marketplace,\r\n          brand_id: this.selected.brand._id,\r\n          seller_type: this.selected.seller_type,\r\n          fulfillment: this.selected.fulfillment\r\n        })).then((link) => {\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS_WITH_INVENTORY + '_stateChange', false)\r\n          if (link && link.uri) {\r\n            let a = document.createElement('a')\r\n            a.href = link.uri\r\n            a.click()\r\n          }\r\n          this.$CBPO.$bus.$emit(TYPE.DOWNLOAD_DAILY_VIOLATIONS_WITH_INVENTORY + '_stateChange', false)\r\n        })\r\n      })\r\n    },\r\n    async fetchDate () {\r\n      // TODO: SDK support API refresh data source\r\n      this.sdkConfigInitialized = false\r\n      let marketplace = this.syncMarketplaceParams(this.selected.marketplace)\r\n      await this.fetchDataDateHistorical(this.useShareTokenIfNeed({\r\n        marketplace: marketplace,\r\n        seller_type: this.selected.seller_type,\r\n        brand_id: this.selected.brand._id\r\n      }))\r\n      this.dates = this.dataDateHistorical.dates\r\n      if (this.dates.length > 0) {\r\n        this.selectedDate = this.dates[0]\r\n      } else {\r\n        this.selectedDate = null\r\n      }\r\n      this.setSelectedDate(this.selectedDate)\r\n      // render Dashboard Widgets\r\n      this.fetchAndRenderDashboardWidgets()\r\n    },\r\n    dateChange (e) {\r\n      this.selectedDate = e.target.value\r\n      this.setSelectedDate(this.selectedDate)\r\n      this.fetchAndRenderDashboardWidgets()\r\n    }\r\n  },\r\n  async created () {\r\n    this.fetchDate()\r\n    this.createEventButtonAction()\r\n  },\r\n  watch: {\r\n    '$route.query' (val) {\r\n      this.fetchDate()\r\n    }\r\n  },\r\n  destroyed () {\r\n    this.$CBPO.$bus.$off(`trigger_button_${TYPE.DOWNLOAD_NEW_REPEAT_VIOLATORS}`)\r\n    this.$CBPO.$bus.$off(`trigger_button_${TYPE.DOWNLOAD_DAILY_VIOLATIONS}`)\r\n    this.$CBPO.$bus.$off(`trigger_button_${TYPE.DOWNLOAD_DAILY_VIOLATIONS_WITH_INVENTORY}`)\r\n  }\r\n}\r\n\r\n",null]}