{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\containers\\MWSidebarNav.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\containers\\MWSidebarNav.vue","mtime":1629453115691},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n\r\nimport SidebarNav from './SidebarNav'\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport _nav from '@/_nav'\r\nimport _ from 'lodash'\r\nimport each from 'lodash/each'\r\nimport has from 'lodash/has'\r\nimport * as TYPE from '@/actionTypes.js'\r\n\r\nexport default {\r\n  name: 'MWSidebar',\r\n  components: {\r\n    SidebarNav\r\n  },\r\n  data() {\r\n    return {\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`\r\n    }),\r\n    nav() {\r\n      // check permissions\r\n      let menuItems = [{\r\n        name: 'Home',\r\n        icon: 'icon-home',\r\n        to: { name: 'ps-dashboard' }\r\n      }]\r\n      const mwPermissions = this.getPermissions\r\n      if (mwPermissions && mwPermissions.permissions) {\r\n        // render mw nav based on permission\r\n        const permissionsFromStore = mwPermissions.permissions\r\n        let permissionsArray = Object.keys(permissionsFromStore).filter(k => permissionsFromStore[k])\r\n        if (!_.isEmpty(permissionsArray)) {\r\n          each(_nav.items, (item) => {\r\n            if (_.size(item.permissions) === 0) {\r\n              // check the menu Seller Enforcements\r\n              if (_.has(item, 'to') && _.has(this.planConfig, 'seller_enforcement_enabled')) {\r\n                if (item.to.name === 'MWListSellerEnforcements' && this.planConfig.seller_enforcement_enabled === false) return\r\n              }\r\n              if (_.has(item, 'to') && permissionsFromStore.seview === false) {\r\n                if (item.to.name === 'MWListSellerEnforcements') return\r\n              }\r\n              // check the menu MAP Pricing (gs) and planConfig google_shopping\r\n              if (_.has(item, 'to') && _.has(permissionsFromStore, 'gsmapman')) {\r\n                if ((item.to.name === 'MWGSListMaps' && permissionsFromStore.gsmapman === false) || (item.to.name === 'MWGSListMaps' && this.planConfig.max_of_reports_with_google_shopping === 0)) return\r\n              }\r\n              // check the menu MAP Pricing and planConfig amazon_marketplaces\r\n              if (_.has(item, 'to') && _.has(permissionsFromStore, 'mapman')) {\r\n                if ((item.to.name === 'MWListMaps' && permissionsFromStore.mapman === false) || (item.to.name === 'MWListMaps' && _.isEmpty(this.planConfig.allowed_amazon_marketplaces)) || (item.to.name === 'MWListMaps' && this.planConfig.max_of_reports_with_amazon === 0)) return\r\n              }\r\n              menuItems.push(item)\r\n            } else {\r\n              const filterPermissions = _.filter(item.permissions, (permission) => {\r\n                return !_.includes(permissionsArray, permission)\r\n              })\r\n              if (_.isEmpty(filterPermissions)) {\r\n                // check the menu SELLERS & INVESTIGATIONS\r\n                if (_.has(item, 'to') && _.has(this.planConfig, 'seller_investigation_dashboard')) {\r\n                  const siPageList = ['MWSellerDashboardIndex', 'MWSIListings', 'MWSISellerList']\r\n                  if ((_.includes(siPageList, item.to.name) && this.planConfig.seller_investigation_dashboard === false) || (_.includes(siPageList, item.to.name) && permissionsFromStore.siview === false)) return\r\n                }\r\n                if (_.has(item, 'meta') && _.has(this.planConfig, 'seller_investigation_dashboard')) {\r\n                  if ((item.meta.isSIParent && this.planConfig.seller_investigation_dashboard === false) || (item.meta.isSIParent && permissionsFromStore.siview === false)) return\r\n                }\r\n                menuItems.push(item)\r\n              }\r\n            }\r\n          })\r\n          return menuItems\r\n        } else if (mwPermissions && mwPermissions.module_enabled) {\r\n          each(_nav.items, (item) => {\r\n            if (_.size(item.permissions) === 0) {\r\n              menuItems.push(item)\r\n            }\r\n          })\r\n        }\r\n      }\r\n      return menuItems\r\n    },\r\n    isSIPage () {\r\n      const siPageUrlList = ['si-listings', 'sellers', 'listings']\r\n      for (let item of siPageUrlList) {\r\n        if (this.$route.path.includes(item)) return true\r\n      }\r\n      return false\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`\r\n    }),\r\n    async fetchPermissionsWithCache() {\r\n      await this.fetchPermissions()\r\n      this.gotoGlobalHomePageIfFailPlanConfig()\r\n    },\r\n    gotoGlobalHomePageIfFailPlanConfig() {\r\n      if (this.planConfig.seller_enforcement_enabled === false && this.$route.path.includes('seller-enforcements')) {\r\n        alert('seller-enforcements')\r\n        this.$router.push({'name': 'ps-dashboard'})\r\n      } else if (this.planConfig.seller_investigation_dashboard === false && this.isSIPage) {\r\n        this.$router.push({'name': 'ps-dashboard'})\r\n      }\r\n    },\r\n    getShareToken(payload) {\r\n      const token = has(payload, 'share_token') ? payload.share_token : null\r\n      const config = token ? { share_token: token } : {}\r\n      return { config: config }\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.path': {\r\n      immediate: true,\r\n      async handler() {\r\n        if (this.$route.meta && this.$route.meta.reloadPermissions) {\r\n          await this.fetchPermissions(this.getShareToken(this.$route.query)).then(() => {\r\n            if (this.isSIPage || this.$route.path.includes('seller-enforcements')) {\r\n              this.gotoGlobalHomePageIfFailPlanConfig()\r\n            }\r\n          })\r\n        } else {\r\n          await this.fetchPermissionsWithCache()\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // async created() {\r\n  //   console.log('sidebar')\r\n  //   await this.fetchPermissions()\r\n  // },\r\n  // methods: {\r\n  //   ...mapActions({\r\n  //     fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`\r\n  //   })\r\n  // }\r\n}\r\n",null]}