{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellers\\Listings.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellers\\Listings.vue","mtime":1629363796868},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport toastMixin from './../toastMixin'\r\nimport _nav from '@/_nav'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\n// import _ from 'lodash'\r\nimport * as TYPE from '@/actionTypes.js'\r\n\r\nexport default {\r\n  name: 'MWSIListings',\r\n  mixins: [toastMixin, PermissionsMixin],\r\n  data: function () {\r\n    return {\r\n      nav: _nav,\r\n      currentPage: 1,\r\n      currentPageSize: 10,\r\n      idListingDelete: null,\r\n      inputSearch: null,\r\n      tempCurrentPage: 1,\r\n      sortBy: 'seller_name',\r\n      sortDir: 1\r\n    }\r\n  },\r\n  filters: {\r\n    convertSnakeCaseToHumanizeWithCustom: function(str) {\r\n      if (!str) return ''\r\n      let i = str.split('_')\r\n      let frags = str.split('_')\r\n      for (i = 0; i < frags.length; i++) {\r\n        frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1)\r\n      }\r\n      let result = frags.join(' ')\r\n      return result.replace('Sku', 'SKU').replace('Gmr', 'GMR')\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`,\r\n      getListings: `mw/sellers/getListings`,\r\n      getListingFields: `mw/sellers/getListingFields`\r\n    }),\r\n    managePermission: function() {\r\n      return this.getPermissions.permissions.siman\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`,\r\n      getListingData: `mw/sellers/getListingData`,\r\n      deleteListing: `mw/sellers/deleteListing`\r\n    }),\r\n    getVariant(status) {\r\n      if (status === 'running') {\r\n        return 'primary'\r\n      } else if (status === 'success') {\r\n        return 'success'\r\n      } else if (status === 'error' || status === 'dead') {\r\n        return 'danger'\r\n      } else {\r\n        return 'secondary'\r\n      }\r\n    },\r\n    goToPage: function(page) {\r\n      if (this.tempCurrentPage !== this.currentPage) {\r\n        this.currentPage = page\r\n        this.tempCurrentPage = this.currentPage\r\n        this.handleGetListingData()\r\n      } else {\r\n        this.currentPage = page\r\n        this.tempCurrentPage = this.currentPage\r\n      }\r\n    },\r\n    async handleSearchData(ctx) {\r\n      this.sortBy = ctx ? ctx.sortBy : this.sortBy\r\n      this.sortDir = ctx ? ctx.sortDesc === true ? -1 : 1 : this.sortDir\r\n      this.currentPage = 1\r\n      await this.handleGetListingData()\r\n    },\r\n    async handleGetListingData() {\r\n      let payload = {\r\n        s: this.inputSearch,\r\n        limit: this.currentPageSize,\r\n        page: this.currentPage,\r\n        sort_by: this.sortBy,\r\n        sort_dir: this.sortDir,\r\n        clientID: this.$route.params.client_id\r\n      }\r\n      await this.getListingData(payload)\r\n    },\r\n    async handleDeleteListing(e) {\r\n      let payload = {\r\n        clientID: this.$route.params.client_id,\r\n        listingID: this.idListingDelete\r\n      }\r\n      try {\r\n        let result = await this.deleteListing(payload)\r\n        if (result === 200) {\r\n          this.currentPage = 1\r\n          this.vueToast('Listing has been deleted successfully.', 'success')\r\n          await this.handleGetListingData()\r\n          this.$bvModal.hide('delete-confirm')\r\n        } else {\r\n          this.vueToast('Listing has not been deleted. Please retry or contact administrator.', 'error')\r\n        }\r\n      } catch (e) {\r\n        this.vueToast('Listing has not been deleted. Please retry or contact administrator.', 'error')\r\n      }\r\n    },\r\n    editListing(item) {\r\n      this.$router.push({\r\n        name: 'MWSIEditListing',\r\n        params: {\r\n          client_id: this.$route.params.client_id,\r\n          listing_id: item.id\r\n        }\r\n      })\r\n    }\r\n  },\r\n  async created() {\r\n    // await this.fetchPermissions()\r\n    if (this.getPermissions.permissions) {\r\n      this.gotoGlobalHomePageIfNoPermission(this.getPermissions.permissions)\r\n      await this.handleGetListingData()\r\n    }\r\n  }\r\n}\r\n",null]}