{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\import-sdk\\import.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\gs-maps\\import-sdk\\import.vue","mtime":1639556629166},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport LoadingSpinner from '@/components/common/LoadingSpinner'\r\n\r\nexport default {\r\n  name: 'MWImportGSMaps',\r\n  mixins: [PermissionsMixin],\r\n  components: {\r\n    LoadingSpinner\r\n  },\r\n  data() {\r\n    return {\r\n      options: {\r\n        title: 'Upload (Google Shopping MAP Pricing)',\r\n        nextStepRouter: 'MWValidateGSMaps',\r\n        module: 'GoogleShoppingImport',\r\n        meta: {\r\n          report_id: null\r\n        }\r\n      },\r\n      isGetFullData: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      reports: `mw/reports/${TYPE.GET_LIST_IMPORT_REPORTS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      organizationStats: `mw/${TYPE.GET_ORGANIZATION_STATS}`,\r\n      reportLoading: `mw/reports/${TYPE.GET_LIST_REPORT_LOADING}`,\r\n      listGSReports: `mw/reports/${TYPE.GET_GS_LIST_REPORTS}`\r\n    }),\r\n    remainingSlotsASIN() {\r\n      const remainingSlotsASIN = parseInt(this.planConfig['plan_max_of_asin_for_google_shopping'] - this.organizationStats['asin_for_google_shopping_used'])\r\n      if (remainingSlotsASIN >= 0) {\r\n        return remainingSlotsASIN\r\n      }\r\n      return false\r\n    },\r\n    /* eslint-disable */\r\n    reportOptions() {\r\n      if (!isEmpty(this.listGSReports)) {\r\n        return this.listGSReports.map(item => {\r\n          return {\r\n            value: item._id,\r\n            text: item.name_in_dashboard\r\n          }\r\n        })\r\n      }\r\n      else return []\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchImportReports: `mw/reports/${TYPE.FETCH_IMPORT_REPORTS}`\r\n    })\r\n  },\r\n  watch: {\r\n    reportOptions: {\r\n      immediate: true,\r\n      handler() {\r\n        if (this.reportOptions.length > 0) {\r\n          this.options.meta.report_id = this.reportOptions[0].value\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchImportReports()\r\n    this.isGetFullData = true\r\n  }\r\n}\r\n",{"version":3,"sources":["import.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"import.vue","sourceRoot":"src/components/page/gs-maps/import-sdk","sourcesContent":["<template>\r\n    <div class=\"animated fadeIn\" v-if=\"isGetFullData\">\r\n        <div class=\"warning-plan px-2 container-fluid\">\r\n          <b-alert v-if=\"remainingSlotsASIN !== false\" show dismissible variant=\"warning\">With the current plan, your organization has <strong>{{remainingSlotsASIN | formatNumber}}</strong> remaining {{'slot' | pluralize(remainingSlotsASIN)}} for new ASINs. Your import processing will be failed if you try to add more than <strong>{{planConfig['plan_max_of_asin_for_google_shopping'] | formatNumber}}</strong> {{ 'item' | pluralize(planConfig['plan_max_of_asin_for_google_shopping'])}}.</b-alert>\r\n        </div>\r\n        <LoadingSpinner :isLoading=\"reportLoading\" v-if=\"reportLoading\"/>\r\n        <div v-else>\r\n          <div class=\"px-2 container-fluid\">\r\n            <b-alert v-if=\"reportOptions.length < 1\" show dismissible variant=\"danger\">Please create at least one <router-link class=\"text-danger font-weight-bold\" :to=\"{name: 'MWListReports'}\">report</router-link> to import MAP.</b-alert>\r\n          </div>\r\n          <Step1Import v-if=\"reportOptions.length > 0\" :inputOptions=\"options\">\r\n          <template v-slot:extend>\r\n            <b-row>\r\n              <b-col md=\"12\" lg=\"12\" sm=\"12\">\r\n                <b-form-group>\r\n                  <label>Select the report <span class=\"text-danger\">*</span></label>\r\n                  <b-form-select\r\n                    v-model=\"options.meta.report_id\"\r\n                    :options=\"reportOptions\"\r\n                    >\r\n                  </b-form-select>\r\n                </b-form-group>\r\n              </b-col>\r\n            </b-row>\r\n          </template>\r\n          </Step1Import>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport LoadingSpinner from '@/components/common/LoadingSpinner'\r\n\r\nexport default {\r\n  name: 'MWImportGSMaps',\r\n  mixins: [PermissionsMixin],\r\n  components: {\r\n    LoadingSpinner\r\n  },\r\n  data() {\r\n    return {\r\n      options: {\r\n        title: 'Upload (Google Shopping MAP Pricing)',\r\n        nextStepRouter: 'MWValidateGSMaps',\r\n        module: 'GoogleShoppingImport',\r\n        meta: {\r\n          report_id: null\r\n        }\r\n      },\r\n      isGetFullData: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      reports: `mw/reports/${TYPE.GET_LIST_IMPORT_REPORTS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      organizationStats: `mw/${TYPE.GET_ORGANIZATION_STATS}`,\r\n      reportLoading: `mw/reports/${TYPE.GET_LIST_REPORT_LOADING}`,\r\n      listGSReports: `mw/reports/${TYPE.GET_GS_LIST_REPORTS}`\r\n    }),\r\n    remainingSlotsASIN() {\r\n      const remainingSlotsASIN = parseInt(this.planConfig['plan_max_of_asin_for_google_shopping'] - this.organizationStats['asin_for_google_shopping_used'])\r\n      if (remainingSlotsASIN >= 0) {\r\n        return remainingSlotsASIN\r\n      }\r\n      return false\r\n    },\r\n    /* eslint-disable */\r\n    reportOptions() {\r\n      if (!isEmpty(this.listGSReports)) {\r\n        return this.listGSReports.map(item => {\r\n          return {\r\n            value: item._id,\r\n            text: item.name_in_dashboard\r\n          }\r\n        })\r\n      }\r\n      else return []\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchImportReports: `mw/reports/${TYPE.FETCH_IMPORT_REPORTS}`\r\n    })\r\n  },\r\n  watch: {\r\n    reportOptions: {\r\n      immediate: true,\r\n      handler() {\r\n        if (this.reportOptions.length > 0) {\r\n          this.options.meta.report_id = this.reportOptions[0].value\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchImportReports()\r\n    this.isGetFullData = true\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}