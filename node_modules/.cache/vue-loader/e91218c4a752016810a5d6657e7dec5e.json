{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\ListMaps.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\ListMaps.vue","mtime":1629255936680},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport vToasted from '@/shared/notification'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport _ from 'lodash'\r\nimport _nav from '@/_nav'\r\nimport { MarketPlacesResult, MarketPlacesCurrency } from '@/constants/Report'\r\n\r\nexport default {\r\n  name: 'c-table',\r\n  inheritAttrs: false,\r\n  mixins: [vToasted],\r\n  props: {\r\n    caption: {\r\n      type: String,\r\n      default: 'Table'\r\n    },\r\n    hover: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    striped: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    bordered: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    small: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    fixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tableData: {\r\n      type: [Array, Function],\r\n      default: () => []\r\n    },\r\n    fields: {\r\n      type: [Array, Object],\r\n      default: () => []\r\n    },\r\n    dark: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    totalRows: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    handleChangePage: {\r\n      type: [Function]\r\n    }\r\n  },\r\n  data: () => {\r\n    return {\r\n      MarketPlacesResult,\r\n      MarketPlacesCurrency,\r\n      currency: 'USD',\r\n      params: null,\r\n      listUniqBrandId: [],\r\n      nav: _nav,\r\n      mapId: null,\r\n      selectedMaps: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`,\r\n      planConfig: `mw/${TYPE.GET_PLAN_CONFIG}`,\r\n      organizationStats: `mw/${TYPE.GET_ORGANIZATION_STATS}`,\r\n      defaultParams: `mw/maps/${TYPE.GET_DEFAULT_AMAZON_MAP_PARAMS}`,\r\n      brandList: `mw/brands/${TYPE.GET_LIST_BRANDS}`,\r\n      amazonBrandList: `mw/brands/${TYPE.GET_VALID_AMAZON_BRANDS}`,\r\n      amazonCABrandList: `mw/brands/${TYPE.GET_VALID_AMAZON_CA_BRANDS}`,\r\n      listMaps: `mw/maps/${TYPE.GET_MAPS}`\r\n    }),\r\n    captions: function () {\r\n      const { fields } = this\r\n      return fields\r\n    },\r\n    getItems: function () {\r\n      return this.listMaps.items\r\n    },\r\n    allSelected: {\r\n      get: function () {\r\n        let items = this.getItems\r\n        return !_.isEmpty(items) && items.length === this.selectedMaps.length\r\n      },\r\n      set: function (newValue) {\r\n        let items = this.getItems\r\n        this.selectedMaps = newValue ? items.map(item => item.id) : items.length === this.selectedMaps.length ? [] : this.selectedMaps\r\n      }\r\n    },\r\n    sharableRoute() {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    },\r\n    initDataAmazonMarketplace() {\r\n      const listUniqAmazonMarketplace = []\r\n      let filterAmazonMarketplaces = this.planConfig.allowed_amazon_marketplaces\r\n      _.forEach(filterAmazonMarketplaces, (marketplace) => {\r\n        listUniqAmazonMarketplace.push({\r\n          value: marketplace,\r\n          text: _.upperFirst(marketplace)\r\n        })\r\n      })\r\n      return listUniqAmazonMarketplace\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchMaps: `mw/maps/${TYPE.FETCH_LIST_MAPS}`,\r\n      fetchBrands: `mw/brands/${TYPE.FETCH_LIST_BRANDS}`,\r\n      fetchValidAmazonBrand: `mw/brands/${TYPE.GET_VALID_AMAZON_BRANDS}`,\r\n      fetchValidAmazonCABrand: `mw/brands/${TYPE.GET_VALID_AMAZON_CA_BRANDS}`,\r\n      removeMap: `mw/maps/${TYPE.REMOVE_MAP}`,\r\n      fetchUrlDownload: `mw/maps/${TYPE.FETCH_URL_EXPORT}`,\r\n      updateTotalGSMap: `mw/maps/${TYPE.UPDATE_TOTAL_GS_MAP}`,\r\n      fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`\r\n    }),\r\n    convertToUpperCase: function (str) {\r\n      return _.upperCase(str)\r\n    },\r\n    sortChange(event) {\r\n      this.params.searchort_by = event.sortBy\r\n      if (event.sortBy) {\r\n        this.params.searchort_dir = event.sortDesc ? 'desc' : 'asc'\r\n      } else {\r\n        this.params.searchort_dir = null\r\n      }\r\n      this.paramsChange()\r\n    },\r\n    syncParams() {\r\n      this.paramsChange()\r\n    },\r\n    async paramsChange() {\r\n      await this.fetchMaps(this.params)\r\n      this.$router.push({\r\n        params: {\r\n          client_id: this.nav.clientId\r\n        },\r\n        query: this.keepShareTokenForQuery({\r\n          search: this.params.search,\r\n          brand_id: this.params.brand_id,\r\n          limit: this.params.limit ? this.params.limit : 100,\r\n          page: this.params.page ? this.params.page : 1,\r\n          marketplace: this.params.marketplace\r\n        })\r\n      }, () => { })\r\n    },\r\n    async marketplaceChange() {\r\n      await this.fetchUniqAmazonReport()\r\n      // TODO later on, currency needs to be supported from backend.\r\n      this.updateCurrency()\r\n      this.params.brand_id = null\r\n      await this.paramsChange()\r\n    },\r\n    updateCurrency() {\r\n      this.currency = MarketPlacesCurrency[this.params.marketplace]\r\n    },\r\n    keepShareTokenForQuery(query) {\r\n      if (this.$route.query.share_token) {\r\n        _.assign(query, { share_token: this.$route.query.share_token })\r\n      }\r\n      return query\r\n    },\r\n    async fetchUniqAmazonReport() {\r\n      let result = await this.fetchValidAmazonBrand(this.keepShareTokenForQuery({ marketplace: this.params.marketplace }))\r\n      this.listUniqBrandId = result.map(item => {\r\n        return { value: item._id, text: item[`marketplace_${this.params.marketplace.replace(/[.]/g, '_')}`].name }\r\n      })\r\n    },\r\n    async handleOpenModelDownload() {\r\n      try {\r\n        const res = await this.fetchUrlDownload(this.keepShareTokenForQuery({ marketplace: this.params.marketplace }))\r\n        window.location.href = res.url\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n    },\r\n    handleEditMap(mapId) {\r\n      this.$router.push({\r\n        name: `MW${this.sharableRoute}EditMaps`,\r\n        params: { client_id: this.nav.clientId, id: mapId },\r\n        query: { ...this.$route.query }\r\n      })\r\n    },\r\n    async handleRemoveMap(mapId) {\r\n      try {\r\n        await this.removeMap(mapId)\r\n        this.vToasted('success', `This MAP has been removed successfully.`)\r\n        await this.fetchPermissions()\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n    handleRemoveMulti() {\r\n      let allRemove = this.selectedMaps.map((mapId) => this.removeMap(mapId))\r\n      Promise.all(allRemove).then((values) => {\r\n        const newTotalGSmaps = this.listMaps.total - this.selectedMaps.length\r\n        this.updateTotalGSMap(newTotalGSmaps)\r\n        this.vToasted('success', `All selected MAPs have been removed successfully.`)\r\n        this.selectedMaps = []\r\n      }).catch((error) => {\r\n        this.vToasted('error', error.data.message)\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    this.params = _.defaultsDeep(this.$route.query, this.defaultParams)\r\n    this.syncParams()\r\n    this.fetchUniqAmazonReport()\r\n  }\r\n}\r\n",null]}