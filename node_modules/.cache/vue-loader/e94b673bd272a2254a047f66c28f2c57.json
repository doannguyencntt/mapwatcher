{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\brands\\Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\brands\\Edit.vue","mtime":1626945364747},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { ClipboardUtil } from 'plat-sdk/dist/clipboard'\r\n\r\nimport _ from 'lodash'\r\nimport { mapActions, mapGetters, mapMutations } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport brandLogo from '@/assets/img/brand-demo.jpg'\r\nimport VueTagsInput from '@johmun/vue-tags-input'\r\nimport _nav from '@/_nav'\r\nimport { MarketPlacesResult } from '@/constants/Report'\r\nimport MWReportMarketplacePicker from './ReportMarketplacePicker'\r\nimport { FormType } from '@/constants/Form.js'\r\n\r\nexport default {\r\n  name: 'MWEditReports',\r\n  data() {\r\n    return {\r\n      reloadTime: 0,\r\n      MarketPlacesResult,\r\n      brandLogo,\r\n      priority_options: [\r\n        { value: 10, text: 'High' },\r\n        { value: 5, text: 'Normal' }\r\n      ],\r\n      inutTags: {\r\n        tag: '',\r\n        tags: [],\r\n        textarea: ''\r\n      },\r\n      fbaInutTags: {\r\n        tag: '',\r\n        tags: [],\r\n        textarea: ''\r\n      },\r\n      mfnInutTags: {\r\n        tag: '',\r\n        tags: [],\r\n        textarea: ''\r\n      },\r\n      nav: _nav,\r\n      dialog: {\r\n        remove: false,\r\n        run: false,\r\n        cancel: false\r\n      },\r\n      check: true\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      dataSet: `mw/brands/${TYPE.GET_ONE_BRAND}`,\r\n      fetchListBrands: `mw/brands/${TYPE.GET_LIST_BRANDS}`\r\n    }),\r\n    isCopySupport() {\r\n      return ClipboardUtil.isCopySupported()\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      remoteEditBrand: `mw/brands/${TYPE.REMOTE_EDIT_BRAND}`,\r\n      remoteImagesFileUpload: `mw/images/${TYPE.REMOTE_UPLOAD_IMAGES}`,\r\n      fetchBrand: `mw/brands/${TYPE.FETCH_ONE_BRAND}`,\r\n      fetchBrands: `mw/brands/${TYPE.FETCH_LIST_BRANDS}`\r\n    }),\r\n    ...mapMutations({\r\n      setBrand: `mw/brands/${TYPE.SET_ONE_BRAND}`,\r\n      dataReset: `mw/brands/${TYPE.SET_ONE_BRAND}`\r\n    }),\r\n    handleMarketplaceChange(data) {\r\n      const { parsedData, marketplaces } = data\r\n      this.resetMarketplaceInfo()\r\n      _.assignIn(this.dataSet, parsedData)\r\n      this.dataSet.marketplaces = marketplaces\r\n    },\r\n    async handleEditBrand() {\r\n      this.$v.$touch()\r\n      this.$refs.marketplaceBuilder.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log('error', this.$v)\r\n        return\r\n      }\r\n      this.dataSet.list_authorized_seller_names = this.inutTags.tags.map(\r\n        (e) => e.text\r\n      )\r\n      this.dataSet.fba_authorized_seller_names = this.fbaInutTags.tags.map(\r\n        (e) => e.text\r\n      )\r\n      this.dataSet.mfn_authorized_seller_names = this.mfnInutTags.tags.map(\r\n        (e) => e.text\r\n      )\r\n      try {\r\n        const { id } = this.$route.params\r\n        await this.remoteEditBrand({ params: this.dataSet, id })\r\n        this.$router.push({\r\n          name: 'MWListBrands',\r\n          params: { client_id: this.nav.clientId }\r\n        })\r\n        this.vToasted(\r\n          'success',\r\n          `Report ${this.dataSet.name_in_dashboard} has been updated successfully.`\r\n        )\r\n      } catch (error) {\r\n        this.vToasted('error', error.data.message)\r\n      }\r\n    },\r\n    handleShowModal() {\r\n      if (this.dataSet.logo) {\r\n        this.dialog.run = true\r\n      }\r\n    },\r\n    handleRemoveLogo() {\r\n      this.dataSet.logo = ''\r\n    },\r\n    async handleImagesFileUpload(e) {\r\n      let formData = new FormData()\r\n      formData.append('file', e.target.files[0])\r\n      formData.append('type', 'brand_logos')\r\n      try {\r\n        const res = await this.remoteImagesFileUpload(formData)\r\n        let dataSet = {\r\n          ...this.dataSet,\r\n          logo: res.url\r\n        }\r\n        this.$store.commit(`mw/brands/${TYPE.SET_ONE_BRAND}`, dataSet)\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n    },\r\n    handleEnterTextarea() {\r\n      const { tags, textarea } = this.inutTags\r\n      const cutArray = [...`${textarea}`.split('\\n')]\r\n      this.inutTags.tags = [\r\n        ...tags,\r\n        ...cutArray.reduce((acc, cur) => {\r\n          if (\r\n            cur &&\r\n            !_.find(acc, (o) => o.text === cur) &&\r\n            !_.find(tags, (o) => o.text === cur)\r\n          ) {\r\n            acc = [...acc, { text: cur.trim() }]\r\n          }\r\n          return acc\r\n        }, [])\r\n      ]\r\n      this.inutTags.textarea = ''\r\n    },\r\n    handleMfnAuthorizedSellers() {\r\n      const { tags, textarea } = this.mfnInutTags\r\n      const cutArray = [...`${textarea}`.split('\\n')]\r\n      this.mfnInutTags.tags = [\r\n        ...tags,\r\n        ...cutArray.reduce((acc, cur) => {\r\n          if (\r\n            cur &&\r\n            !_.find(acc, (o) => o.text === cur) &&\r\n            !_.find(tags, (o) => o.text === cur)\r\n          ) {\r\n            acc = [...acc, { text: cur.trim() }]\r\n          }\r\n          return acc\r\n        }, [])\r\n      ]\r\n      this.mfnInutTags.textarea = ''\r\n    },\r\n    handleFbaAuthorizedSellers() {\r\n      const { tags, textarea } = this.fbaInutTags\r\n      const cutArray = [...`${textarea}`.split('\\n')]\r\n      this.fbaInutTags.tags = [\r\n        ...tags,\r\n        ...cutArray.reduce((acc, cur) => {\r\n          if (\r\n            cur &&\r\n            !_.find(acc, (o) => o.text === cur) &&\r\n            !_.find(tags, (o) => o.text === cur)\r\n          ) {\r\n            acc = [...acc, { text: cur.trim() }]\r\n          }\r\n          return acc\r\n        }, [])\r\n      ]\r\n      this.fbaInutTags.textarea = ''\r\n    },\r\n    async handleFetchAndReloadData() {\r\n      try {\r\n        const {\r\n          params: { id }\r\n        } = this.$route\r\n        let data = this.fetchListBrands.items.filter(\r\n          (brand) => brand._id === id\r\n        )[0]\r\n        if (_.isEmpty(data)) {\r\n          await this.fetchBrand(id)\r\n          this.reloadTime++\r\n        } else {\r\n          this.$store.commit(`mw/brands/${TYPE.SET_ONE_BRAND}`, data)\r\n        }\r\n        this.inutTags.tags = this.dataSet.list_authorized_seller_names.map(\r\n          (e) => ({\r\n            text: e,\r\n            tiClasses: ['ti-valid']\r\n          })\r\n        )\r\n        if (this.dataSet.fba_authorized_seller_names) {\r\n          this.fbaInutTags.tags = this.dataSet.fba_authorized_seller_names.map(\r\n            (e) => ({\r\n              text: e,\r\n              tiClasses: ['ti-valid']\r\n            })\r\n          )\r\n        }\r\n        if (this.dataSet.mfn_authorized_seller_names) {\r\n          this.mfnInutTags.tags = this.dataSet.mfn_authorized_seller_names.map(\r\n            (e) => ({\r\n              text: e,\r\n              tiClasses: ['ti-valid']\r\n            })\r\n          )\r\n        }\r\n        if (!this.dataSet.priority) {\r\n          this.dataSet.priority = 5\r\n        }\r\n      } catch (error) {\r\n        this.vToasted('error', error.message)\r\n      }\r\n    },\r\n    backToListBrand() {\r\n      this.dataReset({})\r\n      this.$router.push({\r\n        name: 'MWListBrands',\r\n        params: { client_id: this.nav.clientId }\r\n      })\r\n    },\r\n    getMarketplaceField(marketplace) {\r\n      return `marketplace_${marketplace.replace(/[.]/g, '_')}`\r\n    },\r\n    resetMarketplaceInfo() {\r\n      const marketplaces = _.values(MarketPlacesResult)\r\n      _.forEach(marketplaces, (marketplace) => {\r\n        const field = this.getMarketplaceField(marketplace)\r\n        this.dataSet[field] = null\r\n      })\r\n    },\r\n    handleCopyRecord() {\r\n      ClipboardUtil.copy(\r\n        _.assignIn(\r\n          _.cloneDeep(this.dataSet),\r\n          { inutTags: this.inutTags },\r\n          { fbaInutTags: this.fbaInutTags },\r\n          { mfnInutTags: this.mfnInutTags },\r\n          { isEdit: true }\r\n        ),\r\n        FormType.BRANDS\r\n      )\r\n      this.checkKey()\r\n      this.vToasted('success', 'Copied to clipboard.')\r\n    },\r\n\r\n    async handlePasteRecord() {\r\n      try {\r\n        const pasteData = await ClipboardUtil.paste(\r\n          _.cloneDeep(this.dataSet),\r\n          FormType.BRANDS\r\n        )\r\n\r\n        if (!pasteData) {\r\n          this.vToasted('error', 'You need to enable copy to clipboard')\r\n          return\r\n        }\r\n\r\n        // validate if copy from another report EDIT\r\n        const defaultKey = {\r\n          client_id: this.dataSet.client_id,\r\n          created: this.dataSet.created,\r\n          deleted: this.dataSet.deleted,\r\n          id: this.dataSet.id\r\n        }\r\n\r\n        // set tags\r\n        this.inutTags = pasteData.inutTags\r\n        this.fbaInutTags = pasteData.fbaInutTags\r\n        this.mfnInutTags = pasteData.mfnInutTags\r\n\r\n        if (pasteData.isEdit) {\r\n          // store default auto generate field in default key\r\n          this.setBrand(\r\n            _.omit(_.defaults(defaultKey, pasteData), [\r\n              'inutTags',\r\n              'fbaInutTags',\r\n              'mfnInutTags',\r\n              'isEdit'\r\n            ])\r\n          )\r\n        }\r\n\r\n        this.setBrand(\r\n          _.omit({ ...defaultKey, ...pasteData }, [\r\n            'inutTags',\r\n            'fbaInutTags',\r\n            'mfnInutTags',\r\n            'isEdit'\r\n          ])\r\n        )\r\n        this.vToasted('success', 'Paste successfully')\r\n      } catch (e) {\r\n        this.vToasted('error', 'You copy is not valid')\r\n      }\r\n    },\r\n    async checkKey() {\r\n      const result = await ClipboardUtil.check(FormType.BRANDS)\r\n\r\n      this.check = !result\r\n    }\r\n  },\r\n  created() {\r\n    this.handleFetchAndReloadData()\r\n    this.checkKey()\r\n    window.addEventListener('focus', this.checkKey)\r\n  },\r\n\r\n  destroyed() {\r\n    window.removeEventListener('focus', this.checkKey)\r\n  },\r\n  validations: {\r\n    dataSet: {\r\n      // logo: {\r\n      //   required,\r\n      //   url\r\n      // },\r\n      name_in_dashboard: {\r\n        required\r\n      },\r\n      order: {\r\n        required\r\n      }\r\n    }\r\n  },\r\n  components: {\r\n    VueTagsInput,\r\n    MWReportMarketplacePicker\r\n  }\r\n}\r\n",null]}