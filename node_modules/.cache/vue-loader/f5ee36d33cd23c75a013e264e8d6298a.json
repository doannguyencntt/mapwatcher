{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellers\\ManageListing.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\sellers\\ManageListing.vue","mtime":1630397532724},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport toastMixin from './../toastMixin'\r\nimport _nav from '@/_nav'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport _ from 'lodash'\r\nimport Datepicker from 'vuejs-datepicker'\r\nimport * as TYPE from '@/actionTypes.js'\r\n\r\nexport default {\r\n  name: 'MWSIManageListing',\r\n  mixins: [toastMixin, PermissionsMixin],\r\n  components: {\r\n    Datepicker\r\n  },\r\n  data: function () {\r\n    return {\r\n      nav: _nav,\r\n      listingID: null,\r\n      listingData: {\r\n        seller_id: null,\r\n        date: null,\r\n        total: null\r\n      },\r\n      sellerOptions: [],\r\n      isGetFullData: false\r\n    }\r\n  },\r\n  validations: {\r\n    listingData: {\r\n      seller_id: {\r\n        required\r\n      },\r\n      date: {\r\n        required\r\n      },\r\n      total: {\r\n        required\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`,\r\n      getOneListing: `mw/sellers/getOneListing`,\r\n      getSellers: `mw/sellers/getSellers`\r\n    })\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`,\r\n      getOneListingData: `mw/sellers/getOneListingData`,\r\n      createListing: `mw/sellers/createListing`,\r\n      updateListing: `mw/sellers/updateListing`,\r\n      getSellersData: `mw/sellers/getSellersData`\r\n    }),\r\n    async submit () {\r\n      this.$v.$touch()\r\n      if (!this.$v.$anyError) {\r\n        let payload = _.cloneDeep(this.listingData)\r\n        payload.clientID = this.$route.params.client_id\r\n        let res = await this.createListing(payload)\r\n        if (res === 200 || res === 201) {\r\n          this.vueToast('Listing has been created successfully', 'success')\r\n          this.$router.push({ name: 'MWSIListings', params: { client_id: this.nav.clientId } })\r\n        } else {\r\n          if (res && res.statusCode === 500 && res.message) {\r\n            this.vueToast('This seller already had a listing for this week. Please choose another seller.', 'error')\r\n          } else {\r\n            this.vueToast('Listing has not been created. Please retry or contact administrator.', 'error')\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async update () {\r\n      this.$v.$touch()\r\n      if (!this.$v.$anyError) {\r\n        let payload = _.cloneDeep(this.listingData)\r\n        payload.clientID = this.$route.params.client_id\r\n        payload.listingID = this.$route.params.listing_id\r\n        let res = await this.updateListing(payload)\r\n        if (res === 200 || res === 201) {\r\n          this.vueToast('Listing info has been updated successfully', 'success')\r\n          this.$router.push({ name: 'MWSIListings', params: { client_id: this.nav.clientId } })\r\n        } else {\r\n          if (res && res.statusCode === 500 && res.message) {\r\n            this.vueToast('This seller already had a listing for this week. Please choose another seller.', 'error')\r\n          } else {\r\n            this.vueToast('Listing has not been updated. Please retry or contact administrator.', 'error')\r\n          }\r\n        }\r\n      }\r\n    },\r\n    assignFormData (data) {\r\n      for (let k in this.listingData) {\r\n        this.listingData[k] = data[k]\r\n      }\r\n    },\r\n    async handleGetSellersData() {\r\n      let payload = {\r\n        limit: 200,\r\n        page: 1,\r\n        sort_by: 'seller_name',\r\n        sort_dir: 1,\r\n        clientID: this.$route.params.client_id\r\n      }\r\n      await this.getSellersData(payload)\r\n      this.mapSellerOptions()\r\n    },\r\n    mapSellerOptions() {\r\n      this.sellerOptions = _.map(this.getSellers.items, (item) => {\r\n        return {\r\n          value: item._id ? item._id : item.id,\r\n          text: item.seller_name\r\n        }\r\n      })\r\n    }\r\n  },\r\n  async created() {\r\n    // await this.fetchPermissions()\r\n    this.listingID = this.$route.params.listing_id\r\n    this.isGetFullData = true\r\n    if (this.listingID) {\r\n      let payload = {\r\n        listingID: this.listingID,\r\n        clientID: this.$route.params.client_id\r\n      }\r\n      await this.getOneListingData(payload)\r\n      this.assignFormData(this.getOneListing)\r\n    }\r\n    // if no permission -> return Home page\r\n    if (this.getPermissions) {\r\n      const permission = this.getPermissions.permissions\r\n      this.gotoGlobalHomePageIfNoPermission(permission)\r\n      if (permission) {\r\n        await this.handleGetSellersData()\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ManageListing.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"ManageListing.vue","sourceRoot":"src/components/page/sellers","sourcesContent":["<template>\r\n  <div class=\"animated fadeIn\" v-if=\"isGetFullData\">\r\n    <b-row>\r\n      <b-col lg=\"8\">\r\n        <transition name=\"fade\">\r\n          <b-card no-body>\r\n            <template v-slot:header>\r\n              <span class=\"align-middle\">\r\n                <span v-if=\"!listingID\"><i class=\"icon-plus\"></i><strong> Add New Listing</strong></span>\r\n                <span v-else><strong><i class=\"icon-note\"></i> Edit Listing Info</strong></span>\r\n              </span>\r\n              <div class=\"pull-right\">\r\n                <router-link :to=\"{ name: 'MWSIListings', params: { client_id: nav.clientId } }\" class=\"btn btn-secondary btn-sm\">\r\n                  <i class=\"icon-arrow-left-circle\"></i> Back\r\n                </router-link>\r\n              </div>\r\n            </template>\r\n            <b-card-body>\r\n              <b-row>\r\n                <b-col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <label>Seller</label>\r\n                  <b-form-select v-model=\"listingData.seller_id\" :options=\"sellerOptions\" class=\"\">\r\n                    <template v-slot:first>\r\n                      <option :value=\"null\" disabled>Please select a seller</option>\r\n                    </template>\r\n                  </b-form-select>\r\n                  <div class=\"invalid-feedback\" v-if=\"$v.listingData.seller_id.$dirty && !$v.listingData.seller_id.required\">Seller is required</div>\r\n                </b-col>\r\n                <b-col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <label>Date</label>\r\n                  <Datepicker\r\n                    v-model=\"listingData.date\"\r\n                    bootstrap-styling\r\n                    format=\"yyyy-MM-dd\"\r\n                    typeable\r\n                    id=\"dataPicker\"\r\n                    placeholder=\"Enter your date\"\r\n                  >\r\n                  </Datepicker>\r\n                  <div class=\"invalid-feedback\" v-if=\"$v.listingData.date.$dirty && !$v.listingData.date.required\">Date is required</div>\r\n                </b-col>\r\n                <b-col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <label>Total</label>\r\n                  <b-form-input\r\n                    :class=\"{'is-invalid': $v.listingData.total.$dirty && $v.listingData.total.$error}\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    v-model.trim=\"listingData.total\"\r\n                    placeholder=\"Enter your total\"\r\n                    class=\"mb-2\"\r\n                    @input=\"$v.listingData.total.$touch()\">\r\n                  </b-form-input>\r\n                  <div class=\"invalid-feedback\" v-if=\"$v.listingData.total.$dirty && !$v.listingData.total.required\">Total is required</div>\r\n                </b-col>\r\n              </b-row>\r\n            </b-card-body>\r\n            <template v-slot:footer>\r\n              <b-button v-if=\"!listingID\" :disabled=\"$v.$anyError\" variant=\"primary\" size=\"sm\" @click=\"submit()\">\r\n                <i class=\"fa fa-dot-circle-o\"></i> Submit\r\n              </b-button>\r\n              <b-button v-if=\"listingID\" :disabled=\"$v.$anyError\" variant=\"primary\" size=\"sm\" @click=\"update()\">\r\n                <i class=\"fa fa-dot-circle-o\"></i> Update\r\n              </b-button>\r\n            </template>\r\n          </b-card>\r\n        </transition>\r\n      </b-col>\r\n    </b-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport toastMixin from './../toastMixin'\r\nimport _nav from '@/_nav'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport PermissionsMixin from '@/components/common/PermissionsMixin'\r\nimport _ from 'lodash'\r\nimport Datepicker from 'vuejs-datepicker'\r\nimport * as TYPE from '@/actionTypes.js'\r\n\r\nexport default {\r\n  name: 'MWSIManageListing',\r\n  mixins: [toastMixin, PermissionsMixin],\r\n  components: {\r\n    Datepicker\r\n  },\r\n  data: function () {\r\n    return {\r\n      nav: _nav,\r\n      listingID: null,\r\n      listingData: {\r\n        seller_id: null,\r\n        date: null,\r\n        total: null\r\n      },\r\n      sellerOptions: [],\r\n      isGetFullData: false\r\n    }\r\n  },\r\n  validations: {\r\n    listingData: {\r\n      seller_id: {\r\n        required\r\n      },\r\n      date: {\r\n        required\r\n      },\r\n      total: {\r\n        required\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      getPermissions: `mw/${TYPE.GET_PERMISSIONS}`,\r\n      getOneListing: `mw/sellers/getOneListing`,\r\n      getSellers: `mw/sellers/getSellers`\r\n    })\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      fetchPermissions: `mw/${TYPE.FETCH_PERMISSIONS}`,\r\n      getOneListingData: `mw/sellers/getOneListingData`,\r\n      createListing: `mw/sellers/createListing`,\r\n      updateListing: `mw/sellers/updateListing`,\r\n      getSellersData: `mw/sellers/getSellersData`\r\n    }),\r\n    async submit () {\r\n      this.$v.$touch()\r\n      if (!this.$v.$anyError) {\r\n        let payload = _.cloneDeep(this.listingData)\r\n        payload.clientID = this.$route.params.client_id\r\n        let res = await this.createListing(payload)\r\n        if (res === 200 || res === 201) {\r\n          this.vueToast('Listing has been created successfully', 'success')\r\n          this.$router.push({ name: 'MWSIListings', params: { client_id: this.nav.clientId } })\r\n        } else {\r\n          if (res && res.statusCode === 500 && res.message) {\r\n            this.vueToast('This seller already had a listing for this week. Please choose another seller.', 'error')\r\n          } else {\r\n            this.vueToast('Listing has not been created. Please retry or contact administrator.', 'error')\r\n          }\r\n        }\r\n      }\r\n    },\r\n    async update () {\r\n      this.$v.$touch()\r\n      if (!this.$v.$anyError) {\r\n        let payload = _.cloneDeep(this.listingData)\r\n        payload.clientID = this.$route.params.client_id\r\n        payload.listingID = this.$route.params.listing_id\r\n        let res = await this.updateListing(payload)\r\n        if (res === 200 || res === 201) {\r\n          this.vueToast('Listing info has been updated successfully', 'success')\r\n          this.$router.push({ name: 'MWSIListings', params: { client_id: this.nav.clientId } })\r\n        } else {\r\n          if (res && res.statusCode === 500 && res.message) {\r\n            this.vueToast('This seller already had a listing for this week. Please choose another seller.', 'error')\r\n          } else {\r\n            this.vueToast('Listing has not been updated. Please retry or contact administrator.', 'error')\r\n          }\r\n        }\r\n      }\r\n    },\r\n    assignFormData (data) {\r\n      for (let k in this.listingData) {\r\n        this.listingData[k] = data[k]\r\n      }\r\n    },\r\n    async handleGetSellersData() {\r\n      let payload = {\r\n        limit: 200,\r\n        page: 1,\r\n        sort_by: 'seller_name',\r\n        sort_dir: 1,\r\n        clientID: this.$route.params.client_id\r\n      }\r\n      await this.getSellersData(payload)\r\n      this.mapSellerOptions()\r\n    },\r\n    mapSellerOptions() {\r\n      this.sellerOptions = _.map(this.getSellers.items, (item) => {\r\n        return {\r\n          value: item._id ? item._id : item.id,\r\n          text: item.seller_name\r\n        }\r\n      })\r\n    }\r\n  },\r\n  async created() {\r\n    // await this.fetchPermissions()\r\n    this.listingID = this.$route.params.listing_id\r\n    this.isGetFullData = true\r\n    if (this.listingID) {\r\n      let payload = {\r\n        listingID: this.listingID,\r\n        clientID: this.$route.params.client_id\r\n      }\r\n      await this.getOneListingData(payload)\r\n      this.assignFormData(this.getOneListing)\r\n    }\r\n    // if no permission -> return Home page\r\n    if (this.getPermissions) {\r\n      const permission = this.getPermissions.permissions\r\n      this.gotoGlobalHomePageIfNoPermission(permission)\r\n      if (permission) {\r\n        await this.handleGetSellersData()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n</style>\r\n"]}]}