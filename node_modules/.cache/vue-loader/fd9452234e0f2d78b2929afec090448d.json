{"remainingRequest":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\Import.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Project\\CBPO\\plat-mw-web\\src\\components\\page\\maps\\Import.vue","mtime":1626074952658},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1626076746842},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1620898435163},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1626076743241},{"path":"C:\\Project\\CBPO\\plat-mw-web\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1620898436811}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import _ from 'lodash'\r\nimport { mapActions, mapGetters } from 'vuex'\r\nimport * as TYPE from '@/actionTypes.js'\r\nimport { required } from 'vuelidate/lib/validators'\r\nimport vToasted from '@/shared/notification'\r\nimport _nav from '@/_nav'\r\nimport Datepicker from 'vuejs-datepicker'\r\nimport * as moment from 'moment/moment'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      date_started: null,\r\n      file_in_use: null,\r\n      file: null,\r\n      flag: {\r\n        processed: false\r\n      },\r\n      brands: {\r\n        items: [],\r\n        isLoad: true\r\n      },\r\n      nav: _nav\r\n    }\r\n  },\r\n  mixins: [vToasted],\r\n  computed: {\r\n    ...mapGetters({\r\n      getProcess: `mw/maps/${TYPE.GET_PROCESS_MAPS}`\r\n    }),\r\n    sharableRoute () {\r\n      const routeRegrex = /\\/share\\//\r\n      return routeRegrex.test(this.$route.path) ? 'Share' : ''\r\n    }\r\n  },\r\n  validations: {\r\n    date_started: {\r\n      required\r\n    },\r\n    file_in_use: {\r\n      required\r\n    }\r\n  },\r\n  components: {\r\n    Datepicker\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      remoteFileUpload: `mw/maps/${TYPE.REMOTE_IMPORT_CSV_MAPS}`,\r\n      fetchBrands: `mw/brands/${TYPE.FETCH_LIST_BRANDS}`\r\n    }),\r\n    handleCannel() {\r\n      this.brand = {}\r\n    },\r\n    async handleSubmitFileUpload() {\r\n      this.$v.$touch()\r\n      if (this.$v.$error) {\r\n        console.log('error')\r\n        return\r\n      }\r\n      if (!this.brands.isLoad && this.brands.items.length && this.file) {\r\n        this.flag.processed = false\r\n        let formData = new FormData()\r\n        formData.append('file', this.file)\r\n        formData.append('date_started', moment(this.date_started).format('MM/DD/YYYY'))\r\n        formData.append('file_in_use', this.file_in_use)\r\n        try {\r\n          await this.remoteFileUpload(formData)\r\n          this.flag.processed = true\r\n        } catch (error) {\r\n          if (error.status && error.status === 400) {\r\n            this.vToasted('error', 'Could not import data. Please compare your file with the sample one to make sure your column definition is correct.')\r\n          } else {\r\n            this.vToasted('error', error.data.message)\r\n          }\r\n          this.flag.processed = false\r\n        }\r\n      }\r\n    },\r\n    handleDownloadCSVExample() {\r\n      window.location.href = 'https://storage.googleapis.com/precise/mw/sample-map-import.csv'\r\n    },\r\n    async fetchBrandList() {\r\n      try {\r\n        // check brand list is not empty, so limit 1 is enough\r\n        const response = await this.fetchBrands({limit: 1, page: 1})\r\n        this.brands.items = response.items\r\n        this.brands.isLoad = false\r\n      } catch (e) {\r\n        this.brands.isLoad = false\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchBrandList()\r\n    this.fields = [\r\n      { key: 'name', label: '', sortable: true, thClass: 'text-center' },\r\n      { key: 'count', label: 'Count', sortable: true, thClass: 'text-center' }\r\n    ]\r\n  }\r\n}\r\n",null]}