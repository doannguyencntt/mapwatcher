"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DsQueryParseActionsDicts = void 0;
var lodash_1 = __importDefault(require("lodash"));
var utils_1 = require("../../utils");
/**
 * Definitions of `parse` action for DsQueryExpression
 */
exports.DsQueryParseActionsDicts = {
    /**
     * Parse list of DsQueryExpression
     * @param list list of supporting expressions
     */
    ListExp: function (list) {
        var expressions = __spreadArrays([list.children[0]], list.children[2].children);
        var parsedExprs = lodash_1.default.map(expressions, function (expr) { return expr.parse(); });
        return { type: 'list', parsedExprs: parsedExprs };
    },
    //-------------------COMBINED EXPRESSIONS-----------------------------
    /**
     * Parse combined epression such as `$expr1 + $expr2` | `$expr1 * $expr2` | ...
     * @param exprA Combined expression or Aggregation expression
     * @param op '+' | '-' | '*' | '/' | '^'
     * @param exprB Combined expression or Aggregation expression
     */
    CombinedExp_main: function (exprA, op, exprB) {
        var parsedA = exprA.parse();
        var parsedB = exprB.parse();
        var result = {
            type: 'combined',
            queries: [],
            evalExpr: '',
        };
        if (!parsedA.type) {
            result.evalExpr += parsedA + " " + op.sourceString + " ";
        }
        else if (parsedA.type === 'combined') {
            result.queries.push(parsedA.queries);
            result.evalExpr = parsedA.evalExpr + " " + op.sourceString + " ";
        }
        else {
            result.queries.push(parsedA);
            result.evalExpr = "query0 " + op.sourceString + " ";
        }
        result.queries = lodash_1.default.flattenDeep(result.queries);
        if (!parsedB.type) {
            result.evalExpr += parsedB;
        }
        else if (parsedB.type === 'combined') {
            var length_1 = result.queries.length;
            for (var i = 0; i < parsedB.queries.length; i++) {
                parsedB.evalExpr = parsedB.evalExpr.replace("query" + i, "query" + (i + length_1));
            }
            result.queries.push(parsedB.queries);
            result.evalExpr += parsedB.evalExpr;
        }
        else {
            result.queries.push(parsedB);
            result.evalExpr += "query" + (result.queries.length - 1);
        }
        result.queries = lodash_1.default.flattenDeep(result.queries);
        return result;
    },
    CombinedExp_paren: function (_LB, expr, _RB) {
        var parsed = expr.parse();
        parsed.evalExpr = "(" + parsed.evalExpr + ")";
        return parsed;
    },
    CombinedExp_alias: function (expr, alias) {
        var parsed = expr.parse();
        parsed.alias = alias.parse()[0] || 'result';
        return parsed;
    },
    //-------------------AGGREGATION EXPRESSIONS (w/ optional CONDITION)-----------------------------
    CountIfExp_dv_null: function (_COUNTIF, instance, alias) {
        var parsedInstance = instance.parse();
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[0]);
        return {
            type: 'count',
            query: { filter: filter },
            alias: alias.parse()[0] || 'result',
        };
    },
    CountIfExp_main: function (_COUNTIF, instance, alias) {
        var parsedInstance = instance.parse();
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[0]);
        var dv = parsedInstance[1];
        return {
            type: 'count',
            query: { filter: filter },
            alias: alias.parse()[0] || 'result',
            dv: dv,
        };
    },
    CountIfExp_dv_filter_null: function (_COUNTIF, _instance, alias) {
        return {
            type: 'count',
            query: {},
            alias: alias.parse()[0] || 'result',
        };
    },
    CountIfExp_filter_null: function (_COUNTIF, instance, alias) {
        var parsedInstance = instance.parse();
        var dv = parsedInstance[0];
        return {
            type: 'count',
            query: {},
            alias: alias.parse()[0] || 'result',
            dv: dv,
        };
    },
    CountIfExp_bin_only: function (_COUNTIF, instance, alias) {
        var parsedInstance = instance.parse();
        var binQuery = parsedInstance[0];
        var bin = binQuery.bins[0];
        var aliasResult = alias.parse()[0] || 'result';
        binQuery.group.aggregations.push({ column: bin.column.name, aggregation: 'count', alias: aliasResult });
        return {
            type: 'exec',
            query: binQuery,
            alias: aliasResult,
        };
    },
    CountIfExp_bin_dv: function (_COUNTIF, instance, alias) {
        var parsedInstance = instance.parse();
        var binQuery = parsedInstance[0];
        var dv = parsedInstance[1];
        var bin = binQuery.bins[0];
        var aliasResult = alias.parse()[0] || 'result';
        binQuery.group.aggregations.push({ column: bin.column.name, aggregation: 'count', alias: aliasResult });
        return {
            type: 'exec',
            query: binQuery,
            alias: aliasResult,
            dv: dv,
        };
    },
    CountIfExp_filter_bin: function (_COUNTIF, instance, alias) {
        var parsedInstance = instance.parse();
        var filter = parsedInstance[0];
        var binQuery = parsedInstance[1];
        var bin = binQuery.bins[0];
        var aliasResult = alias.parse()[0] || 'result';
        binQuery.group.aggregations.push({ column: bin.column.name, aggregation: 'count', alias: aliasResult });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            alias: aliasResult,
        };
    },
    CountIfExp_filter_bin_dv: function (_COUNTIF, instance, alias) {
        var parsedInstance = instance.parse();
        var filter = parsedInstance[0];
        var binQuery = parsedInstance[1];
        var dv = parsedInstance[2];
        var bin = binQuery.bins[0];
        var aliasResult = alias.parse()[0] || 'result';
        binQuery.group.aggregations.push({ column: bin.column.name, aggregation: 'count', alias: aliasResult });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            alias: aliasResult,
            dv: dv,
        };
    },
    SumIfExp_main: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var dv = parsedInstance[2];
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' }],
                },
            },
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    SumIfExp_dv_null: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    SumIfExp_filter_null: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var dv = parsedInstance[1];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
            dv: dv,
        };
    },
    SumIfExp_dv_filter_null: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    SumIfExp_col_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    SumIfExp_col_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        var dv = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    SumIfExp_col_filter_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    SumIfExp_col_filter_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        var dv = parsedInstance[3];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'sum' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    AvgIfExp_main: function (_AVGIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var dv = parsedInstance[2];
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' }],
                },
            },
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    AvgIfExp_dv_null: function (_AVGIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    AvgIfExp_filter_null: function (_AVGIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var dv = parsedInstance[1];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
            dv: dv,
        };
    },
    AvgIfExp_dv_filter_null: function (_AVGIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    AvgIfExp_col_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    AvgIfExp_col_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        var dv = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    AvgIfExp_col_filter_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    AvgIfExp_col_filter_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        var dv = parsedInstance[3];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'avg' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    MaxIfExp_main: function (_MAXIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var dv = parsedInstance[2];
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' }],
                },
            },
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    MaxIfExp_dv_null: function (_MAXIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MaxIfExp_filter_null: function (_MAXIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var dv = parsedInstance[1];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
            dv: dv,
        };
    },
    MaxIfExp_dv_filter_null: function (_MAXIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MaxIfExp_col_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MaxIfExp_col_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        var dv = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    MaxIfExp_col_filter_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MaxIfExp_col_filter_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        var dv = parsedInstance[3];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'max' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    MinIfExp_main: function (_MINIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var dv = parsedInstance[2];
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' }],
                },
            },
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    MinIfExp_dv_null: function (_MINIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        return {
            type: 'exec',
            query: {
                filter: filter,
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MinIfExp_filter_null: function (_MINIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var dv = parsedInstance[1];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
            dv: dv,
        };
    },
    MinIfExp_dv_filter_null: function (_MINIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' }],
                },
            },
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MinIfExp_col_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MinIfExp_col_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var binQuery = parsedInstance[1];
        var dv = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    MinIfExp_col_filter_bin: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            alias: alias.parse()[0] || 'result',
        };
    },
    MinIfExp_col_filter_bin_dv: function (_SUMIF, instance, alias) {
        var parsedInstance = instance.parse();
        var column = parsedInstance[0];
        var filter = utils_1.Utils.standardizeFilter(parsedInstance[1]);
        var binQuery = parsedInstance[2];
        var dv = parsedInstance[3];
        binQuery.group.aggregations.push({ column: column, alias: alias.parse()[0] || 'result', aggregation: 'min' });
        return {
            type: 'exec',
            query: __assign(__assign({}, binQuery), { filter: filter }),
            column: column,
            dv: dv,
            alias: alias.parse()[0] || 'result',
        };
    },
    //-------------------AGGREGATION EXPRESSION (w/o CONDITION)-----------------------------
    CountExp_none: function (_COUNT, _instance, alias) {
        return {
            type: 'count',
            query: { filter: {} },
            alias: alias.parse()[0] || 'result',
        };
    },
    CountExp_bin_dv: function (_COUNT, instancesExp, alias) {
        var instances = instancesExp.parse();
        var binQuery = instances[0] || { filter: {} };
        var dv = instances[1];
        var bin = binQuery.bins[0];
        var aliasResult = alias.parse()[0] || 'result';
        binQuery.group.aggregations.push({ column: bin.column.name, aggregation: 'count', alias: aliasResult });
        return {
            type: 'exec',
            query: binQuery,
            alias: aliasResult,
            dv: dv,
        };
    },
    CountExp_bin: function (_COUNT, instancesExp, alias) {
        var instances = instancesExp.parse();
        var binQuery = instances[0] || { filter: {} };
        var bin = binQuery.bins[0];
        var aliasResult = alias.parse()[0] || 'result';
        binQuery.group.aggregations.push({ column: bin.column.name, aggregation: 'count', alias: aliasResult });
        return {
            type: 'exec',
            query: binQuery,
            alias: aliasResult,
        };
    },
    CountExp_dv: function (_COUNT, instancesExp, alias) {
        var instances = instancesExp.parse();
        var dv = instances[0];
        return {
            type: 'count',
            query: { filter: {} },
            alias: alias.parse()[0] || 'result',
            dv: dv,
        };
    },
    SumExp_none: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: aliasResult, aggregation: 'sum' }],
                },
            },
            column: column,
            alias: aliasResult,
        };
    },
    SumExp_bin_dv: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1] || {
            filter: {},
            group: { columns: [], aggregations: [] },
        };
        var dv = instances[2];
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'sum' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: aliasResult,
            dv: dv,
        };
    },
    SumExp_bin: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1] || {
            filter: {},
            group: { columns: [], aggregations: [] },
        };
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'sum' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: aliasResult,
        };
    },
    SumExp_dv: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var dv = instances[1];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: { columns: [], aggregations: [{ column: column, alias: aliasResult, aggregation: 'sum' }] },
            },
            column: column,
            alias: aliasResult,
            dv: dv,
        };
    },
    AvgExp_none: function (_AVG, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: aliasResult, aggregation: 'avg' }],
                },
            },
            column: column,
            alias: aliasResult,
        };
    },
    AvgExp_bin_dv: function (_AVG, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1] || {
            filter: {},
            group: { columns: [], aggregations: [] },
        };
        var dv = instances[2];
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'avg' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: aliasResult,
            dv: dv,
        };
    },
    AvgExp_bin: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1] || {
            filter: {},
            group: { columns: [], aggregations: [] },
        };
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'avg' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: aliasResult,
        };
    },
    AvgExp_dv: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var dv = instances[1];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: { columns: [], aggregations: [{ column: column, alias: aliasResult, aggregation: 'avg' }] },
            },
            column: column,
            alias: aliasResult,
            dv: dv,
        };
    },
    MinExp_none: function (_MIN, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: aliasResult, aggregation: 'min' }],
                },
            },
            column: column,
            alias: aliasResult,
        };
    },
    MinExp_bin_dv: function (_MIN, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1];
        var dv = instances[2];
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'min' });
        return {
            type: 'exec',
            column: column,
            query: binQuery,
            alias: aliasResult,
            dv: dv,
        };
    },
    MinExp_bin: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1] || {
            filter: {},
            group: { columns: [], aggregations: [] },
        };
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'min' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: aliasResult,
        };
    },
    MinExp_dv: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var dv = instances[1];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: { columns: [], aggregations: [{ column: column, alias: aliasResult, aggregation: 'min' }] },
            },
            column: column,
            alias: aliasResult,
            dv: dv,
        };
    },
    MaxExp_none: function (_MAX, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: {
                    columns: [],
                    aggregations: [{ column: column, alias: aliasResult, aggregation: 'max' }],
                },
            },
            column: column,
            alias: aliasResult,
        };
    },
    MaxExp_bin_dv: function (_MAX, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1];
        var dv = instances[2];
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'max' });
        return {
            type: 'exec',
            column: column,
            query: binQuery,
            alias: aliasResult,
            dv: dv,
        };
    },
    MaxExp_bin: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var binQuery = instances[1] || {
            filter: {},
            group: { columns: [], aggregations: [] },
        };
        var aliasResult = alias.parse()[0] || column;
        binQuery.group.aggregations.push({ column: column, alias: aliasResult, aggregation: 'max' });
        return {
            type: 'exec',
            query: binQuery,
            column: column,
            alias: aliasResult,
        };
    },
    MaxExp_dv: function (_SUM, instancesExp, alias) {
        var instances = instancesExp.parse();
        var column = instances[0];
        var dv = instances[1];
        var aliasResult = alias.parse()[0] || column;
        return {
            type: 'exec',
            query: {
                filter: {},
                group: { columns: [], aggregations: [{ column: column, alias: aliasResult, aggregation: 'max' }] },
            },
            column: column,
            alias: aliasResult,
            dv: dv,
        };
    },
    //-------------------BIN EXPRESSIONS-----------------------------
    BinExp: function (prefix, instances) {
        var parsedIntances = instances.parse();
        var bin_column = parsedIntances[0];
        var numOrWidth = parsedIntances[1];
        var unit = parsedIntances[2];
        var bin_alias = bin_column + "_bin";
        var direction = prefix.sourceString.startsWith('LAST') ? 'desc' : 'asc';
        return {
            bins: [
                {
                    column: { name: bin_column },
                    alias: bin_alias,
                    options: {
                        alg: unit ? 'uniform' : 'auto',
                        numOfBins: numOrWidth,
                        uniform: {
                            width: numOrWidth,
                            unit: unit,
                        },
                    },
                },
            ],
            group: {
                columns: [{ name: bin_column + "_bin" }],
                aggregations: [{ column: bin_column, alias: bin_column, aggregation: 'max' }],
            },
            orders: [{ column: bin_column, direction: direction }],
            paging: { limit: 1, current: 1 },
        };
    },
    //-------------------FILTER EXPRESSION-----------------------------
    FilterExp: function (_IF, operation) {
        return {
            filter: operation.parse(),
        };
    },
    FilterLogicExp_and: function (a, _syntax, b) {
        var parsedA = a.parse();
        var parsedB = b.parse();
        var conditions = [];
        if (parsedA.type === 'AND') {
            conditions.push.apply(conditions, parsedA.conditions);
        }
        else {
            conditions.push(parsedA);
        }
        if (parsedB.type === 'AND') {
            conditions.push.apply(conditions, parsedB.conditions);
        }
        else {
            conditions.push(parsedB);
        }
        return { type: 'AND', conditions: conditions };
    },
    FilterLogicExp_or: function (a, _syntax, b) {
        var parsedA = a.parse();
        var parsedB = b.parse();
        var conditions = [];
        if (parsedA.type === 'OR') {
            conditions.push.apply(conditions, parsedA.conditions);
        }
        else {
            conditions.push(parsedA);
        }
        if (parsedB.type === 'OR') {
            conditions.push.apply(conditions, parsedB.conditions);
        }
        else {
            conditions.push(parsedB);
        }
        return { type: 'OR', conditions: conditions };
    },
    FilterOpExp_eq: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: '==',
            value: b.parse(),
        };
    },
    FilterOpExp_ne: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: '!=',
            value: b.parse(),
        };
    },
    FilterOpExp_gt: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: '>',
            value: b.parse(),
        };
    },
    FilterOpExp_gte: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: '>=',
            value: b.parse(),
        };
    },
    FilterOpExp_lt: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: '<',
            value: b.parse(),
        };
    },
    FilterOpExp_lte: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: '<=',
            value: b.parse(),
        };
    },
    FilterOpExp_empty: function (a, _syntax) {
        return {
            column: a.parse(),
            operator: 'empty',
        };
    },
    FilterOpExp_not_empty: function (a, _syntax) {
        return {
            column: a.parse(),
            operator: 'not_empty',
        };
    },
    FilterOpExp_null: function (a, _syntax) {
        return {
            column: a.parse(),
            operator: 'null',
        };
    },
    FilterOpExp_not_null: function (a, _syntax) {
        return {
            column: a.parse(),
            operator: 'not_null',
        };
    },
    FilterOpExp_contains: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'contains',
            value: b.parse(),
        };
    },
    FilterOpExp_not_contains: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'not_contains',
            value: b.parse(),
        };
    },
    FilterOpExp_starts_with: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'starts_with',
            value: b.parse(),
        };
    },
    FilterOpExp_not_start_with: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'not_start_with',
            value: b.parse(),
        };
    },
    FilterOpExp_ends_with: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'ends_with',
            value: b.parse(),
        };
    },
    FilterOpExp_not_end_with: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'not_end_with',
            value: b.parse(),
        };
    },
    FilterOpExp_in_range: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'in_range',
            value: b.parse(),
        };
    },
    FilterOpExp_in: function (a, _syntax, b) {
        return {
            column: a.parse(),
            operator: 'in',
            value: b.parse(),
        };
    },
    //--------------------------plat-sdk Static expressions------------------------
    StaticExp: function (_) {
        return _.sourceString;
    },
    //--------------------------Extends base expressions------------------------
    Alias: function (_as, alias) {
        return alias.parse();
    },
    Column: function (_at, column) {
        return column.parse();
    },
};
