"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var abstracts_1 = require("../abstracts");
var expressions = [
    'COUNTIF() as alias0',
    'COUNTIF(@Freight > 2 AND @Freight < 3 OR @Freight != 4 OR @Freight == 6, managed_100) as alias0',
    'SUMIF(@col1) as alias1',
    'SUMIF(@col1, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias1',
    'AVGIF(@col2) as alias2',
    'AVGIF(@col2, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias2',
    'MAXIF(@col3) as alias3',
    'MAXIF(@col3, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias3',
    'MINIF(@col4) as alias4',
    'MINIF(@col4, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias4',
    'COUNTIF((@Total >= 0 AND (@Total <= 10 OR @Total <= 15) AND @Total < 20 ) OR (@Total > 20 AND @Total < 30) OR @Total = 40, managed_100) as alias0',
    'COUNTIF((@Total >= .1 AND (@Total <= 10.1 OR @Total <= 15.5) AND @Total < 20.9 ) OR (@Total > 20.232 AND @Total < 30.54555424) AND @Total = 40.0000 OR @Total < -10.199999000, managed_100) as alias0',
    'MAXIF(@col3, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias3 ' +
        '+ MINIF(@col4, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias4 ' +
        '- SUMIF(@col1, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6) as alias1 ' +
        '/ AVGIF(@col2, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6) as alias2 ' +
        "^ COUNTIF((@Total >= 0 AND @Total <= 10) OR (@Total > 20 AND @Total < 30) OR @Total = 40, 'managed_100') as 'alias0'",
    "(10.21321321 + ( MAXIF(@col0, @d == false, 0) as alias0 + COUNTIF(@Total > 0) as 'alias0' ) * MINIF(@col1, @c != 1, 1) as 'alias1' + 0.21321321) as 'super_alias'",
    "(10.21321321 + ( MAXIF(@Freight, @OrderID >= 0, managed_5m) as max_Freight + COUNTIF(@Freight > 200) as 'count_Freight' ) * MINIF(@Freight, @'ShipCountry' != 'Germany', 'managed_5m') as 'min_Freight')",
    "((10.21321321 + ( MAXIF(@Freight, @OrderID <= 200, 'managed_5m') as 'max_Freight' + COUNTIF(@'Freight' > 500) as count_Freight ) * MINIF(@'Freight', @'ShipCountry' == Germany, managed_5m) as 'min_Freight')) as super_alias",
    "COUNTIF(@a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias0 , SUMIF(@col1, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias1 , AVGIF(@col2, @a = 2 AND @b = 3 OR @c != 4 OR @d == 6, 1234567890) as alias2 , (10.21321321 + ( MAXIF(@Freight, @OrderID <= 200, 'managed_5m') as 'max_Freight' + COUNTIF(@'Freight' > 500) as count_Freight ) * MINIF(@'Freight', @'ShipCountry' == Germany, managed_5m) as 'min_Freight') as super_alias",
    "COUNTIF() as alias0 , 10.21321321 + MAXIF(@Freight, @OrderID <= 200, 'managed_5m') as 'max_Freight', COUNTIF(@'Freight' > 500, managed_5m) as 'count Freight' * MINIF(@'15 Day AVG') as 'min 15 Day AVG'",
    'COUNT()',
    'COUNT() as COUNT',
    'SUM(@Column1)',
    "SUM(@'Column 1') as SUM",
    'AVG(@Column2)',
    "AVG(@'Column 2') as AVG",
    'MAX(@Column3)',
    "MAX(@'Column 3') as MAX",
    'MIN(@Column4)',
    "MIN(@'Column 4') as MIN",
    "COUNT(), SUM(@'Column 1') as SUM, AVG(@Column2), MAX(@'Column 3') as MAX + MIN(@Column4)",
    'COUNTIF(@Freight in_range [dsbajdksa,dsa3456dsa])',
    'COUNTIF(@Freight in [dsbajdksa,dsa3456dsa]) as alias',
    "COUNTIF(@OrderDate eq Date('2020-05-12')) as ali",
    'COUNTIF(@OrderDate null) as count_null',
    'COUNTIF(@OrderDate not_null) as count_not_null',
    'SUMIF(@spend, @date >= DATE_THIS("month") && @date <= TODAY(), "__DS_CP_ID__") as a1',
    'SUMIF(@"Total Cost", @"Total Cost" > 1000000, LAST_BIN_OF(@"Ship Date", 5), "idreportingsdk") as alias1',
    'AVGIF(@"Total Cost", @"Total Cost" > 1000000, LAST_BIN_OF(@"Ship Date", 5), "idreportingsdk") as alias1 + SUMIF(@"Total Cost", @"Total Cost" > 1000000, FIRST_BIN_OF(@"Ship Date", 5), "idreportingsdk") as alias1',
    'MIN(@"Total Cost", LAST_BIN_OF(@"Ship Date", 5), "idreportingsdk") as alias1',
    'MAX(@"Total Cost", LAST_BIN_OF(@"Ship Date", 5), "idreportingsdk") as alias1 + MIN(@"Total Cost", LAST_BIN_OF(@"Ship Date", 5), "idreportingsdk") as alias1',
];
var DsQueryExec = /** @class */ (function (_super) {
    __extends(DsQueryExec, _super);
    function DsQueryExec() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DsQueryExec.prototype.exec = function (dvOrDsId, query, column) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        cols: [{ name: column.alias, type: 'number' }],
                        rows: [[Math.random() * 100]],
                    }];
            });
        });
    };
    return DsQueryExec;
}(abstracts_1.DsQueryExecAbstract));
var error = 0;
var success = 0;
new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
    var index, expr, dsQueryExec, dsQueryExpr, evaluated, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = 0;
                _a.label = 1;
            case 1:
                if (!(index < expressions.length)) return [3 /*break*/, 6];
                expr = expressions[index];
                _a.label = 2;
            case 2:
                _a.trys.push([2, 4, , 5]);
                console.log('==================================');
                console.log("Expression " + index + ":");
                dsQueryExec = new DsQueryExec();
                dsQueryExpr = new index_1.DsQueryExpr(dsQueryExec);
                return [4 /*yield*/, dsQueryExpr.eval('dvOrDsId', expr)];
            case 3:
                evaluated = _a.sent();
                console.log(expr);
                console.log("Eval result: " + JSON.stringify(evaluated, null, 4));
                success++;
                return [3 /*break*/, 5];
            case 4:
                err_1 = _a.sent();
                error++;
                console.error(err_1);
                return [3 /*break*/, 5];
            case 5:
                index++;
                return [3 /*break*/, 1];
            case 6:
                resolve();
                return [2 /*return*/];
        }
    });
}); }).then(function () {
    console.log('==================================');
    console.log('Errors:', error);
    console.log('Succeed:', success);
});
