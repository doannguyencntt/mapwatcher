import { DsQueryExecResult, DsQueryListParseResult } from '../interfaces';
import { DsQueryExecAbstract } from '../abstracts';
export declare class DsQueryExpr {
    protected queryExec: DsQueryExecAbstract;
    constructor(queryExec: DsQueryExecAbstract);
    /**
     * Parse expression -> excute queries by defined `queryExec` method
     * @param dvOrDsId Datasource ID or Dataview ID to query
     * @param expression Expression to be parsed into query object
     * @returns {cols, rows}
     */
    eval(dvOrDsId: string, expression: string): Promise<DsQueryExecResult>;
    parse(expression: string): DsQueryListParseResult;
    static parse(expression: string): DsQueryListParseResult;
    /**
     * If `expression` is something like `COUNTIF(...)` | `SUMIF(...)` | `MINIF(...)`...
     * It will be parsed to a DsQueryParseResult object with type 'exec' or 'count'
     * Excute query by calling `this.queryExec` and return the result
     */
    private evalNormalExpr;
    /**
     * If `expression` is something like `$expr1 + $expr2 * ($expr3 + $expr4) as $alias`
     * It will be parsed to a DsQueryCombinedParseResult object with type 'combined'
     * Excute all query in `queries` array by calling `this.queryExec` one by one
     * Replace query result from rows[0][0] to the query variable in evalExpr for calculation
     */
    private evalCombinedExpr;
}
