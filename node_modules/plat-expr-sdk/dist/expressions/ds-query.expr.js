"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DsQueryExpr = void 0;
var grammars_1 = require("../grammars");
var semantics_1 = require("../semantics");
var errors_1 = require("../utils/errors");
var arithmetic_expr_1 = require("./arithmetic.expr");
var lodash_1 = __importDefault(require("lodash"));
var DsQueryExpr = /** @class */ (function () {
    function DsQueryExpr(queryExec) {
        this.queryExec = queryExec;
    }
    /**
     * Parse expression -> excute queries by defined `queryExec` method
     * @param dvOrDsId Datasource ID or Dataview ID to query
     * @param expression Expression to be parsed into query object
     * @returns {cols, rows}
     */
    DsQueryExpr.prototype.eval = function (dvOrDsId, expression) {
        return __awaiter(this, void 0, void 0, function () {
            var parsedListExpr, result, i, evalResult, parsedExpr;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        parsedListExpr = this.parse(expression);
                        if (parsedListExpr.type !== 'list') {
                            throw new Error('Bad implementation! `parsedListExpr.type` value should be `list`');
                        }
                        result = { cols: [], rows: [[]] };
                        i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(i < parsedListExpr.parsedExprs.length)) return [3 /*break*/, 7];
                        evalResult = { cols: [], rows: [[]] };
                        parsedExpr = parsedListExpr.parsedExprs[i];
                        if (!(parsedExpr.type === 'combined')) return [3 /*break*/, 3];
                        parsedExpr = parsedExpr;
                        return [4 /*yield*/, this.evalCombinedExpr(dvOrDsId, parsedExpr)];
                    case 2:
                        evalResult = _c.sent();
                        _c.label = 3;
                    case 3:
                        if (!(parsedExpr.type === 'exec' || parsedExpr.type === 'count')) return [3 /*break*/, 5];
                        parsedExpr = parsedExpr;
                        return [4 /*yield*/, this.evalNormalExpr(parsedExpr.dv || dvOrDsId, parsedExpr)];
                    case 4:
                        evalResult = _c.sent();
                        _c.label = 5;
                    case 5:
                        (_a = result.cols).push.apply(_a, evalResult.cols);
                        (_b = result.rows[0]).push.apply(_b, evalResult.rows[0]);
                        _c.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 1];
                    case 7:
                        // If there are more than 1 result. Add index to indentify default result column: result1, result2...
                        if (result.cols.length > 1) {
                            lodash_1.default.forEach(result.cols, function (col, index) {
                                if (col.name === 'result') {
                                    col.name = "result" + (index + 1);
                                }
                            });
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    DsQueryExpr.prototype.parse = function (expression) {
        return DsQueryExpr.parse(expression);
    };
    DsQueryExpr.parse = function (expression) {
        var matched = grammars_1.DsQueryGrammar.match(expression);
        if (matched.failed()) {
            throw new errors_1.InvalidExpressionError(matched);
        }
        return semantics_1.DsQuerySemantics(matched).parse();
    };
    /**
     * If `expression` is something like `COUNTIF(...)` | `SUMIF(...)` | `MINIF(...)`...
     * It will be parsed to a DsQueryParseResult object with type 'exec' or 'count'
     * Excute query by calling `this.queryExec` and return the result
     */
    DsQueryExpr.prototype.evalNormalExpr = function (dvOrDsId, queryOpt) {
        return __awaiter(this, void 0, void 0, function () {
            var evalResult, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queryExec.exec(queryOpt.dv || dvOrDsId, queryOpt.query, {
                            type: queryOpt.type,
                            alias: queryOpt.alias,
                        })];
                    case 1:
                        evalResult = _a.sent();
                        index = lodash_1.default.findIndex(evalResult.cols, function (col) { return col.name === (queryOpt.alias || 'result'); });
                        lodash_1.default.remove(evalResult.cols, function (_col, i) { return i !== index; });
                        lodash_1.default.remove(evalResult.rows[0], function (_row, i) { return i !== index; });
                        return [2 /*return*/, evalResult];
                }
            });
        });
    };
    /**
     * If `expression` is something like `$expr1 + $expr2 * ($expr3 + $expr4) as $alias`
     * It will be parsed to a DsQueryCombinedParseResult object with type 'combined'
     * Excute all query in `queries` array by calling `this.queryExec` one by one
     * Replace query result from rows[0][0] to the query variable in evalExpr for calculation
     */
    DsQueryExpr.prototype.evalCombinedExpr = function (dvOrDsId, parsedExpr) {
        return __awaiter(this, void 0, void 0, function () {
            var _loop_1, this_1, i, calculated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _loop_1 = function (i) {
                            var queryOpt, execResult, index, value;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        queryOpt = parsedExpr.queries[i];
                                        return [4 /*yield*/, this_1.evalNormalExpr(dvOrDsId, queryOpt)];
                                    case 1:
                                        execResult = _a.sent();
                                        index = lodash_1.default.findIndex(execResult.cols, function (col) { return col.name === queryOpt.alias; });
                                        index = index === -1 ? 0 : index;
                                        value = lodash_1.default.isEmpty(execResult.rows) ? 0 : execResult.rows[0][index];
                                        parsedExpr.evalExpr = parsedExpr.evalExpr.replace("query" + i, value);
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < parsedExpr.queries.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1(i)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4:
                        calculated = arithmetic_expr_1.ArithmeticExpr.eval(parsedExpr.evalExpr);
                        return [2 /*return*/, {
                                cols: [{ name: parsedExpr.alias || 'result', type: 'number' }],
                                rows: [[calculated]],
                            }];
                }
            });
        });
    };
    return DsQueryExpr;
}());
exports.DsQueryExpr = DsQueryExpr;
