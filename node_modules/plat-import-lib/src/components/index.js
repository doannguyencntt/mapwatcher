import modulesStore from '@/store/modules'
import { routerRender } from '@/router/routes.js'
import routes from '@/router/_routerConfig'
import nav from '@/_nav'
import '@/assets/scss/style.scss'
import sdkAxios from '@/services/sdkAxios.js'
import get from 'lodash/get'
import isFunction from 'lodash/isFunction'
import setAxios from '@/services/setAxios.js'

const Components = {}

const plugins = {
  setAxios,
  install: function(Vue, options = {}) {
    if (!options.store || !options.layout || !options.router || !options.nav) {
      console.log('Please check params again!')
    }

    if (options.endPointAPI) {
      window.endPointAPI = options.endPointAPI
    }
    // Response PF
    sdkAxios.interceptors.response.use(function (response) {
      // loading
      // options.store.dispatch('ps/loadingModule/SET_COUNT', 'decrease')
      return response
    }, function (error) {
      const originalRequest = error.config
      // loading
      // options.store.dispatch('ps/loadingModule/SET_COUNT', 'decrease')
      // call refresh token failed
      if (get(originalRequest, '_retry')) {
        Vue.prototype.$bus.$emit('relogin')
        return Promise.reject(error)
      }
      // 401 status
      if (get(error, 'response.status') === 401) {
        if (options.retryOn401 && isFunction(options.retryOn401)) {
          return options.retryOn401().then((token) => {
            originalRequest.headers['Authorization'] = `Bearer ${token}`
            originalRequest._retry = true
            return sdkAxios(originalRequest)
          })
        } else {
          console.log('retryOn401 is not a function')
        }
      }
      // return Error object with Promise
      return Promise.reject(error)
    })
    routerRender.forEach((route) => {
      Components[route.name] = route.component
    })
    Object.keys(Components).forEach((name) => {
      Vue.component(name, Components[name])
    })
    Object.keys(modulesStore).map((name) => {
      options.store.registerModule(name, modulesStore[name])
    })
    // use DefaultContainer in Portal
    options.router.addRoutes([routes])
    // update _nav
    const currentClient = options.store.getters['ps/userModule/GET_CURRENT_CLIENT'] || ''
    if (currentClient && currentClient.id) {
      nav.setItem = currentClient.id
    }
    // options.nav.mt = nav
    // push psNav to pfNav
    // nav.addItems = options.nav.ps.items || []
    // update client_id to store
    Vue.prototype.$bus.$on('ps_set_current_client_id', (clientID) => {
      nav.setItem = clientID
    })
  }
}

export default plugins
