import sdkAxios from '@/services/sdkAxios'

const types = {
  POST_FILE: 'POST_FILE',
  VALIDATE: 'VALIDATE',
  CONFIRM: 'CONFIRM',
  GET_LIST_RAW_FIELDS: 'GET_LIST_RAW_FIELDS',
  GET_LIST_OPTIONS: 'GET_LIST_OPTIONS',
  GET_LIST_MAPPED_COL: 'GET_LIST_MAPPED_COL',
  GET_LIST_VALIDATED: 'GET_LIST_VALIDATED',
  GET_RESULTS: 'GET_RESULTS',
  GET_ID: 'GET_ID',
  GET_LIST_ITEMS: 'GET_LIST_ITEMS',
  LINK_SAMPLE: 'LINK_SAMPLE',
  LINK_INVALID: 'LINK_INVALID',
  LINK_ALL: 'LINK_ALL',
  INFO_IMPORT: 'INFO_IMPORT',
  PROGRESS: 'PROGRESS',
  STATUS: 'STATUS',
  SET_STATUS: 'SET_STATUS',
  SET_LIST_ITEMS: 'SET_LIST_ITEMS',
  SET_LIST_VALIDATED: 'SET_LIST_VALIDATED',
  SET_PROGRESS: `SET_PROGRESS`,
  LINK_ERROR: 'LINK_ERROR',
  FILE_SIZE: 'FILE_SIZE',
  SET_FILE_SIZE: 'SET_FILE_SIZE',
  GET_VALIDATION_STARTED: 'GET_VALIDATION_STARTED',
  GET_VALIDATION_COMPLETED: 'GET_VALIDATION_COMPLETED',
  GET_PROCESS_STARTED: 'GET_PROCESS_STARTED',
  GET_PROCESS_COMPLETED: 'GET_PROCESS_COMPLETED',
  GET_CREATED_AT: 'GET_CREATED_AT'
}

const state = {
  id: null,
  listModules: {},
  rawFields: [],
  options: [],
  mappedCol: [],
  progress: 0,
  status: '',
  results: {},
  listItems: {},
  validated: {},
  urlSample: '',
  urlInvalid: '',
  urlAll: '',
  urlError: '',
  fileSize: 0,
  validation_started: null,
  validation_completed: null,
  process_started: null,
  process_completed: null,
  created: null
}

const getters = {
  [types.GET_LIST_RAW_FIELDS](state) {
    return state.rawFields
  },
  [types.GET_LIST_OPTIONS](state) {
    return state.options
  },
  [types.GET_LIST_MAPPED_COL](state) {
    return state.mappedCol
  },
  [types.GET_LIST_VALIDATED](state) {
    return state.validated
  },
  [types.GET_RESULTS](state) {
    return state.results
  },
  [types.GET_ID](state) {
    return state.id
  },
  [types.GET_LIST_ITEMS](state) {
    return state.listItems
  },
  [types.LINK_SAMPLE](state) {
    return state.urlSample
  },
  [types.LINK_INVALID](state) {
    return state.urlInvalid
  },
  [types.LINK_ALL](state) {
    return state.urlAll
  },
  [types.PROGRESS](state) {
    return state.progress
  },
  [types.STATUS](state) {
    return state.status
  },
  [types.LINK_ERROR](state) {
    return state.urlInvalid
  },
  [types.FILE_SIZE](state) {
    return state.fileSize
  },
  [types.GET_VALIDATION_STARTED](state) {
    return state.validation_started
  },
  [types.GET_VALIDATION_COMPLETED](state) {
    return state.validation_completed
  },
  [types.GET_PROCESS_STARTED](state) {
    return state.process_started
  },
  [types.GET_PROCESS_COMPLETED](state) {
    return state.process_completed
  },
  [types.GET_CREATED_AT] (state) {
    return state.created
  }
}

const mutations = {
  [types.POST_FILE](state, payload) {
    state.id = payload.id
    state.options = payload.upload_columns.filter(option => option.label !== 'None')
    state.rawFields = payload.columns
    state.mappedCol = payload.column_mapping
    state.progress = payload.progress ? payload.progress : 0
    state.status = payload.status ? payload.status : ''
    state.validation_started = payload.validation_started ? payload.validation_started : null
    state.validation_completed = payload.validation_completed ? payload.validation_completed : null
    state.process_started = payload.process_started ? payload.process_started : null
    state.process_completed = payload.process_completed ? payload.process_completed : null
    state.created = payload.created ? payload.created : null
  },
  [types.VALIDATE](state, payload) {
    state.validated = payload
    state.progress = payload.progress ? payload.progress : 0
    state.status = payload.status ? payload.status : ''
    state.validation_started = payload.validation_started ? payload.validation_started : null
    state.validation_completed = payload.validation_completed ? payload.validation_completed : null
  },
  [types.CONFIRM](state, payload) {
    state.results = payload
    state.progress = payload.progress ? payload.progress : 0
    state.status = payload.status ? payload.status : ''
    state.process_started = payload.process_started ? payload.process_started : null
    state.process_completed = payload.process_completed ? payload.process_completed : null
  },
  [types.GET_LIST_ITEMS](state, payload) {
    state.listItems = payload
  },
  [types.LINK_SAMPLE](state, payload) {
    state.urlSample = payload
  },
  [types.LINK_INVALID](state, payload) {
    state.urlInvalid = payload
  },
  [types.LINK_ERROR](state, payload) {
    state.urlError = payload
  },
  [types.LINK_ALL](state, payload) {
    state.urlAll = payload
  },
  [types.INFO_IMPORT](state, payload) {
    state.progress = payload.progress
    state.status = payload.status
    state.rawFields = payload.columns
    state.mappedCol = payload.column_mapping
    state.options = payload.upload_columns.filter(option => option.label !== 'None')
    state.validated = payload
    state.results = payload
    state.validation_started = payload.validation_started ? payload.validation_started : null
    state.validation_completed = payload.validation_completed ? payload.validation_completed : null
    state.process_started = payload.process_started ? payload.process_started : null
    state.process_completed = payload.process_completed ? payload.process_completed : null
    state.created = payload.created ? payload.created : null
  },
  [types.SET_STATUS](state, data) {
    state.status = data
  },
  [types.SET_LIST_ITEMS](state) {
    state.listItems = []
  },
  [types.SET_LIST_VALIDATED](state) {
    state.validated = {}
  },
  [types.SET_PROGRESS](state) {
    state.progress = 0
  },
  [types.SET_FILE_SIZE](state, size) {
    state.fileSize = size
  },
  [types.SET_PROGRESS](state) {
    state.progress = 0
  },
  [types.SET_FILE_SIZE](state, size) {
    state.fileSize = size
  }
}

const actions = {
  [types.POST_FILE]({ commit }, params) {
    let payload = params.data
    let basePath = window.endPointAPI && window.endPointAPI.postFile ? window.endPointAPI.postFile : '/v1'
    try {
      return sdkAxios
        .post(`${basePath}/imports/${params.module}/upload`, payload, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        })
        .then(res => {
          commit(types.POST_FILE, res.data)
        })
    } catch (err) {
      return err
    }
  },
  [types.VALIDATE]({ commit }, params) {
    let payload = { column_mapping: params.column_mapping }
    let basePath = window.endPointAPI && window.endPointAPI.validate ? window.endPointAPI.validate : '/v1'
    try {
      return sdkAxios.put(`${basePath}/imports/${params.module}/${params.id}/validate`, payload).then(res => {
        commit(types.VALIDATE, res.data)
      })
    } catch (err) {
      return err
    }
  },
  [types.CONFIRM]({ commit }, params) {
    let basePath = window.endPointAPI && window.endPointAPI.process ? window.endPointAPI.process : '/v1'
    try {
      return sdkAxios.put(`${basePath}/imports/${params.module}/${params.id}/process`).then(res => {
        commit(types.CONFIRM, res.data)
      })
    } catch (err) {
      return err
    }
  },
  [types.GET_LIST_ITEMS]({ commit }, params) {
    let basePath = window.endPointAPI && window.endPointAPI.getListItems ? window.endPointAPI.getListItems : '/v1'
    try {
      return sdkAxios
        .get(`${basePath}/imports/${params.module}/${params.id}/items?page=${params.page}&limit=${params.limit}&type=${params.type || ''}&key=${params.key || ''}`)
        .then(res => {
          commit(types.GET_LIST_ITEMS, res.data)
        })
    } catch (err) {
      return err
    }
  },
  [types.LINK_SAMPLE]({ commit }, params) {
    let basePath = window.endPointAPI && window.endPointAPI.linkSample ? window.endPointAPI.linkSample : '/v1'
    try {
      return sdkAxios.get(`${basePath}/imports/${params.module}/export/sample`).then(res => {
        commit(types.LINK_SAMPLE, res.data)
      })
    } catch (err) {
      return err
    }
  },
  [types.LINK_INVALID]({ commit }, params) {
    let basePath = window.endPointAPI && window.endPointAPI.linkInvalid ? window.endPointAPI.linkInvalid : '/v1'
    try {
      return sdkAxios.get(`${basePath}/imports/${params.module}/${params.id}/export/invalid`).then(res => {
        commit(types.LINK_INVALID, res.data)
      })
    } catch (err) {
      return err
    }
  },
  [types.LINK_ALL]({ commit }, params) {
    let basePath = window.endPointAPI && window.endPointAPI.linkAll ? window.endPointAPI.linkAll : '/v1'
    try {
      return sdkAxios.get(`${basePath}/imports/${params.module}/${params.id}/export/all`).then(res => {
        commit(types.LINK_ALL, res.data)
      })
    } catch (err) {
      return err
    }
  },
  [types.LINK_ERROR]({ commit }, params) {
    let basePath = window.endPointAPI && window.endPointAPI.linkInvalid ? window.endPointAPI.linkInvalid : '/v1'
    try {
      return sdkAxios.get(`${basePath}/imports/${params.module}/${params.id}/export/error`).then(res => {
        commit(types.LINK_ERROR, res.data)
      })
    } catch (err) {
      return err
    }
  },
  async [types.INFO_IMPORT]({ commit }, payload) {
    let basePath = window.endPointAPI && window.endPointAPI.infoImport ? window.endPointAPI.infoImport : '/v1'
    try {
      await sdkAxios.get(`${basePath}/imports/${payload.module}/${payload.id}`).then(res => {
        commit(types.INFO_IMPORT, res.data)
      })
    } catch (err) {
      console.log('err', err)
      return err
    }
  }
}

export default {
  namespaced: true,
  state,
  actions,
  mutations,
  getters
}
