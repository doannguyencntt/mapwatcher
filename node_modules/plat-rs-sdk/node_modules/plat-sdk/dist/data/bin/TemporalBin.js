"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemporalBin = void 0;
var constant_1 = require("./constant/constant");
var moment = require('moment');
var listAutoUnitAndWith = [{ unit: 'Y', width: 2 }, { unit: 'Y', width: 1 }, { unit: 'Q', width: 2 },
    { unit: 'Q', width: 1 }, { unit: 'M', width: 2 }, { unit: 'M', width: 1 }, { unit: 'W', width: 1 }, {
        unit: 'W',
        width: 1
    }, { unit: 'd', width: 1 }];
var TemporalBin = /** @class */ (function () {
    function TemporalBin() {
    }
    /**
     * This func will return the array of bin from (width, unit)
     *
     * @param min - start date,
     * @param max - end date,
     * @param unit - 'Y','Q','M','W','d','m',
     * @param width - integer and greater then 0
     */
    TemporalBin.prototype.makeUniformBins = function (min, max, unit, width, maxBinAmount) {
        if (maxBinAmount === void 0) { maxBinAmount = 5000; }
        if (!(Object.prototype.toString.call(min) === '[object Date]')) {
            throw "invalid min date " + min;
        }
        if (!(Object.prototype.toString.call(max) === '[object Date]')) {
            throw "invalid max date " + max;
        }
        if (!(Object.values(constant_1.DateBinUnit).includes(unit))) {
            throw "invalid unit " + unit;
        }
        var binResult = [];
        var diff = moment(max).diff(moment(min));
        if (diff < 0) {
            throw 'max date must be greater min date';
        }
        if (width < 1 || !Number.isInteger(width)) {
            throw "invalid width " + width;
        }
        var duration;
        if (unit === constant_1.DateBinUnit.YEAR) {
            duration = moment.duration(diff).asYears();
        }
        else if (unit === constant_1.DateBinUnit.MONTH) {
            duration = moment.duration(diff).asMonths();
        }
        else if (unit === constant_1.DateBinUnit.QUARTER) {
            duration = moment.duration(diff).asMonths() / 3;
        }
        else if (unit === constant_1.DateBinUnit.WEEK) {
            duration = moment.duration(diff).asWeeks();
        }
        else if (unit === constant_1.DateBinUnit.DATE) {
            duration = moment.duration(diff).asDays();
        }
        else if (unit === constant_1.DateBinUnit.MINUTE) {
            duration = moment.duration(diff).asMinutes();
        }
        else {
            throw 'wrong type of unit';
        }
        if (duration < 0) {
            return [];
        }
        var minDate = min;
        var maxDate = moment(min).add(width, unit).toDate();
        var binAmount = duration / width;
        if (binAmount > maxBinAmount) {
            binAmount = maxBinAmount;
        }
        for (var item = 0; item <= binAmount; item++) {
            var bin = {
                min: minDate,
                minOp: 'gte',
                max: maxDate,
                maxOp: "lt",
                unit: unit,
                width: width,
                label: this.formatLabel(minDate, maxDate, unit, width)
            };
            if ((item + 1) >= binAmount) {
                bin.maxOp = 'lte';
            }
            binResult.push(bin);
            minDate = maxDate;
            maxDate = moment(minDate).add(width, unit).toDate();
            if ((item + 1) === maxBinAmount) {
                maxDate = moment(minDate).add(width * (duration / width - maxBinAmount + 1), unit).toDate();
            }
        }
        return binResult;
    };
    TemporalBin.prototype.formatLabel = function (min, max, unit, width) {
        var label;
        if (width > 1) {
            label = moment(min).format(constant_1.LabelFormat[unit]) + ' - ' + moment(max).subtract(1, unit).format(constant_1.LabelFormat[unit]);
        }
        else {
            label = moment(min).format(constant_1.LabelFormat[unit]);
        }
        return label;
    };
    /**
     * This func will return the array of bin which have amount closest your expected
     *
     * @param min - min Date
     * @param max - max Date
     * @param expected - integer and greater then 0
     */
    TemporalBin.prototype.makeAutoBins = function (min, max, expected) {
        if (!(Object.prototype.toString.call(min) === '[object Date]')) {
            throw 'invalid min date';
        }
        if (!(Object.prototype.toString.call(max) === '[object Date]')) {
            throw 'invalid max date';
        }
        var diff = moment(max).diff(moment(min));
        if (diff < 0) {
            throw 'max date must be greater min date';
        }
        if (expected < 1 || !Number.isInteger(expected)) {
            throw 'invalid expected';
        }
        var suggestList = this.getAmountBinSuggest(diff);
        var suggestIndex = this.findClosetIndex(suggestList, expected);
        return this.makeUniformBins(min, max, listAutoUnitAndWith[suggestIndex].unit, listAutoUnitAndWith[suggestIndex].width);
    };
    TemporalBin.prototype.getAmountBinSuggest = function (diff) {
        var listSuggest = [];
        var durationTime = moment.duration(diff);
        listSuggest.push(durationTime.asYears() / 2); //2 years
        listSuggest.push(durationTime.asYears()); //1 years
        listSuggest.push(durationTime.asMonths() / 6); //2 quarter
        listSuggest.push(durationTime.asMonths() / 3); //1 quarter
        listSuggest.push(durationTime.asMonths() / 2); //2 month
        listSuggest.push(durationTime.asMonths()); //1 month
        listSuggest.push(durationTime.asWeeks() / 2); //2 Weeks
        listSuggest.push(durationTime.asWeeks()); //1 weeks
        listSuggest.push(durationTime.asDays()); // 1 day
        return listSuggest;
    };
    // find index of array which is closest with the goal
    TemporalBin.prototype.findClosetIndex = function (suggest_list, goal) {
        var closest = suggest_list.reduce(function (prev, curr) {
            return (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);
        });
        return suggest_list.indexOf(closest);
    };
    return TemporalBin;
}());
exports.TemporalBin = TemporalBin;
