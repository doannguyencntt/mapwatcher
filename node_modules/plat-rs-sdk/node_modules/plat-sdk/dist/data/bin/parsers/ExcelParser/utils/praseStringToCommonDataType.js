"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseStringToCommonDataType = void 0;
var lodash_1 = __importDefault(require("lodash"));
var errors_1 = require("../errorException/errors");
/**
 * @param value
 * @param type
 * @return data as type: number, string, boolean, date, null
 */
exports.parseStringToCommonDataType = function (value, type) {
    switch (type) {
        case 'number':
            return toNumber(value);
        case 'boolean':
            return toBoolean(value);
        case 'string':
            return toString(value);
        case 'date':
            return toDate(value);
        default:
            throw new errors_1.ErrorParsingDataException('data type for parsing data is invalid');
    }
};
var toNumber = function (value) {
    try {
        if (lodash_1.default.isEqual(lodash_1.default.toUpper(value), 'N/A')) {
            return null;
        }
        /**
         * accepted values:
         *  number 0-9
         *  character: "," (handler separating parts by comma excel)
         *  character: "." (decimal number)
         */
        var temp = String(value);
        if (/[^0-9\.\,\-]+/.test(value)) {
            return new errors_1.ErrorParsingDataException();
        }
        return lodash_1.default.toNumber(temp.replace(/[^0-9\.]+/g, ''));
    }
    catch (e) {
        return new errors_1.ErrorParsingDataException();
    }
};
var toBoolean = function (value) {
    try {
        return Boolean(value);
    }
    catch (e) {
        return new errors_1.ErrorParsingDataException();
    }
};
var toString = function (value) {
    try {
        return String(value);
    }
    catch (e) {
        return new errors_1.ErrorParsingDataException();
    }
};
var toDate = function (value) {
    try {
        return new Date(value);
    }
    catch (e) {
        return new errors_1.ErrorParsingDataException();
    }
};
