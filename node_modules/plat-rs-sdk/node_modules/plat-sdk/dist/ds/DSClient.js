"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DSClient = void 0;
var axios_1 = __importDefault(require("axios"));
var lodash_1 = __importDefault(require("lodash"));
var log_1 = __importDefault(require("../log"));
var DSClient = /** @class */ (function () {
    function DSClient(config) {
        this.apiDefault = 'https://api.ds.app.channelprecision.com/';
        this.config = lodash_1.default.assign({
            baseUrl: '',
            clientId: '',
            authorization: ''
        }, config);
        if (!this.config.baseUrl || this.config.baseUrl === '') {
            this.config.baseUrl = this.apiDefault;
        }
        this.createAxiosInstance(this.config.baseUrl, this.config.clientId, this.config.authorization);
    }
    /**
     * Create ClientId
     * @param client: ClientsRequest
     */
    DSClient.prototype.createClient = function (client) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.post("/v1/clients", {
                                id: client.clienId,
                                name: client.name
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_1 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_1);
                        throw e_1.response ? e_1.response.data : new Error(e_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Data Source
     * @param id: Id Data Source
     */
    DSClient.prototype.getDataSource = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/data-sources/" + id)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_2 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_2);
                        throw e_2.response ? e_2.response.data : new Error(e_2);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Data Source Schema
     * @param dsId
     */
    DSClient.prototype.getDataSourceSchema = function (dsId) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/data-sources/" + dsId + "/data/schema")];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_3 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_3);
                        throw e_3.response ? e_3.response.data : new Error(e_3);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create New Data Source
     * @param dataSourceAndSchema
     */
    DSClient.prototype.createDataSource = function (dataSourceAndSchema) {
        return __awaiter(this, void 0, void 0, function () {
            var dataSourceRes, dataSourceSchemaRes, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.axiosInstance.post("/v1/data-sources", dataSourceAndSchema.dataSource)];
                    case 1:
                        dataSourceRes = _a.sent();
                        dataSourceSchemaRes = void 0;
                        if (!dataSourceAndSchema.dataSourceSchema) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.axiosInstance.post("/v1/data-sources/" + dataSourceRes.data._id + "/data/schema", dataSourceAndSchema.dataSourceSchema)];
                    case 2:
                        dataSourceSchemaRes = _a.sent();
                        return [2 /*return*/, { dataSource: dataSourceRes.data, dataSourceSchema: dataSourceSchemaRes.data }];
                    case 3: return [2 /*return*/, { dataSource: dataSourceRes.data }];
                    case 4:
                        e_4 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_4);
                        throw e_4.response ? e_4.response.data : new Error(e_4);
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update Data Source
     * @param dataSource: dataSourcesRequest
     */
    DSClient.prototype.updateDataSource = function (dataSource) {
        return __awaiter(this, void 0, void 0, function () {
            var result, data, data, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 8]);
                        result = {};
                        if (!dataSource.dataSchema) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.axiosInstance.put("/v1/data-sources/" + dataSource.id + "/data/schema", dataSource.dataSchema)];
                    case 1:
                        data = (_a.sent()).data;
                        result.dataSchema = data;
                        return [3 /*break*/, 3];
                    case 2:
                        result.dataSchema = null;
                        _a.label = 3;
                    case 3:
                        if (!dataSource.dataSource) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.axiosInstance.put("/v1/data-sources/" + dataSource.id + "/?changingPassword=false", dataSource.dataSource)];
                    case 4:
                        data = (_a.sent()).data;
                        result.dataSource = data;
                        return [3 /*break*/, 6];
                    case 5:
                        result.dataSource = null;
                        _a.label = 6;
                    case 6: return [2 /*return*/, result];
                    case 7:
                        e_5 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_5);
                        throw e_5.response ? e_5.response.data : new Error(e_5);
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Upload File To Data Source
     * @param dataSource: dataScourcesRequest
     */
    DSClient.prototype.uploadFileToDataSource = function (dataSource) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.post("/v1/data-sources/" + dataSource.id + "/data/import", dataSource.localCsvOrExcelFilePath)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_6 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_6);
                        throw e_6.response ? e_6.response.data : new Error(e_6);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Import Json To Data Source
     * @param dataImportRequest: dataScourcesRequest
     */
    DSClient.prototype.importJsonToDataSource = function (dataImportRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.post("/v1/data-sources/" + dataImportRequest.id + "/data/import/json?override=" + dataImportRequest.override, { data: dataImportRequest.data })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_7 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_7);
                        throw e_7.response ? e_7.response.data : new Error(e_7);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * create data feed in DS services.
     * @param dsId
     * @param dataFeed
     */
    DSClient.prototype.createDataFeed = function (dsId, dataFeed) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.post("/v1/data-sources/" + dsId + "/data/feeds", dataFeed)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_8 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_8);
                        throw e_8.response ? e_8.response.data : new Error(e_8);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * count the number of data feed and its job in DS services.
     * @param dsId
     */
    DSClient.prototype.countDataFeedAndJobByDsId = function (dsId) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/data-sources/" + dsId + "/data/feeds/count")];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_9 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_9);
                        throw e_9.response ? e_9.response.data : new Error(e_9);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DSClient.prototype.createAxiosInstance = function (baseUrl, clientId, authorization) {
        this.axiosInstance = axios_1.default.create();
        this.axiosInstance.defaults.baseURL = baseUrl;
        this.axiosInstance.defaults.headers.post['Content-Type'] =
            'application/json';
        this.axiosInstance.interceptors.request.use(function (config) {
            config.headers['x-ps-client-id'] = clientId;
            config.headers['authorization'] = authorization;
            return config;
        }, function (err) { return Promise.reject(err); });
    };
    return DSClient;
}());
exports.DSClient = DSClient;
