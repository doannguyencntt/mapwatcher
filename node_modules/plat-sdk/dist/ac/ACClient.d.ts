import { AmzBuyboxCachedRequest, AmzBuyboxCachedResult, AmzProductReviewsRequest, AmzProductReviewsResult, AWSVariantsRequest, AWSVariantsResult, ConfigACClient, EMWSInventoryResult, ESKUVaultAvailableQuantityResult, MWSInfoRequest, MWSInfoRequestWithMarketplace, MWSInfoResult, MWSProductVariantsRequest, MWSProductVariantsResult, SKUsRequest, SKUsResult, UPCsRequest, UPCsResult } from './constant/constant';
export declare class ACClient {
    URI_SKU_VAULT_INVENTORY: string;
    MWS_INVENTORY: string;
    private axiosInstance;
    private config;
    private apiDefault;
    constructor(config: ConfigACClient);
    /**
     * Get UPCs
     * @param UPCs: UPCsRequest
     */
    getUPCs(UPCs: UPCsRequest): Promise<UPCsResult>;
    /**
     * Get SKUs
     * @param SKUs: SKUsRequest
     */
    getSKUs(SKUs: SKUsRequest): Promise<SKUsResult>;
    /**
     * Get product info from aws
     * @param Variants: AWSVariantsRequest
     */
    getAWSInfo(Variants: AWSVariantsRequest): Promise<AWSVariantsResult>;
    /**
     * Get product variant from aws
     * @param Variants: AWSVariantsRequest
     */
    getAWSVariants(Variants: AWSVariantsRequest): Promise<AWSVariantsResult>;
    /**
     * Get product details from MWS endpoints
     * @param MWSInfo: MWSInfoRequest
     */
    getMWSInfo(MWSInfo: MWSInfoRequest): Promise<MWSInfoResult>;
    /**
     * Get sku vault quantity
     * @param {MWSInfoRequest} MWSInfo
     * @param MWSInfo.ids max length 100
     * @return {Promise<ESKUVaultAvailableQuantityResult>}
     */
    getSKUVaultInventory(MWSInfo: MWSInfoRequestWithMarketplace): Promise<ESKUVaultAvailableQuantityResult>;
    /**
     * @desc Get MWS Inventory
     * @param {MWSInfoRequestWithMarketplace} MWSInfo
     * @param MWSInfo.ids max length 100
     * @return {Promise<EMWSInventoryResult>}
     */
    getMWSInventory(MWSInfo: MWSInfoRequestWithMarketplace): Promise<EMWSInventoryResult>;
    /**
     * Get product variants from MWS endpoints
     * @param MWSProductVariants: MWSProductVariantsRequest
     */
    getMWSVariants(MWSProductVariants: MWSProductVariantsRequest): Promise<MWSProductVariantsResult>;
    /**
     * Get cached amazon buybox sellers
     * @param AmzBuyboxCached: AmzBuyboxCachedRequest
     */
    getCachedAmazonSellers(AmzBuyboxCached: AmzBuyboxCachedRequest): Promise<AmzBuyboxCachedResult>;
    /**
     * Get cached amazon product reviews
     * @param AmzProductReviews: AmzProductReviewsRequest
     */
    getCachedProductReviews(AmzProductReviews: AmzProductReviewsRequest): Promise<AmzProductReviewsResult>;
    private createAxiosInstance;
}
