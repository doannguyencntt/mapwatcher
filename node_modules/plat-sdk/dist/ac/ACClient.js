"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACClient = void 0;
var axios_1 = __importDefault(require("axios"));
var lodash_1 = __importDefault(require("lodash"));
var querystring_1 = __importDefault(require("querystring"));
var log_1 = __importDefault(require("../log"));
var ACClient = /** @class */ (function () {
    function ACClient(config) {
        this.URI_SKU_VAULT_INVENTORY = '/v1/skuvault/available-quantity';
        this.MWS_INVENTORY = '/v1/mws/inventory';
        this.apiDefault = 'https://api.ac.app.channelprecision.com/';
        this.config = lodash_1.default.assign({
            baseUrl: '',
            clientId: ''
        }, config);
        if (!this.config.baseUrl || this.config.baseUrl === '') {
            this.config.baseUrl = this.apiDefault;
        }
        this.createAxiosInstance(this.config.baseUrl, this.config.clientId);
    }
    /**
     * Get UPCs
     * @param UPCs: UPCsRequest
     */
    ACClient.prototype.getUPCs = function (UPCs) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/upcs", {
                                params: UPCs,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_1 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_1);
                        throw e_1.response ? e_1.response.data : new Error(e_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get SKUs
     * @param SKUs: SKUsRequest
     */
    ACClient.prototype.getSKUs = function (SKUs) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/skus", {
                                params: SKUs,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_2 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_2);
                        throw e_2.response ? e_2.response.data : new Error(e_2);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get product info from aws
     * @param Variants: AWSVariantsRequest
     */
    ACClient.prototype.getAWSInfo = function (Variants) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/aws/lookup/info", {
                                params: Variants,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_3 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_3);
                        throw e_3.response ? e_3.response.data : new Error(e_3);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get product variant from aws
     * @param Variants: AWSVariantsRequest
     */
    ACClient.prototype.getAWSVariants = function (Variants) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/aws/lookup/variants", {
                                params: Variants,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_4 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_4);
                        throw e_4.response ? e_4.response.data : new Error(e_4);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get product details from MWS endpoints
     * @param MWSInfo: MWSInfoRequest
     */
    ACClient.prototype.getMWSInfo = function (MWSInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/mws/product_details", {
                                params: {
                                    id_type: MWSInfo.item_type,
                                    ids: MWSInfo.item_ids
                                },
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_5 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_5);
                        throw e_5.response ? e_5.response.data : new Error(e_5);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get sku vault quantity
     * @param {MWSInfoRequest} MWSInfo
     * @param MWSInfo.ids max length 100
     * @return {Promise<ESKUVaultAvailableQuantityResult>}
     */
    ACClient.prototype.getSKUVaultInventory = function (MWSInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var params, response, e_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        params = { id_type: MWSInfo.item_type, ids: MWSInfo.item_ids, marketplace: MWSInfo.marketplace };
                        if (!params.marketplace) {
                            params.marketplace = 'amazon.com';
                        }
                        return [4 /*yield*/, this.axiosInstance.get(this.URI_SKU_VAULT_INVENTORY, {
                                params: params,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_6 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_6);
                        throw e_6.response ? e_6.response.data : new Error(e_6);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @desc Get MWS Inventory
     * @param {MWSInfoRequestWithMarketplace} MWSInfo
     * @param MWSInfo.ids max length 100
     * @return {Promise<EMWSInventoryResult>}
     */
    ACClient.prototype.getMWSInventory = function (MWSInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var params, response, e_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        params = { id_type: MWSInfo.item_type, ids: MWSInfo.item_ids, marketplace: MWSInfo.marketplace };
                        if (!params.marketplace) {
                            params.marketplace = 'ATVPDKIKX0DER';
                        }
                        return [4 /*yield*/, this.axiosInstance.get(this.MWS_INVENTORY, {
                                params: params,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_7 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_7);
                        throw e_7.response ? e_7.response.data : new Error(e_7);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get product variants from MWS endpoints
     * @param MWSProductVariants: MWSProductVariantsRequest
     */
    ACClient.prototype.getMWSVariants = function (MWSProductVariants) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/mws/product_variants", {
                                params: MWSProductVariants,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_8 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_8);
                        throw e_8.response ? e_8.response.data : new Error(e_8);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get cached amazon buybox sellers
     * @param AmzBuyboxCached: AmzBuyboxCachedRequest
     */
    ACClient.prototype.getCachedAmazonSellers = function (AmzBuyboxCached) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/amazon/buybox_sellers", {
                                params: AmzBuyboxCached,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_9 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_9);
                        throw e_9.response ? e_9.response.data : new Error(e_9);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get cached amazon product reviews
     * @param AmzProductReviews: AmzProductReviewsRequest
     */
    ACClient.prototype.getCachedProductReviews = function (AmzProductReviews) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/amazon/product_reviews", {
                                params: AmzProductReviews,
                                paramsSerializer: function (params) {
                                    return querystring_1.default.stringify(params);
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_10 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_10);
                        throw e_10.response ? e_10.response.data : new Error(e_10);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ACClient.prototype.createAxiosInstance = function (baseUrl, clientId) {
        this.axiosInstance = axios_1.default.create();
        this.axiosInstance.defaults.baseURL = baseUrl;
        this.axiosInstance.defaults.headers.post['Content-Type'] =
            'application/json';
        this.axiosInstance.interceptors.request.use(function (config) {
            config.headers['x-ac-client-id'] = clientId;
            return config;
        }, function (err) { return Promise.reject(err); });
    };
    return ACClient;
}());
exports.ACClient = ACClient;
