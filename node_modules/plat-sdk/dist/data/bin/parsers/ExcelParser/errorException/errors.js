"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorParsingDataException = exports.InvalidFileImport = exports.InvalidExtension = exports.BaseError = void 0;
var BaseError = /** @class */ (function (_super) {
    __extends(BaseError, _super);
    function BaseError() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.errorCode = 'error';
        Error.captureStackTrace(_this, BaseError);
        return _this;
    }
    return BaseError;
}(Error));
exports.BaseError = BaseError;
var InvalidExtension = /** @class */ (function (_super) {
    __extends(InvalidExtension, _super);
    function InvalidExtension(message) {
        if (message === void 0) { message = 'invalid'; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.errorCode = 'invalidExtension';
        _this.message = message;
        return _this;
    }
    return InvalidExtension;
}(BaseError));
exports.InvalidExtension = InvalidExtension;
var InvalidFileImport = /** @class */ (function (_super) {
    __extends(InvalidFileImport, _super);
    function InvalidFileImport(listErrors) {
        if (listErrors === void 0) { listErrors = []; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.listErrors = [];
        _this.errorCode = 'invalidFileImport';
        _this.listErrors = listErrors;
        return _this;
    }
    return InvalidFileImport;
}(BaseError));
exports.InvalidFileImport = InvalidFileImport;
var ErrorParsingDataException = /** @class */ (function (_super) {
    __extends(ErrorParsingDataException, _super);
    function ErrorParsingDataException(message) {
        if (message === void 0) { message = 'invalid config'; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        _this.errorCode = 'error_parsing_data';
        _this.message = message;
        return _this;
    }
    return ErrorParsingDataException;
}(BaseError));
exports.ErrorParsingDataException = ErrorParsingDataException;
