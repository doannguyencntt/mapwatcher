"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticExpression = void 0;
var moment_timezone_1 = __importDefault(require("moment-timezone"));
var expr_eval_1 = require("expr-eval");
var lodash_1 = __importDefault(require("lodash"));
var ExpressionEvaluator = /** @class */ (function () {
    function ExpressionEvaluator(timezone) {
        var _this = this;
        this.scope = [];
        this.parser = new expr_eval_1.Parser();
        this.timezone = timezone || moment_timezone_1.default.tz.guess();
        this.scope.push('TODAY');
        this.parser.functions.TODAY = function () {
            return moment_timezone_1.default.tz(_this.timezone).startOf("day").toISOString();
        };
        this.scope.push('YESTERDAY');
        this.parser.functions.YESTERDAY = function () {
            return moment_timezone_1.default.tz(_this.timezone).add(-1, "days").startOf("day").toISOString();
        };
        this.scope.push('DATE_THIS');
        this.parser.functions.DATE_THIS = function (unit) {
            return moment_timezone_1.default.tz(_this.timezone).startOf(unit).toISOString();
        };
        this.scope.push('DATE_LAST');
        this.parser.functions.DATE_LAST = function (value, unit) {
            return moment_timezone_1.default.tz(_this.timezone).add(-value, unit).startOf("day").toISOString();
        };
        this.scope.push('FORMAT');
        this.parser.functions.FORMAT = function (type, formatString) {
            return { type: type, formatString: formatString };
        };
        this.scope.push('DATE_ADD');
        this.parser.functions.DATE_ADD = function (value, amount, unit) {
            if (lodash_1.default.isString(value) && _this.isExpressionEvaluator(value)) {
                value = _this.eval(value);
            }
            return moment_timezone_1.default(value).tz(_this.timezone).add(amount, unit).toISOString();
        };
        this.scope.push('DATE_START_OF');
        this.parser.functions.DATE_START_OF = function (value, unit) {
            if (lodash_1.default.isString(value) && _this.isExpressionEvaluator(value)) {
                value = _this.eval(value);
            }
            return moment_timezone_1.default(value).tz(_this.timezone).startOf(unit).toISOString();
        };
        this.scope.push('DATE_END_OF');
        this.parser.functions.DATE_END_OF = function (value, unit) {
            if (lodash_1.default.isString(value) && _this.isExpressionEvaluator(value)) {
                value = _this.eval(value);
            }
            return moment_timezone_1.default(value).tz(_this.timezone).endOf(unit).toISOString();
        };
    }
    ExpressionEvaluator.prototype.isExpressionEvaluator = function (expression) {
        for (var _i = 0, _a = this.scope; _i < _a.length; _i++) {
            var prefix = _a[_i];
            if (expression.startsWith(prefix)) {
                return true;
            }
        }
        return false;
    };
    ExpressionEvaluator.prototype.eval = function (expression) {
        return this.parser.evaluate(expression);
    };
    return ExpressionEvaluator;
}());
var StaticExpression = /** @class */ (function () {
    function StaticExpression() {
    }
    StaticExpression.eval = function (expression, timezone) {
        var expressionEvaluator = new ExpressionEvaluator(timezone);
        return expressionEvaluator.eval(expression);
    };
    StaticExpression.isValid = function (expression) {
        var expressionEvaluator = new ExpressionEvaluator();
        return expressionEvaluator.isExpressionEvaluator(expression);
    };
    return StaticExpression;
}());
exports.StaticExpression = StaticExpression;
