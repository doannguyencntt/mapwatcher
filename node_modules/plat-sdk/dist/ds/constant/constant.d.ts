export interface ConfigDSClient {
    baseUrl: string;
    clientId: string;
    authorization: string;
    debug?: string[];
}
export interface CreateClientRequest {
    clienId: string;
    name: string;
}
export interface CreateClientResult {
    id: string;
    name: string;
}
export interface GetDataSourceResult {
    status: string;
    external_id: string;
    client_id: string;
    name: string;
    description: string;
    type: string;
    config: {};
}
export interface GetDataSourceSchemaResult {
    ds_id: string;
    cols: {
        name: string;
        label: string;
        type: string;
    }[];
    indexes?: IDataSourceSchemaIndexes[];
}
export interface ICreateDataSourceAndSchema {
    dataSource: ICreateDataSource;
    dataSourceSchema?: ICreateDataSourceSchema | null;
}
export interface ICreateDataSource {
    external_id: string;
    client_id: string;
    name: string;
    description: string;
    type: string;
    config: {};
}
export interface ICreateDataSourceSchema {
    cols: {
        name: string;
        label: string;
        type: string;
    }[];
    indexes?: IDataSourceSchemaIndexes[];
}
export interface IDataSourceSchemaIndexes {
    type: string;
    cols: string[];
}
export interface CreateDataSourceResult {
    status: string;
    deleted: boolean;
    _id: string;
    external_id: string;
    client_id: string;
    name: string;
    description: string;
    type: string;
    config: {};
    created: string;
    modified: string;
    __v: number;
    id: string;
}
export interface CreateDataSourceSchemaResult {
    ds_id: string;
    cols: {
        name: string;
        label: string;
        type: string;
    }[];
    indexes: {
        cols: string[];
        type: string;
    }[];
}
export interface IUpdateDataSourceAndSchema {
    id: string;
    dataSource?: IUpdateDataSource | null;
    dataSchema?: IUpdateDataSourceSchema | null;
}
export interface IUpdateDataSourceAndSchemaResult {
    dataSource?: IUpdateDataSource | null;
    dataSchema?: IUpdateDataSourceSchema | null;
}
export interface IUpdateDataSource {
    id: string;
    external_id: string;
    client_id: string;
    name: string;
    description: string;
    type: string;
    config: {};
}
export interface IUpdateDataSourceSchema {
    cols: {
        name: string;
        label: string;
        type: string;
    }[];
    indexes?: IDataSourceSchemaIndexes[];
}
export interface UpdateDataSourceResult {
    status: string;
    external_id: string;
    client_id: string;
    name: string;
    description: string;
    type: string;
    config: {};
}
export interface UpdateDataSourceSchemaResult {
    ds_id: string;
    cols: {
        name: string;
        label: string;
        type: string;
    }[];
    indexes: {
        cols: string[];
        type: string;
    }[];
}
export interface UploadFileToDataSourceRequest {
    id: string;
    localCsvOrExcelFilePath: any[];
}
export interface UploadFileToDataSourceResult {
    result: {};
    ops: {
        _id: string;
    }[];
    insertedCount: number;
    insertedIds: {
        index: string;
    }[];
}
export interface ImportJsonToDataSourceRequest {
    id: string;
    override: boolean;
    data: any[];
}
export interface ImportJsonToDataSourceResult {
    result: {};
    ops: {
        _id: string;
    }[];
    insertedCount: number;
    insertedIds: {
        index: string;
    }[];
}
export interface IDataSourceFeedHttpPayload {
    unique_by: string[];
    type: string;
    recurrence: string;
    update_strategy: string;
    http_config: {
        source: string;
    };
}
export interface IDataSourceFeedHttpRes {
    "ds_id": "string";
    "unique_by": ["string"];
    "type": "string";
    "recurrence": "string";
    "update_strategy": "string";
    "status": "string";
    "last_sync_started": "2020-04-24";
    "last_sync_completed": "2020-04-24";
    "http_config": {};
    "error_code": "string";
    "error_message": "string";
}
export interface ICountDataFeedAndJobRes {
    dataFeedCount: number;
    dataFeedJobCount: number;
}
export interface DSError extends Error {
    statusCode: number | null;
    error: string;
    message: string;
    errors?: string[];
}
