"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RAClient = void 0;
var axios_1 = __importDefault(require("axios"));
var lodash_1 = __importDefault(require("lodash"));
var log_1 = __importDefault(require("../log"));
var RAClient = /** @class */ (function () {
    function RAClient(config) {
        this.apiDefault = 'https://api.ra.app.channelprecision.com/';
        this.config = lodash_1.default.assign({
            baseUrl: '',
            token: '',
            raApiToken: ''
        }, config);
        if (!this.config.baseUrl || this.config.baseUrl === '') {
            this.config.baseUrl = this.apiDefault;
        }
        this.createAxiosInstance(this.config.baseUrl, this.config.token, this.config.raApiToken);
    }
    RAClient.prototype.createAxiosInstance = function (baseUrl, token, raApiToken) {
        this.axiosInstance = axios_1.default.create();
        this.axiosInstance.defaults.baseURL = baseUrl;
        this.axiosInstance.defaults.headers.post['Content-Type'] =
            'application/json';
        this.axiosInstance.interceptors.request.use(function (config) {
            config.headers['Authorization'] = "Bearer " + (token || '');
            config.headers['ra-api-token'] = raApiToken || '';
            return config;
        }, function (err) { return Promise.reject(err); });
    };
    RAClient.prototype.createDashboard = function (dashboardRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.post("/v1/clients/" + dashboardRequest.params.client_id + "/dashboards", dashboardRequest.payload)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_1);
                        throw e_1.response ? e_1.response.data : new Error(e_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RAClient.prototype.createWidget = function (widgetRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.post("/v1/clients/" + widgetRequest.params.client_id + "/visualizations", widgetRequest.payload)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_2);
                        throw e_2.response ? e_2.response.data : new Error(e_2);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RAClient.prototype.updateWidget = function (widgetRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.put("/v1/clients/" + widgetRequest.params.client_id + "/visualizations/" + widgetRequest.params.viz_id, widgetRequest.payload)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_3 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_3);
                        throw e_3.response ? e_3.response.data : new Error(e_3);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RAClient.prototype.sharedDashboard = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.put("/v1/clients/" + request.params.client_id + "/dashboards/share", request.payload)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_4 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_4);
                        throw e_4.response ? e_4.response.data : new Error(e_4);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RAClient.prototype.getWidgets = function (widgetRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get("/v1/clients/" + widgetRequest.params.client_id + "/visualizations", {
                                params: widgetRequest.payload
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_5 = _a.sent();
                        log_1.default(this.config.debug, 'error', e_5);
                        throw e_5.response ? e_5.response.data : new Error(e_5);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return RAClient;
}());
exports.RAClient = RAClient;
