import { ClipboardUtil } from "../../src/clipboard";
import * as chai from 'chai';
import { JSDOM } from "jsdom";
import { doesNotReject } from "assert";
import { promises } from "dns";

const expect = chai.expect;

let copyData;

let tempNavigator;

describe('copy test', () => {
  beforeEach( () => {

    const dom = new JSDOM(`<html>
                            <body>
                            </body>
                           </html>`,
    { url: 'http://localhost' },);

    const navigator = dom.window.navigator;
    
    tempNavigator = global.navigator;

    navigator.clipboard = {
      async writeText(copyObject) {
        copyData = copyObject;
      },

      async readText() {
        return new Promise(resolve => resolve(copyData))
      }
    }

    global.navigator = navigator;
  })

  afterEach(() => {
    global.navigator = tempNavigator
  })
   
  it('test func paste with key not match', async () => {
    
    let key1 = 'object-1';

    let key2 = 'object-2';

    let objectCopy = {
      a:1,
      b:2,
      c:3
    };
    let targetObject = {
      a:2,
      b:3,
      c:4
    }

    ClipboardUtil.copy(objectCopy, key1);
    const paste = await ClipboardUtil.paste(targetObject,key2);
    expect(paste).to.equal(false);
  })

  it('test func paste with key match', async() => {
    let key1 = 'object-2';

    let key2 = 'object-2';

    let objectCopy = {
      a:1,
      b:2,
      c:3
    };
    let targetObject = {
      a:2,
      b:3,
      c:4
    }

    ClipboardUtil.copy(objectCopy, key1);
    const paste = await ClipboardUtil.paste(targetObject,key2);
    expect(paste).to.eqls(objectCopy);
  })

  it('test func copy without key or data', async () => {
    const copy = await ClipboardUtil.copy(null,'test');
    expect(copy).to.equal(false);
  })

  it('test func not support clipboard', () => {
    const dom = new JSDOM(`<html>
        <body>
        </body>
    </html>`,
    { url: 'http://localhost' },);

    const navigator = dom.window.navigator;
    navigator.clipboard = false;
    global.navigator = navigator ;
    const support = ClipboardUtil.isCopySupported();
    
    expect(support).to.equal(false);
  })

  it('test func support clipboard', () => {
    const dom = new JSDOM(`<html>
        <body>
        </body>
    </html>`,
    { url: 'http://localhost' },);

    const navigator = dom.window.navigator;
    navigator.clipboard = true;
    global.navigator = navigator ;
    const support = ClipboardUtil.isCopySupported();
    
    expect(support).to.equal(true);
  })

  it('test func check key not match', async () => {
    let key1 = 'object-2';

    let key2 = 'object-1';

    let objectCopy = {
      a:1,
      b:2,
      c:3
    };
    ClipboardUtil.copy(objectCopy, key1);
    const check = await ClipboardUtil.check(key2);
    expect(check).to.eqls(false);  
  })

  it('test func check key match', async () => {
    let key1 = 'object-2';

    let key2 = 'object-2';

    let objectCopy = {
      a:1,
      b:2,
      c:3
    };
    ClipboardUtil.copy(objectCopy, key1);
    const check = await ClipboardUtil.check(key2);
    expect(check).to.eqls(true);  
  })

})
