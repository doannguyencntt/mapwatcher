import { NumericBin } from "../../src/data/bin/NumericBin";
import * as chai from 'chai';

const expect = chai.expect;

describe('numericBin test', () => {
  let numericBin: NumericBin;
  before(() => {
    numericBin = new NumericBin();
  });

  it('test func makeUniformBins with nice = false', () => {
    let min = 3;
    let max = 100;
    let nice = false;
    const res = numericBin.makeUniformBins(min, max, 10, nice);
    expect(res.length).equal(10);
    expect(res[0].min).equal(3);
    expect(res[0].label).equal('3 - 13');
  });

  it('test func makeUniformBins with nice = TRUE', () => {
    let min = 3;
    let max = 100;
    let nice = true;
    const res = numericBin.makeUniformBins(min, max, 10, nice);
    expect(res.length).equal(10);
    expect(res[0].min).equal(0);
    expect(res[0].label).equal('0 - 10');
  });

  it('test func makeAutoBins without nice', () => {
    let min = 63;
    let max = 150;
    let nice = false;
    const res = numericBin.makeAutoBins(min, max, 15, nice);
    expect(res.length).equal(18);
    expect(res[0].min).equal(63);
    expect(res[0].label).equal('63 - 68');
    expect(res[0].width).equal(5);
  });

  it('test func makeAutoBins with nice', () => {
    let min = 63;
    let max = 150;
    let nice = true;
    const res = numericBin.makeAutoBins(min, max, 15, nice);
    expect(res.length).equal(18);
    expect(res[0].min).equal(60);
    expect(res[0].label).equal('60 - 65');
    expect(res[0].width).equal(5);
  });

  it('test func makeUniformBins with invalid input', () => {
    expect(()=>numericBin.makeUniformBins(undefined, 8, 15, true)).to.throw("invalid input");
    // @ts-ignore
    expect(()=>numericBin.makeUniformBins(5, 8, '15', true)).to.throw("invalid input");
    expect(()=>numericBin.makeUniformBins(10, 8, 15, true)).to.throw('max number must be greater or equal min number')
  });

  it('test func makeAutoBins with invalid input', () => {
    expect(()=>numericBin.makeAutoBins(undefined, 8, 15, true)).to.throw("invalid input");
    // @ts-ignore
    expect(()=>numericBin.makeAutoBins(5, 8, '15', true)).to.throw("invalid input")
    expect(()=>numericBin.makeAutoBins(10, 8, 15, true)).to.throw('max number must be greater or equal min number')
  });

  it('test func makeAutoBins expected > (max -min)', () => {
    let result = numericBin.makeAutoBins(1, 8, 15, true);
    expect(result[0].max - result[0].min).equal(1);
  });
});
